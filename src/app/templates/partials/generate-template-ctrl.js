//Template Generate controller
(function () {
    'use strict';

    angular
        .module('cloudlex.templates')
        .controller('GenerateTemplateCtrl', GenerateTemplateCtrl);

    GenerateTemplateCtrl.$inject = ['$modalInstance', 'notification-service', 'globalConstants', 'templateData', 'templatestDatalayer', '$q', 'allPartiesDataService', 'matterDetailsService', 'matterFactory', 'eventsDataService', 'templateHelper', 'templateConstants', 'template_config', 'documentsDataService', '$filter', 'generatorTemplateData', 'contactFactory', 'globalContactConstants', '$http'];

    function GenerateTemplateCtrl($modalInstance, notificationService, globalConstants,
        templateData, templatestDatalayer, $q, allPartiesDataService,
        matterDetailsService, matterFactory, eventsDataService, templateHelper, templateConstants, template_config, documentsDataService, $filter, generatorTemplateData, contactFactory, globalContactConstants, $http) {

        var vm = this;
        vm.TemplateDetails = globalConstants.TemplateDetails;
        vm.TemplateModelInfo = {};
        vm.autoGenerateTemplateModelInfo = {};
        vm.generatorTemplateData = generatorTemplateData;
        vm.TemplateModelInfo = templateData;
        vm.generateNewTemplate = generateNewTemplate;
        vm.close = closePopup;
        vm.option = templateData.option;
        vm.template_code = templateData.template_code;
        //vm.validateSelection = validateSelection;
        vm.newInsauranceInfo = {};
        vm.plaintiffs = {};
        vm.defendants = {};
        vm.defendants_dropdown = [];
        vm.workersCompInsurance = [];
        vm.workerCompAttorney = [];
        vm.paralegalListCustomFilter = [];
        vm.attorneys = {};
        vm.paralegalList = [];
        vm.OnlyParalegalList = [];
        vm.allParalegalList = []; // For SMP
        vm.allFirmUser = [];
        vm.plaintiffContactInfo = {};
        vm.adjustorContactInfo = {};
        vm.insuranceProviderContactInfo = {};
        vm.selectedPlaintiffInfo = [];
        vm.allParalegalList1 = [];
        vm.lienAmounts = [];
        vm.secondParalegalList = [];
        vm.insuranceFilterOnPlaintiff = [];
        vm.noFaultInsuranceProviders = [];
        vm.plaintiffEmployers = [];
        vm.insurance_allParties = [];
        vm.matterContacts = [];
        vm.matterAllContacts = [];
        vm.allMatterContacts = [];
        vm.allContacts = [];
        vm.matterContactsForDefault = [];
        vm.insurance_providerList = [];
        vm.expenseProviders = [];
        vm.filterClaim = [];
        vm.fnFilterClaimByInsuranceProvider = fnFilterClaimByInsuranceProvider;
        vm.filterClaimByInsuranceProvider = [];
        vm.plaintiffExpenseProvider = [];
        vm.filterPhysicianProviders = [];
        vm.filterOtherPartyHospital = [];
        vm.onlyInsuranceProvider = [];
        vm.uniqOnlyInsuranceProvider = [];
        vm.uniqOnlyInsuranceProviderAdjuster = [];
        vm.otherPartyPhysicians = [];
        vm.phpJavaPhysicianConcat = [];
        vm.InsuranceUMProvider = [];
        vm.InsurancePropertyProvider = [];
        vm.onlyInsuranceBIProvider = [];
        vm.insuranceAdjusorInsured = [];
        vm.onlyAdjustor = [];
        vm.onlyInsuranceProviderNew = [];
        vm.insuranceAdjusorInsuredType = [];
        vm.insuranceAdjusters = [];
        vm.insuranceAdjusorInsuredDefendant = [];
        vm.medicalInfoProvider = [];
        vm.filterHospitalProviders = [];
        vm.plaintiffliens = [];
        vm.contactType = templateConstants.contactGroupBy;
        vm.paralegalType = templateConstants.paralegalGroupBy;
        vm.firmUserType = templateConstants.firmUserGroupBy;
        vm.pd_Type = templateConstants.plaintiffDefendantGroupBy;
        vm.providerType = templateConstants.serviceProvidersGroup;
        vm.attorneyTypes = templateConstants.allAttorneysGroupBy;
        vm.changeAdjusterInfo = changeAdjusterInfo;
        vm.groupServiceProviders = groupServiceProviders;
        vm.groupAllAttorneys = groupAllAttorneys;
        vm.plaintiffHospitalProviderFilter = plaintiffHospitalProviderFilter;
        vm.filterPhysicianProvider = filterPhysicianProvider;
        vm.filterMedicalServiceProvider = filterMedicalServiceProvider;
        vm.filterMedicalServiceProviders = [];
        vm.filterMedicalServiceProviderByPhysician = filterMedicalServiceProviderByPhysician;
        vm.associateContactsList = []; //for insurance provider
        vm.associateMedicalContacts = []; // medical provider
        vm.allPhysicians = [];
        vm.insuranceContactList = [];
        vm.hospitalContacts = [];
        vm.insuredParties = [];
        vm.associateContacts = []; //for service provider & defendant attorney dropdown
        vm.associateInsParties = [];
        vm.filterInsurances = [];
        vm.plaintiffOrDefendant = {};
        vm.EBTEvents = [];
        vm.physician_provider_medicalInfo = [];
        vm.allMedicalPhysician = [];
        vm.allMedicalPhysicianList = [];
        vm.otherEvents = [];
        vm.arbitrationEvent = [];
        vm.paralegalListFilter = [];
        vm.filterOtherPartyData = [];
        vm.IMEEvents = [];
        vm.AllEvents = [];
        vm.AllEvents1 = [];
        vm.AllEvents2 = [];
        vm.AllEvents3 = [];
        vm.TrialEvents = []; // trial events
        vm.EUOADEvents = []; //EUO Appointment and EUO Deadline;
        vm.NOCEvents = []; //Notice of claim event;
        vm.EUOEvents = [];
        vm.AllEventsOriginal1 = [];
        vm.AllEventsOriginal2 = [];
        vm.AllEventsOriginal3 = [];
        vm.leadAttorneyList = [];
        vm.secondLeadAttorneyList = [];
        vm.matterLiens = [];
        vm.secDefendants = [];
        vm.defendantAttorneyids = [];
        vm.uniqDefendantAttorneyids = []; // to avoid duplication
        vm.defendantAttorneysIds = [];
        vm.expertWitnessOnlyDefendant = [];
        vm.expertWitnessOnlyDefendantDuplicateList = [];
        vm.physicianOnlyPlaintiff = [];
        vm.physicianOnlyPlaintiffDuplicateList = [];
        vm.allWitnessDuplicateList = [];
        vm.allWitness = [];
        vm.physicianMedicalList = [];
        vm.providerMedicalList = [];
        vm.plaintiff_dropdown = [];
        vm.deceased_plaintiff = [];
        vm.plaintiff_dropdown_minor = [];
        vm.physician_provider = [];
        vm.physician_provider_medicalInfo = [];
        vm.physician_provider_medicalInfo1 = [];
        vm.hospital_provider = [];
        vm.selectedPlaintiffOrDefendant = [];
        vm.filterAdjusterContacts = [];
        vm.medicalBillInfo = [];
        vm.medicalBillInfoList = [];
        vm.medicalBillListWOProvider = [];
        vm.captionDocumentList = [];
        vm.showProviderDropdown = showProviderDropdown;
        vm.showPlaintiffCheckboxes = showPlaintiffCheckboxes;
        vm.showDefendantCheckBoxes = showDefendantCheckBoxes;
        vm.getInsContactsList = getInsContactsList;
        vm.getServiceContactsList = getServiceContactsList;
        vm.getDefendantAttorney = getDefendantAttorney;
        vm.getPlaintiffEmployers = getPlaintiffEmployers;
        vm.getPlaintiffEmployersNew = getPlaintiffEmployersNew;
        vm.getContactInfo_Java = getContactInfo_Java;
        vm.getContactInfo_Java_InsuranceAdj = getContactInfo_Java_InsuranceAdj;
        vm.getContactInfo_Java_insuranceProvider = getContactInfo_Java_insuranceProvider;
        vm.getPlaintiffContactInfo = getPlaintiffContactInfo;
        vm.addPlaintiffContactObj = addPlaintiffContactObj;
        vm.getPlaintiffInsuranceProviders = getPlaintiffInsuranceProviders;
        vm.changePlaintiffDefendantAddress = changePlaintiffDefendantAddress;
        vm.changePlaintiffDefendantAddress_1 = changePlaintiffDefendantAddress_1;
        vm.fillAddressPlaintiffDefendant = fillAddressPlaintiffDefendant;
        vm.fillAddressPlaintiffDefendant_1 = fillAddressPlaintiffDefendant_1;
        vm.filterPlaintiffLiens = filterPlaintiffLiens;
        vm.manageIMEEvent = manageIMEEvent;
        vm.groupContacts = groupContacts;
        vm.groupPlaintiffDefendant = groupPlaintiffDefendant;
        vm.groupParalegals = groupParalegals;
        vm.groupFirmUsers = groupFirmUsers;
        vm.filterExpenseProvider = filterExpenseProvider;
        vm.insuranceContactFetch = insuranceContactFetch;
        vm.onlyInsuranceProviderPlantiff = [];
        vm.onlyInsuranceProviderDefendant = [];
        vm.onlyInsuranceProviderDefendant2 = [];
        vm.uniquOnlyInsuranceProviderDefendant = [];
        vm.uniquOnlyInsuranceProviderPlantiff = [];
        vm.allMedicalProvidersAndMedicalBillInfo = [];
        vm.allMedicalProvidersList = [];
        vm.allMedicalProvidersList_Java = [];
        vm.allMedicalProvidersAssociatePhysician = [];
        vm.allMedicalProvidersPlantiffOnly = [];
        vm.MedicalBillInfoPlantiffOnly = [];
        vm.AllMatterLiens = [];
        vm.linesHolderInsuranceProvider = [];
        vm.medicalproviderdate = [];
        vm.noFaultInsuranceProvidersId = [];
        vm.estateAdmins = [];
        vm.solEvents = [];
        vm.uniqMedicalBillInfo = [];
        vm.uniqMedicalBillInfoForOutstandingAmount = [];
        vm.filterOtherPartySpouse = [];
        vm.title = [{ id: "Mr." }, { id: "Ms." }];
        vm.pronoun = [{ id: "his" }, { id: "her" }, { id: "him" }];
        vm.communicationMethod = [{ id: "Fax" }, { id: "Email" }, { id: "Regular Mail" }, { id: "Certified Mail" }];
        vm.communicationMethod_1 = [{ id: "Fax" }, { id: "Email" }, { id: "Regular Mail" }, { id: "Certified Mail" }, { id: "FedEx" }, { id: "UPS" }];
        vm.plaintiff_guardian = [];
        vm.medicalBillDates = [];
        vm.medicalInfoDates = [];
        vm.medicalBillAndInfoDates = [];
        vm.medicalInfoRequestedDates = [];
        vm.discoveryEndDateEvent = [];
        vm.defendantAdjusters = [];
        vm.defendantInsProvider = [];
        vm.defendantInsProviderBI = [];
        vm.medicalProvidersFromMedicalBillAndInfo = [];
        vm.medicalProvidersFromMedicalBillamountAndInfo = [];
        vm.uniqMedicalProvidersFromBillAndInfo = [];
        vm.uniqMedicalProvidersFromBillAndInfoPhysician = [];
        vm.uniqMedicalProvidersFromBillAndInfoCopy = [];
        vm.medicalProvidersFromBillAndInfo = [];
        vm.medicalProvidersFromBillAndInfoWithBillId = [];
        vm.otherPartyExpertWitness = [];
        vm.otherPartytWitness = [];
        vm.otherPartytHospital = [];
        vm.otherPartyCounsel = [];
        vm.otherPartyMediator = [];
        vm.plaintiffAttorney = [];
        vm.insuranceInsured = [];
        vm.mediationEvents = [];
        vm.phoneConferenceEvents = [];
        vm.FacilitationEvents = [];
        vm.settlementConferenceEvents = [];
        vm.pretrialConferenceEvents = [];
        vm.noFaultInsuranceList = [];
        vm.UIUIMInsuranceList = [];
        vm.defendants_dropdown1 = [];
        vm.defendants_dropdown2 = [];
        vm.uniqDefendantAttorneyids1 = [];
        vm.OnlyPartnerList = [];
        vm.paralegalAndAttorneyList = [];
        vm.expenseIds = [];
        vm.liensIds = [];
        vm.action = [{ id: "is" }, { id: "is not" }];
        vm.option1 = [{ id: "Yes" }, { id: "No" }];
        vm.option2 = [{ id: "Owner" }, { id: "Owner/Operator" }];
        vm.checkbox = [{ id: "X" }, { id: "-" }];
        vm.acceptance = [{ id: "Acceptance" }, { id: "Rejection" }];
        vm.physiciansFromMedicalInfoAndOtherParties = [];
        vm.insuranceUM = [];
        vm.insurancePIP = [];
        vm.insuranceHealth = [];
        vm.settlementPIPInsProvider = [];
        vm.settlementUIMInsProvider = [];
        vm.onlyStaffs = []; //US#11370 - staff dropdown
        /*default values for flags used to show messages if no relative data is there*/
        vm.insuranceMsg = false; //default InsuranceMsg flag
        vm.serviceProviderMsg = false; //default serviceproviderMsg flag
        vm.newServiceProviderMsg = false;
        vm.physicianMsg = false;
        vm.defAttorneyMsg = false;
        vm.plaintiffInsMsg = false;
        vm.plaintiffDefendantAdjuterMsg = false;
        vm.plaintiffDefendantInsuMsg = false;
        vm.hospitalMsg = false;
        vm.employerMsg = false;
        vm.leadAttorneyMsg = false;
        vm.paralegalMsg = false;
        vm.secondLeadAttorneyMsg = false;
        vm.secondParalegalMsg = false;
        vm.insuranceNoFaultMsg = false;
        vm.noContactsMsg = true;
        vm.noAllContactsMsg = true;
        vm.secDefendantMsg = false;
        vm.priDefendantMsg = false;
        vm.primarydefendantMsg = false;
        vm.physicianMsg = false;
        vm.plaintiffOrDefendantCall = false;
        vm.locationOfAccident = "Blank";
        vm.plaintiffDefendantAddress = "Blank";
        vm.plaintiffs_defendants = undefined;
        vm.TemplateModelInfo.newmattercontactid = undefined;
        vm.matterContact = (vm.TemplateModelInfo.typeId == 20) ? true : false;
        vm.template_config = [];
        vm.allAttorneysList = [];
        vm.lawSecretoryTitle = [];
        vm.insured_party = [];
        vm.userInfo = [];
        vm.mediatorContacts = [];
        vm.setPath = setPath;
        vm.TemplateModelInfo.isPath = 1; //set model value of premises
        vm.videoRecordingOf = [{ id: 1, text: "SIDEWALK", }, { id: 2, text: "PATHWAY", }, { id: 3, text: "FRONT STEP", }]
        vm.TemplateModelInfo.meridianSelection = "AM";
        vm.timePicker = timePicker;
        vm.hrs = [];
        vm.mins = [];
        vm.secs = [];
        vm.selectionTimeList = [
            { label: "AM", value: "AM" },
            { label: "PM", value: "PM" }
        ];

        //func to set model value of premises on user selection
        function setPath(info) {
            vm.TemplateModelInfo.isPath = info.id;
        }

        function validateSelection(option) {
            var isLeadAttorneySelected = (vm.isLeadAttorneyRequired && utils.isEmptyVal(vm.TemplateModelInfo.leadattorneyid)) ? true : false;
            var isParalegalSelected = (vm.isParalegalRequired && utils.isEmptyVal(vm.TemplateModelInfo.paralegalid)) ? true : false;
            var isShowSocialNumSelected = (vm.isShowSocialNum && utils.isEmptyVal(vm.TemplateModelInfo.showsocialsecuritynumber)) ? true : false;
            switch (option) {
                case 'Plaintiff':
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || isLeadAttorneySelected || (vm.TemplateModelInfo.typeId == 23) ? (utils.isEmptyVal(vm.TemplateModelInfo.insuranceproviderid) || utils.isEmptyVal(vm.TemplateModelInfo.leadattorneyid)) : '' || (vm.TemplateModelInfo.typeId == 24) ? isParalegalSelected : '');
                    break;
                case 'Defendant':
                    return (vm.TemplateModelInfo.typeId == 3 || vm.TemplateModelInfo.typeId == 4) ? utils.isEmptyVal(vm.TemplateModelInfo.defendants) : (utils.isEmptyVal(vm.TemplateModelInfo.defendants) || isLeadAttorneySelected || utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;
                case 'PlaintiffDefendant':
                    return ((vm.TemplateModelInfo.typeId == 17 || vm.TemplateModelInfo.typeId == 25 || vm.TemplateModelInfo.typeId == 26) ?
                        (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.insuranceproviderid) || isLeadAttorneySelected) :
                        (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) ||
                            utils.isEmptyVal(vm.TemplateModelInfo.defendants) ||
                            utils.isEmptyVal(vm.TemplateModelInfo.insuranceproviderid)));
                    break;
                case 'PlaintiffService':
                    return ((vm.TemplateModelInfo.typeId == 20) ?
                        (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) ||
                            utils.isEmptyVal(vm.TemplateModelInfo.matterContactId) ||
                            utils.isEmptyVal(vm.TemplateModelInfo.insuranceproviderid) || isLeadAttorneySelected) :
                        (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.insuranceproviderid) || isLeadAttorneySelected || isParalegalSelected));
                case 'Attorney':
                    return utils.isEmptyVal(vm.TemplateModelInfo.attorneys);
                case 'DefendantAttorney':
                    return (utils.isEmptyVal(vm.TemplateModelInfo.insuranceproviderid) || utils.isEmptyVal(vm.TemplateModelInfo.attorneys));
                case 'PlaintiffEvents':
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.eventid));
                default:
                    return !(utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs) && utils.isNotEmptyVal(vm.TemplateModelInfo.insuranceproviderid) && isLeadAttorneySelected);
            }

        }



        /**
         * new template validation on generate template
         */
        vm.newValidateSelection = function (option) {
            switch (option) {
                case "F1_36":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_37":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_38":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_39":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_40":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.newinsuranceproviderid) || utils.isEmptyVal(vm.TemplateModelInfo.newmattercontactid));
                    break;

                case "F1_41":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.newinsuranceproviderid) || utils.isEmptyVal(vm.TemplateModelInfo.newmattercontactid));
                    break;

                case "F1_42":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_43":
                    return false;
                    //  return (utils.isEmptyVal(vm.TemplateModelInfo.defendants) || utils.isEmptyVal(vm.TemplateModelInfo.newinsuranceproviderid) || utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_44":
                    return false;
                    // return (utils.isEmptyVal(vm.TemplateModelInfo.defendants) || utils.isEmptyVal(vm.TemplateModelInfo.newinsuranceproviderid) || utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_45":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.primaryDefendantsAttorney));
                    break;

                case "F1_46":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.primaryDefendantsAttorney));
                    break;

                case "F1_47":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.defendants));
                    break;

                case "F1_49":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_48":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_50":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_51":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs));
                    break;

                case "F1_52":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.serviceproviderid));
                    break;

                case "F1_53":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.serviceproviderid));
                    break;

                case "F1_54":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.serviceproviderid));
                    break;

                case "F1_55":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.serviceproviderid));
                    break;

                case "F1_56":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.serviceproviderid));
                    break;

                case "F1_58":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.newmattercontactid));
                    break;

                case "F1_57":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.plaintiffs) || utils.isEmptyVal(vm.TemplateModelInfo.newmattercontactid));
                    break;
                case "F1143_129":
                case "F1153_33":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.generalLigitation));
                    break;
                case "F1143_130":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.MotionActionText));
                    break;
                case "F1166_12":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.otherDriverName) || utils.isEmptyVal(vm.TemplateModelInfo.amountInNumbers));
                    break;
                case "F1166_13":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.chargeNumber) || utils.isEmptyVal(vm.TemplateModelInfo.amountInNumbers) || utils.isEmptyVal(vm.TemplateModelInfo.checkName) || utils.isEmptyVal(vm.TemplateModelInfo.summonNumber));
                    break;
                case "F1143_132":
                    if ((utils.isEmptyVal(vm.TemplateModelInfo.commercialRetainer)) || ($("#customDateError").css('display') == "block")) {
                        return true;
                    }
                    break;
                case "F1164_21":
                    return (utils.isEmptyVal(vm.TemplateModelInfo.vehicleInfo) || utils.isEmptyVal(vm.TemplateModelInfo.vinNumber));
                    break;
                case "F1_105":
                case "F1127_3":
                case "F1153_4":
                case "F1153_5":
                case "F1153_7":
                case "F1153_11":
                case "F1143_128":
                case "F1153_9":
                case "F1153_10":
                case "F1153_12":
                case "F1153_14":
                case "F1153_22":
                case "F1153_23":
                case "F1153_26":
                case "F1214_1":
                case "F1153_33":
                case "F1153_34":
                case "F1153_67":
                case "F1153_64":
                    return ($("#customDateError").css('display') == "block") ? true : false;
                    break;
                case "F1153_46":
                    if ($("#customDateError1").css('display') == "block" || $("#customDateError4").css('display') == "block" ||
                        $("#customDateError2").css('display') == "block" || $("#customDateError3").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_48":
                    if (($("#dateOfDeathDateError").css('display') == "block") || ($("#indexNumberFiledDateDivError").css('display') == "block")) {
                        return true;
                    }
                    break;
                case "F1153_49":
                    if (($("#reportDateDivError").css('display') == "block") || ($("#dateOfMRIDivError").css('display') == "block")) {
                        return true;
                    }
                    break;
                case "F1153_52":
                case "F1153_53":
                    if (($("#dateOfMRIDivError").css('display') == "block")) {
                        return true;
                    }
                    break;
                case "F1153_66":
                    if (($("#dateOfMRIDivError").css('display') == "block" || utils.isEmptyVal(vm.TemplateModelInfo.dateOfMRI) || utils.isEmptyVal(vm.TemplateModelInfo.defendantFileNumber) || utils.isEmptyVal(vm.TemplateModelInfo.bodyPart) || utils.isEmptyVal(vm.TemplateModelInfo.mriResult) || utils.isEmptyVal(vm.TemplateModelInfo.mriNumber))) {
                        return true;
                    }
                    break;
                case "F1153_57":
                case "F1153_83":
                    if ($("#bigappleDateivError").css('display') == "block" || $("#heldDateDivError").css('display') == "block" ||
                        $("#nocDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_85":
                    if ($("#heldDateDivError").css('display') == "block") {
                        return true;
                    }
                case "F1153_56":
                    if ($("#heldDateDivError").css('display') == "block" || $("#nocDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1143_133":
                    if ($("#dateOfFilingError").css('display') == "block" || $("#dateOfMarriageError").css('display') == "block" || $("#dateEmployedFromError").css('display') == "block" || $("#dateEmployedToError").css('display') == "block" || $("#dateEmployedFromError2").css('display') == "block" || $("#dateEmployedToError2").css('display') == "block" || $("#dateEmployedFromError3").css('display') == "block" || $("#dateEmployedToError3").css('display') == "block")
                        return true;
                    else if (moment.utc(vm.TemplateModelInfo.dateEmployedFrom).unix() > moment.utc(vm.TemplateModelInfo.dateEmployedTo).unix()) {
                        return true;
                    } else if (moment.utc(vm.TemplateModelInfo.dateEmployedFrom2).unix() > moment.utc(vm.TemplateModelInfo.dateEmployedTo2).unix()) {
                        return true;
                    } else if (moment.utc(vm.TemplateModelInfo.dateEmployedFrom3).unix() > moment.utc(vm.TemplateModelInfo.dateEmployedTo3).unix()) {
                        return true;
                    }
                    break;
                case "F1153_62":
                    if (($("#hearingDateDivError").css('display') == "block")) {
                        return true;
                    }
                    break;
                case "F1153_88":
                case "F1153_91":
                    if ($("#summonServeDateDateDivError").css('display') == "block" || $("#issueJoinedDateDateDivError").css('display') == "block" || $("#serviceComplatedDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_89":
                    if ($("#IndexDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1164_30":
                case "F1153_1338":
                case "F1153_1345":
                case "F1508_3":
                case "F1135_1292":
                case "F1447_52":
                    if ($("#custom_dateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_93":
                case "F1164_1051":
                case "F1164_1073":
                case "F1164_1074":
                    if ($("#dateOfMRIDateDivError").css('display') == "block" || $("#reportDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_4":
                case "F1164_39":
                case "F1164_40":
                case "F1164_1002":
                case "F1164_1214":
                    if ($("#hearingDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_5":
                case "F1164_1031":
                case "F1479_12":
                    if ($("#depositionDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_6":
                case "F1210_9":
                    if ($("#ebt_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_10":
                    if ($("#ebt_Date_TakenDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_11":
                    if ($("#ebt_Date_EnclosureDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1135_132":
                    if ($("#claimDeny_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;

                case "F1210_13":
                case "F1164_1029":
                case "F1164_1046":
                    if ($("#conferenceHeldDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_14":
                    if ($("#depositionHeldDateDateDivError").css('display') == "block" || $("#depositionTransEnclosureDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1007_4":
                case "F1007_3":
                case "F1164_34":
                case "F1164_42":
                case "F1164_43":
                case "F1164_44":
                case "F1164_1033":
                case "F1164_1034":
                case "F1164_1062":
                case "F1164_1071":
                case "F1164_1123":
                    if ($("#service_DateDateDivError").css('display') == "block" || $("#bill_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_21":
                    if ($("#request_DateDateDivError").css('display') == "block" || $("#check_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_23":
                    if ($("#authorization_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_24":
                    if ($("#willDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1210_27":
                case "F1153_118":
                case "F1153_115":
                case "F1164_1045":
                case "F1164_1050":
                case "F1164_1056":
                    if ($("#dateOfLettersDateDivError").css('display') == "block" || $("#accidentDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1164_1058":
                case "F1447_25":
                    if ($("#dateOfLettersDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1447_30":
                    if ($("#bill_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_109":
                    if ($("#denial_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_102":
                    if ($("#trialDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1542_6":
                    if ($("#paymentToClientDateDateDivError").css('display') == "block" || $("#paymentByClientDateDateDivError").css('display') == "block" || $("#bondAmountDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1164_1028":
                    if ($("#from_discovery_dateDateDivError").css('display') == "block" || $("#to_discovery_dateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1164_1041":
                case "F1164_1042":
                case "F1447_24":
                    if ($("#Interrogatories_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1164_1075":
                case "F1427_43":
                    if ($("#documentDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1164_1109":
                    if ($("#medicalRecordDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1447_48":
                    if ($("#stipulationDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1447_56":
                    if ($("#stipulationDateDateDivError").css('display') == "block" || $("#paymentByClientDateDateDivError").css('display') == "block" || $("#issueJoinedDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_1369":
                case "F1153_1370":
                case "F1153_1395":
                case "F1153_1393":
                case "F1153_1394":
                    if ($("#paymentToClientDateDateDivError").css('display') == "block" || $("#stipulationDateDateDivError").css('display') == "block" || $("#summonServeDateDateDivError").css('display') == "block" || $("#paymentByClientDateDateDivError").css('display') == "block" || $("#orderDateDateDivError").css('display') == "block" || $("#noticeProduceDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_1344":
                case "F1153_1343":
                    if ($("#summonServeDateDateDivError").css('display') == "block" || $("#serviceComplatedDateDateDivError").css('display') == "block" || $("#issueJoinedDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1153_1340":
                    if ($("#IndexDateDateDivError").css('display') == "block" || $("#serviceComplatedDateDateDivError").css('display') == "block" || $("#reportDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1256_33":
                    if ($("#summonServeDateDateDivError").css('display') == "block" || $("#stipulationDateDateDivError").css('display') == "block" || $("#paymentByClientDateDateDivError").css('display') == "block" || $("#paymentToClientDateDateDivError").css('display') == "block" || $("#issueJoinedDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1256_44":
                    if ($("#conferenceHeldDateDateDivError").css('display') == "block" || $("#orderDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1427_60":
                    if ($("#expertDateDatediverror").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1520_44":
                    if ($("#proceedingDateDatediverror").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1256_45":
                    if ($("#amendmentsDateDateDivError").css('display') == "block" || $("#orderDateDateDivError").css('display') == "block" || $("#thirdPartyDateDateDivError").css('display') == "block" || $("#plaintiffWitnessDateDateDivError").css('display') == "block" || $("#expertDateDateDivError").css('display') == "block" || $("#exhibitsDateDateDivError").css('display') == "block" || $("#defendantWitnessDateDateDivError").css('display') == "block" || $("#defendantExhibitsDateDateDivError").css('display') == "block" || $("#defendantExpertDateDateDivError").css('display') == "block" || $("#discoveryComplpetedDateDateDivError").css('display') == "block" || $("#discoveryPropoundDateDateDivError").css('display') == "block" || $("#allDilatoryDateDateDivError").css('display') == "block" || $("#allDispositiveMotionDateDateDivError").css('display') == "block" || $("#allDaubertDateDateDivError").css('display') == "block" || $("#daubertMotionHeardDateDateDivError").css('display') == "block" || $("#juryChargeDateDateDivError").css('display') == "block" || $("#motionLimineDateDateDivError").css('display') == "block" || $("#motionLimineHeardDateDateDivError").css('display') == "block" || $("#bondAmountDateDateDivError").css('display') == "block" || $("#trialDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1118_35":
                case "F1118_36":
                case "F1118_41":
                    if ($("#hospital_admitted_dateDateDivError").css('display') == "block" || $("#treatment_admitted_dateDateDivError").css('display') == "block" || $("#Interrogatories_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1423_8":
                    if ($("#treatment_admitted_dateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1427_20":
                    if ($("#orderDateDateDivError").css('display') == "block" || $("#treatment_admitted_dateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1238_8":
                    if ($("#summonServeDateDateDivError").css('display') == "block" || $("#orderDateDateDivError").css('display') == "block" || $("#bill_DateDateDivError").css('display') == "block" || $("#documentDateDateDivError").css('display') == "block" || $("#bondAmountDateDateDivError").css('display') == "block" || $("#medicalRecordDateDateDivError").css('display') == "block" || $("#juryChargeDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1447_20":
                    if ($("#trialDateDateDivError").css('display') == "block" || $("#bondAmountDateDateDivError").css('display') == "block") {
                        return true;
                    }
                case "F1447_49":
                case "F1447_50":
                    if ($("#denial_DateDateDivError").css('display') == "block" || $("#summonServeDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1238_9":
                    if ($("#depositionDateDateDivError").css('display') == "block" || $("#ebt_DateDateDivError").css('display') == "block" || $("#claimDeny_DateDateDivError").css('display') == "block" || $("#service_DateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1427_69":
                case "F1427_70":
                case "F1427_71":
                case "F1427_72":
                case "F1427_73":
                case "F1427_74":
                    if ($("#summonServeDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
                case "F1479_23":
                    if ($("#noticeProduceDateDateDivError").css('display') == "block" || $("#paymentByClientDateDateDivError").css('display') == "block" || $("#paymentToClientDateDateDivError").css('display') == "block") {
                        return true;
                    }
                    break;
            }
        }

        /**
         * Date picker setting
         */
        vm.openCalender = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }

        /*function to check whether the plaintiff selection needed on the basis of template type*/
        function showPlaintiffCheckboxes() {
            return (vm.option == 'Plaintiff' || vm.option == 'PlaintiffDefendant' || vm.option == 'PlaintiffService' || vm.option == 'PlaintiffEvents' || vm.option == 'Defendant' && vm.TemplateModelInfo.typeId != 3 && vm.TemplateModelInfo.typeId != 4);
        }
        /*function to check whether the defendant selection needed or not on the basis of template type & type Id*/
        function showDefendantCheckBoxes() {
            return ((vm.option == 'Defendant' || vm.option == 'PlaintiffDefendant') && (vm.TemplateModelInfo.typeId != 17 && vm.TemplateModelInfo.typeId != 25 && vm.TemplateModelInfo.typeId != 26));
        }

        /*function to check whether the lead attorney selection needed or not on the basis of template type & type Id*/
        function showLeadAttorneyDrodown() {
            var typeId = vm.TemplateModelInfo.typeId;
            return (vm.templateType == "default" && (typeId != 20 && typeId != 28 &&
                typeId != 26 && typeId != 16 && typeId != 9)) || (vm.templateType == "firm" && (typeId == 128 || typeId == 129 || typeId == 130));
        }

        /*function to check whether the paralegal selection needed or not on the basis of template type & type Id*/
        function showParalegalDrodown() {
            var typeId = vm.TemplateModelInfo.typeId;
            return (typeId == 16 || typeId == 24 || typeId == 131) ? true : '';
        }

        /*function to check whether the associated insurance/service provider 
          or defendant attorney needed or not on the basis of template type*/
        function showProviderDropdown() {
            return (vm.option != 'Defendant' && vm.option != 'Attorney' && vm.option != 'PlaintiffEvents' && vm.TemplateModelInfo.typeId != 18 && vm.TemplateModelInfo.typeId != 27 && vm.TemplateModelInfo.typeId != 24 && vm.TemplateModelInfo.typeId != 5 && vm.TemplateModelInfo.typeId != 1 && vm.TemplateModelInfo.typeId != 2 && vm.TemplateModelInfo.typeId != 0);
        }

        /*function to close pop up*/
        function closePopup() {
            $modalInstance.dismiss();
        }

        function setTemplateConfig() {
            var temp_code = '';
            _.forEach(template_config, function (tempKey) {
                if (tempKey.template_code == vm.TemplateModelInfo.template_code) {
                    vm.configure_template = tempKey;
                    temp_code = tempKey.template_code;
                    return;
                }
            });
            if (vm.configure_template != undefined) {
                var display_fields = [];
                display_fields.push(Object.keys(vm.configure_template.display_prop.display_fields));
                if (temp_code == vm.TemplateModelInfo.template_code) {
                    if (display_fields[0].indexOf('plaintiff') != -1 || display_fields[0].indexOf('plaintiff_API_CALL') != -1 || display_fields[0].indexOf('plaintiffs') != -1 || display_fields[0].indexOf('plaintiffs1') != -1 || display_fields[0].indexOf('plaintiffs2') != -1 || display_fields[0].indexOf('plaintiffs3') != -1 || display_fields[0].indexOf('matter_contact_multi_plaintiff') != -1 || display_fields[0].indexOf('plaintiff_multi') != -1 || display_fields[0].indexOf('plaintiff_onChange') != -1 || display_fields[0].indexOf('estateAdmins') != -1 || display_fields[0].indexOf('deceased_plaintiffs') != -1 || display_fields[0].indexOf('plaintiffs_guardian') != -1 || display_fields[0].indexOf('plaintiff_onChange_primary') != -1 || display_fields[0].indexOf('plaintiff_onChange_secondary') != -1 || display_fields[0].indexOf('plaintiff_onChange_Insurance') != -1) {
                        getPlaintiffs();
                    }
                    if (display_fields[0].indexOf('plaintiffs_infant') != -1) {
                        getPlaintiffs();
                    }
                    if (display_fields[0].indexOf('plaintiffNoFault') != -1) {
                        getPlaintiffs('No-Fault');
                    }
                    if (display_fields[0].indexOf('matter_contact') != -1 || display_fields[0].indexOf('matter_contact_all') || display_fields[0].indexOf('matter_contact_all1') || display_fields[0].indexOf('matter_contact_all2') || display_fields[0].indexOf('insurance_provider_forDefault') != -1 || display_fields[0].indexOf('insurance_provider_forDef') || display_fields[0].indexOf('hospital_default') || display_fields[0].indexOf('insurance_provider_forLetter')) {
                        getMatterAllContactList();
                    }
                    if (display_fields[0].indexOf('matter_contact') != -1 || display_fields[0].indexOf('matter_contact_multi') != -1 || display_fields[0].indexOf('otherPartyAPICall') != -1 || display_fields[0].indexOf('spouse') != -1) {
                        otherPartyContact();
                    }
                    if (display_fields[0].indexOf('insurance_provider') != -1 || display_fields[0].indexOf('insurance') != -1 || display_fields[0].indexOf('insurance1') != -1 || display_fields[0].indexOf('insurance2') != -1 || display_fields[0].indexOf('insurance_claim_number') != -1 || display_fields[0].indexOf('plaintiff_isurance') != -1 || display_fields[0].indexOf('workersCompensation') != -1 || display_fields[0].indexOf('insurance_BI') != -1 || display_fields[0].indexOf('insurance_UM') != -1 || display_fields[0].indexOf('insurance_property') != -1 || display_fields[0].indexOf('insurance_adjustor') != -1 || display_fields[0].indexOf('insurance_provider_defendant1') != -1 || display_fields[0].indexOf('insurance_APIcallonly') != -1) {
                        getInsuranceContacts();
                    }
                    if (display_fields[0].indexOf('insurance_provider_plantiff') != -1 || display_fields[0].indexOf('insurance_provider_defendant') != -1 || display_fields[0].indexOf('insurance_adjstor_insured') != -1 || display_fields[0].indexOf('getinsurance_nofault') != -1 || display_fields[0].indexOf('insurance_allParties') != -1 || display_fields[0].indexOf('insurance_adjstor_claimnum') != -1 || display_fields[0].indexOf('insurance_adjstor_insured1') != -1 || display_fields[0].indexOf('insurance_adjstor_insured2') != -1 || display_fields[0].indexOf('insurance_adjstor_insured3') != -1 || display_fields[0].indexOf('insurance_adjstor_insured4') != -1 || display_fields[0].indexOf('insurance_adjstor_insured5') != -1 || display_fields[0].indexOf('insured_party_only') != -1 || display_fields[0].indexOf('def_insured_party') != -1 || display_fields[0].indexOf('only_InsuranceAdjustor') != -1 || display_fields[0].indexOf('only_InsuranceProvider') != -1 || display_fields[0].indexOf('only_InsuranceProvider1') != -1 || display_fields[0].indexOf('defendantBI_InsuranceProvider1') != -1 || display_fields[0].indexOf('UIUIM_InsuranceProvider1') != -1) {
                        getInsuranceContacts();
                    }
                    if (display_fields[0].indexOf('insured_party') != -1) {
                        insuredParty();
                    }
                    if (display_fields[0].indexOf('user_in_firm') != -1) {
                        getUsersInFirm();
                    }
                    if (display_fields[0].indexOf('paralegal') != -1 || display_fields[0].indexOf('paralegal_attorney') != -1 || display_fields[0].indexOf('attorney') != -1 || display_fields[0].indexOf('paralegal_only') != -1 || display_fields[0].indexOf('attorneyId') != -1 || display_fields[0].indexOf('referredBy') != -1 || display_fields[0].indexOf('secondAttorney') != -1 || display_fields[0].indexOf('secondparalegal') != -1 || display_fields[0].indexOf('smpAttorney') != -1 || display_fields[0].indexOf('assign_user') != -1 || display_fields[0].indexOf('assign_user1') != -1 || display_fields[0].indexOf('staffs_only') != -1 || display_fields[0].indexOf('default_user') != -1 || display_fields[0].indexOf('lead_attorney') != -1) {
                        getAttorneys();
                    }
                    if (display_fields[0].indexOf('defendant') != -1 || display_fields[0].indexOf('defendants') != -1 || display_fields[0].indexOf('defendants1') != -1 || display_fields[0].indexOf('defendants2') != -1 || display_fields[0].indexOf('defendants3') != -1 || display_fields[0].indexOf('matter_contact_multi_defendent') != -1 || display_fields[0].indexOf('defendants_single') != -1 || display_fields[0].indexOf('getDefendantsAPICall') != -1 || display_fields[0].indexOf('Vehicle_Operator') != -1 || display_fields[0].indexOf('Vehicle_Owner') != -1) {
                        getDefendants();
                    }
                    if (display_fields[0].indexOf('primary_defendant_attorney') != -1 || display_fields[0].indexOf('secondary_defendant_attorney') != -1 || display_fields[0].indexOf('defendant_Law_Firm') != -1 || display_fields[0].indexOf('defendant_Law_Firm1') != -1 || display_fields[0].indexOf('defendant_Law_Firm2') != -1 || display_fields[0].indexOf('defendant_Law_Firm3') != -1 || display_fields[0].indexOf('defendant_Law_Firm4') != -1 || display_fields[0].indexOf('defendant_Law_Firm5') != -1 || display_fields[0].indexOf('defendantAttorney_API_Call') != -1 || display_fields[0].indexOf('defendantLaw_Firm') != -1 || display_fields[0].indexOf('otherparty_mediator') != -1) {
                        getDefendantAttorney();
                    }
                    if (display_fields[0].indexOf('ebt_event') != -1 || display_fields[0].indexOf('mediation_event') != -1 || display_fields[0].indexOf('ime_event') != -1 || display_fields[0].indexOf('ime_event2') != -1 || display_fields[0].indexOf('all_event') != -1 || display_fields[0].indexOf('trial_event') != -1 || display_fields[0].indexOf('arbitrationEvent') != -1 || display_fields[0].indexOf('deposition_event') != -1 || display_fields[0].indexOf('eouevent') != -1 || display_fields[0].indexOf('otherEvent') != -1 || display_fields[0].indexOf('noticeClaimEvent') != -1 || display_fields[0].indexOf('sol_event') != -1 || display_fields[0].indexOf('discovery_date') != -1 || display_fields[0].indexOf('pre_trial_event') != -1) {
                        getEBTEvents();
                    }
                    if (display_fields[0].indexOf('medical_provider') != -1 || display_fields[0].indexOf('physicianProvider') != -1 || display_fields[0].indexOf('medical_date_service') != -1 || display_fields[0].indexOf('hospital_provider_medicalInfo') != -1 || display_fields[0].indexOf('physician_medicalInfo') != -1 || display_fields[0].indexOf('getMedicalInfoAPICallOnly') != -1 || display_fields[0].indexOf('physician_plaintiff') != -1 || display_fields[0].indexOf('medical_provider_physician') != -1 || display_fields[0].indexOf('multiple_medical_provider') != -1 || display_fields[0].indexOf('medicalInfo_dates') != -1) {
                        getMedicalInfo();
                    }

                    if (display_fields[0].indexOf('medical_provider_java') != -1 || display_fields[0].indexOf('physicianProvider_Java') != -1) {
                        getMedicalInfo_Java();
                    }

                    if (display_fields[0].indexOf('medical_bill_provider') != -1 || display_fields[0].indexOf('medical_bill_dates') != -1 || display_fields[0].indexOf('medical_bill_api_call') != -1) {
                        getMedicalBillInfo();
                    }
                    if (display_fields[0].indexOf('expense_provider') != -1) {
                        getExpenseInfo();
                    }
                    if (display_fields[0].indexOf('plaintiffs_defendants') != -1 || display_fields[0].indexOf('tenant') != -1 || display_fields[0].indexOf('deceased_name') != -1) {
                        if (vm.configure_template.display_prop.display_fields.plaintiffs_defendants_seprate_call) {
                            getPlaintiffs();
                            getDefendants();
                        }
                        vm.plaintiffOrDefendantCall = true;
                        getAttorneys();
                    }
                    if (display_fields[0].indexOf('getAllParties') != -1 || display_fields[0].indexOf('expert_witness') != -1 || display_fields[0].indexOf('witness') != -1) {
                        getDefendantAttorney();
                    }
                    if (display_fields[0].indexOf('liens') != -1) {
                        getMatterLiens();
                    }
                    if (display_fields[0].indexOf('document_caption') != -1 || display_fields[0].indexOf('document_caption1') != -1 || display_fields[0].indexOf('document_caption2') != -1 || display_fields[0].indexOf('document_caption3') != -1 || display_fields[0].indexOf('document_caption4') != -1 || display_fields[0].indexOf('document_caption5') != -1 || display_fields[0].indexOf('document_caption6') != -1 || display_fields[0].indexOf('document_caption7') != -1 || display_fields[0].indexOf('document_caption8') != -1 || display_fields[0].indexOf('document_caption9') != -1) {
                        getCaptionCategoryDocuments();
                    }

                    if (display_fields[0].indexOf('physician') != -1 || display_fields[0].indexOf('service_provider') != -1) {
                        getServiceProviders();
                    }

                    if (display_fields[0].indexOf('medicalBillsAndInfo') != -1 || display_fields[0].indexOf('medicalBillsAndInfo1') != -1 || display_fields[0].indexOf('medicalBillsAndInfo2') != -1 || display_fields[0].indexOf('medicalBillsAndInfo3') != -1 || display_fields[0].indexOf('medicalBillsAndInfoAPICall') != -1 || display_fields[0].indexOf('medical_bill_and_info_provider') != -1) {
                        getMedicalInfoAndGetMedicalBillInfo();
                    }
                    if (display_fields[0].indexOf('law_secretory_title') != -1) {
                        getLawSecTitle();
                    }
                    if (display_fields[0].indexOf('timeOfAccident') != -1) {
                        timePicker();
                    }
                    if (display_fields[0].indexOf('workerCompAttorney') != -1 || display_fields[0].indexOf('otherparty_plaintiffAttorney') != -1 || display_fields[0].indexOf('custom_getOtherParties') != -1 || display_fields[0].indexOf('otherPartyPhysician') != -1 || display_fields[0].indexOf('otherPartyPhysicianSecondary') != -1 || display_fields[0].indexOf('expertWitnessOtherParties') != -1 || display_fields[0].indexOf('expertWitnessOtherParties1') != -1 || display_fields[0].indexOf('otherPartyHospital') != -1 || display_fields[0].indexOf('otherPartyCoCounsel') != -1) {
                        getOtherParties();
                    }
                    if (vm.configure_template.display_prop.display_fields.plaintiffs_defendants_seprate_call) {
                        getDefendants();
                    }
                    if (display_fields[0].indexOf('physicianForDefault') != -1) {
                        getMedicalInfoAndGetOtherParties();
                    }
                    if (display_fields[0].indexOf('physicianForJava') != -1) {
                        getMedicalInfo_JavaAndGetOtherParties();
                    }
                    if (display_fields[0].indexOf('settlement_plaintiff_recovery') != -1 || display_fields[0].indexOf('settlement_info') != -1) {
                        getSettlementPlaintiffRecovery();
                    }
                }
            }
        }

        (function () {

            // set template configuration 
            setTemplateConfig();
            // set auto template configuration 
            autoGenerateTemplateConfig();

            /*create scope variable for local controller access*/
            vm.templateType = vm.TemplateModelInfo.lexvia_template;
            /*set lable for associate party based on type id*/
            var typeId = vm.TemplateModelInfo.typeId;
            vm.otherPartyLable = (typeId == 16 || typeId == 21) ? "Select Physician" : (typeId == 22) ? "Select Hospital" : (typeId == 25 || typeId == 26) ? "Plaintiff Insurance Company" : (typeId == 16 || typeId == 20 || typeId == 28 || typeId == 8 || typeId == 9) ? 'Service Provider' : '';
            /*set flag isLeadAttorneyRequired*/
            vm.isLeadAttorneyRequired = showLeadAttorneyDrodown();
            /**set flag issecondleadattorneyRequired */
            vm.isSecondLeadAttorneyRequired = (typeId == 24) ? true : false;
            /*set flag isParalegalRequired*/
            vm.isParalegalRequired = showParalegalDrodown();
            /**set flag isSecondParalegalRequired */
            vm.isSecondParalegalRequired = (typeId == 24) ? true : false;
            /**set show social number */
            vm.isShowSocialNum = (vm.TemplateModelInfo.typeId == 28 || vm.TemplateModelInfo.typeId == 20 || vm.TemplateModelInfo.typeId == 9) ? true : false;
            /* to get required field on the basis of template type*/
            switch (vm.option) {
                case 'Plaintiff':
                    getPlaintiffs();
                    getInsuranceContacts();
                    break;
                case 'Defendant':
                    getDefendants();
                    getPlaintiffs();
                    break;
                case 'PlaintiffDefendant':
                    getPlaintiffs('No-Fault');
                    getDefendants();
                    getInsuranceContacts();
                    break;
                case 'PlaintiffService':
                    getPlaintiffs();
                    getServiceProviders();
                    getInsuranceContacts();
                    (vm.TemplateModelInfo.typeId == 20) ? getMatterContactList() : angular.noop();
                    break;
                case 'Attorney':
                    getAttorneys();
                    break;
                case 'DefendantAttorney':
                    getAttorneys();
                    getOtherParties();
                    break;
                case 'PlaintiffEvents':
                    getPlaintiffs();
                    getEBTEvents();
                    break;
                case 'PlaintiffDefendant':
                    getPlaintiffs('No-Fault');
                    getDefendants();
                    getInsuranceContacts();
                    break;
            }

        })();

        /**
         * get caption category document
         */
        function getCaptionCategoryDocuments() {
            var filters = {
                category: 28
            }
            documentsDataService.getDocumentsList_PHP(false, vm.TemplateModelInfo.matterId, '', '', '', '', '', filters)
                .then(function (success) {
                    vm.captionDocumentList = [];
                    _.forEach(success.data, function (currentItem, index) {
                        if (currentItem.documentname.substr(currentItem.documentname.lastIndexOf('.')) == '.docx') {
                            vm.captionDocumentList.push(currentItem);
                        }
                    });
                }, function (error) {
                    notificationService.error("Unable to load matter documents.");
                });
        }

        /*** data service functions *** /
         * get defendant attorney
         * */
        function getDefendantAttorney() {
            var defendantAttorneys = [];

            allPartiesDataService.getAllParties(vm.TemplateModelInfo.matterId)
                .then(function () {
                    defendantAttorneys = allPartiesDataService.getAllPartiesData().oparty.data;
                    vm.defendadefendantAttorneysIds = defendantAttorneys;

                    /* filter defedant attorney from other party list */
                    _.forEach(defendantAttorneys, function (defenKey) {
                        // _.forEach(defenKey.party_contact_id, function (partyContactKey) {
                        //     if (partyContactKey.party_role == "defendant") {

                        if (defenKey.contactrolename == "Defendant Attorney") {
                            vm.defendantAttorneyids.push(defenKey);

                        }
                        vm.uniqDefendantAttorneyids = _.uniq(vm.defendantAttorneyids, function (item, contactid) {
                            return item.contactid;
                        });
                        vm.uniqDefendantAttorneyids1 = _.uniq(vm.defendantAttorneyids, function (item, contactid) {
                            return item.contactid;
                        });
                        // }
                        // });
                        if (defenKey.contactrolename == "Expert Witness") {
                            _.forEach(defenKey.party_contact_id, function (item) {
                                if (item.party_role == "defendant") {
                                    _.forEach(defenKey.party_contact_id, function (item) {
                                        vm.expertWitnessOnlyDefendantDuplicateList.push(defenKey);
                                    });
                                    vm.expertWitnessOnlyDefendant = _.uniq(vm.expertWitnessOnlyDefendantDuplicateList, function (item, contactid) {
                                        return item.contactid;
                                    });
                                }
                            });
                        }

                        if (defenKey.contactrolename == "Witness") {
                            _.forEach(defenKey.party_contact_id, function (item) {
                                vm.allWitnessDuplicateList.push(defenKey);
                            });
                            vm.allWitness = _.uniq(vm.allWitnessDuplicateList, function (item, contactid) {
                                return item.contactid;
                            });
                        }
                        if (defenKey.contactrolename == "Hospital" || defenKey.contactrolename == "Physician") {
                            vm.physician_provider.push(defenKey);
                        }
                        if (defenKey.contactrolename == "Hospital") {
                            vm.hospital_provider.push(defenKey);
                        }
                        if (defenKey.contactrolename == "Mediator") {
                            defenKey.contact_name = defenKey.firstname + " " + defenKey.lastname;
                            vm.otherPartyMediator.push(defenKey);
                        }
                    });

                    /*remove previous selected value if no linked contacts found */

                    if (utils.isEmptyVal(vm.expertWitnessOnlyDefendant)) {
                        vm.TemplateModelInfo.expertWitnessOnlyDefendant = undefined;
                    } else {
                        templateHelper.setNamePropForDefendantAttorney(vm.expertWitnessOnlyDefendant);
                    }
                    if (utils.isEmptyVal(vm.allWitness)) {
                        vm.TemplateModelInfo.allWitness = undefined;
                    } else {
                        templateHelper.setNamePropForDefendantAttorney(vm.allWitness);
                    }

                    if (utils.isEmptyVal(vm.defendantAttorneyids)) {
                        vm.TemplateModelInfo.primaryDefendantsAttorney = undefined;
                    } else {
                        templateHelper.setNamePropForDefendantAttorney(vm.defendantAttorneyids);
                    }

                    /*remove previous selected value if no linked contacts found */
                    if (utils.isEmptyVal(vm.physician_provider)) {
                        vm.TemplateModelInfo.physicianproviderid = undefined;
                    } else {
                        templateHelper.setNamePropForDefendantAttorney(vm.physician_provider);
                    }

                    /*remove previous selected value if no linked contacts found */
                    if (utils.isEmptyVal(vm.hospital_provider)) {
                        vm.TemplateModelInfo.hospitalproviderid = undefined;
                    } else {
                        templateHelper.setNamePropForDefendantAttorney(vm.hospital_provider);
                    }

                    /*To update noPrimaryDefendantAttorney flag*/
                    vm.primarydefendantMsg = utils.isEmptyVal(vm.defendantAttorneyids) ? true : false;
                    vm.physicianMsg = utils.isEmptyVal(vm.physician_provider) ? true : false;
                });
        }

        /**
         * filter hospital provider basis of plaintff selection
         */
        function plaintiffHospitalProviderFilter(selectedPlaintiff) {
            vm.filterHospitalProviders = [];
            _.forEach(vm.hospital_provider, function (parentCurrentItem, index) {
                _.forEach(parentCurrentItem.party_contact_id, function (currentItem, index) {
                    if (currentItem.contactid == selectedPlaintiff.contactid.contactid) {
                        vm.filterHospitalProviders.push(parentCurrentItem);
                    }
                });
            });
            /*remove previous selected value if no linked contacts found */
            if (utils.isEmptyVal(vm.filterHospitalProviders)) {
                templateHelper.setNamePropForDefendantAttorney(vm.filterHospitalProviders);
            }
        }

        /**
         * set adjuster info based on insurance provider selection
         */
        function changeAdjusterInfo(insuValue) {

            vm.TemplateModelInfo.newadjusterproviderid = undefined;
            vm.filterAdjusterContacts = [];
            _.forEach(vm.insuranceContactList, function (current, index) {
                if (current.insuranceproviderid != undefined) {
                    if (current.insuranceproviderid.contactid == insuValue.contactid) {
                        vm.filterAdjusterContacts.push(current.adjusterid);

                    }
                }
            });
            vm.plaintiffDefendantAdjuterMsg = (utils.isEmptyVal(vm.filterAdjusterContacts)) ? true : false;
        }


        /**
         * set plaintiff or defendant address of selected.
         */
        function changePlaintiffDefendantAddress() {
            if (vm.TemplateModelInfo.plaintiffs_defendants != undefined) {
                var street = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs_defendants.contactid.street) ? vm.TemplateModelInfo.plaintiffs_defendants.contactid.street : '';
                var city = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs_defendants.contactid.city) ? vm.TemplateModelInfo.plaintiffs_defendants.contactid.city + ", " : '';
                var state = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs_defendants.contactid.state) ? vm.TemplateModelInfo.plaintiffs_defendants.contactid.state : '';
                var zipcode = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs_defendants.contactid.zipcode) ? vm.TemplateModelInfo.plaintiffs_defendants.contactid.zipcode : '';
                vm.TemplateModelInfo.pd_address = utils.isNotEmptyVal(street + " " + city + " " + state + " " + zipcode) ? street + " " + city + " " + state + " " + zipcode : undefined;
            } else {
                if (vm.TemplateModelInfo.plaintiffs != undefined) {
                    var selectedPlaintiffs = {};
                    (!Array.isArray(vm.TemplateModelInfo.plaintiffs)) ? selectedPlaintiffs = JSON.parse(vm.TemplateModelInfo.plaintiffs) : selectedPlaintiffs = vm.TemplateModelInfo.plaintiffs;
                    var street = utils.isNotEmptyVal(selectedPlaintiffs.contactid.street) ? selectedPlaintiffs.contactid.street : '';
                    var city = utils.isNotEmptyVal(selectedPlaintiffs.contactid.city) ? selectedPlaintiffs.contactid.city + ", " : '';
                    var state = utils.isNotEmptyVal(selectedPlaintiffs.contactid.state) ? selectedPlaintiffs.contactid.state : '';
                    var zipcode = utils.isNotEmptyVal(selectedPlaintiffs.contactid.zipcode) ? selectedPlaintiffs.contactid.zipcode : '';
                    vm.TemplateModelInfo.pd_address = utils.isNotEmptyVal(street + " " + city + " " + state + " " + zipcode) ? street + " " + city + " " + state + " " + zipcode : undefined;
                }
            }
        }

        function changePlaintiffDefendantAddress_1() {
            if (vm.TemplateModelInfo.plaintiffs_defendants != undefined) {
                var street = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs_defendants.contactid.street) ? vm.TemplateModelInfo.plaintiffs_defendants.contactid.street : '';
                var city = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs_defendants.contactid.city) ? vm.TemplateModelInfo.plaintiffs_defendants.contactid.city + ", " : '';
                var state = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs_defendants.contactid.state) ? vm.TemplateModelInfo.plaintiffs_defendants.contactid.state : '';
                var zipcode = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs_defendants.contactid.zipcode) ? vm.TemplateModelInfo.plaintiffs_defendants.contactid.zipcode : '';
                vm.TemplateModelInfo.pd_address = utils.isNotEmptyVal(street + " " + city + " " + state + " " + zipcode) ? street + " " + city + " " + state + " " + zipcode : undefined;
            } else {
                if (vm.TemplateModelInfo.plaintiffs != undefined) {
                    var selectedPlaintiffs = {};
                    var street = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs.contactid.street) ? vm.TemplateModelInfo.plaintiffs.contactid.street : '';
                    var city = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs.contactid.city) ? vm.TemplateModelInfo.plaintiffs.contactid.city + ", " : '';
                    var state = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs.contactid.state) ? vm.TemplateModelInfo.plaintiffs.contactid.state : '';
                    var zipcode = utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs.contactid.zipcode) ? vm.TemplateModelInfo.plaintiffs.contactid.zipcode : '';
                    vm.TemplateModelInfo.pd_address = utils.isNotEmptyVal(street + " " + city + " " + state + " " + zipcode) ? street + " " + city + " " + state + " " + zipcode : undefined;
                }
            }
        }
        /**
         * set plaintiff and defendant
         */
        function getPlaintiffOrDefendantUnion() {
            var plaintiffsCopy = [];
            var defendantsCopy = [];
            vm.plaintiffOrdefendant = [];
            plaintiffsCopy = angular.copy(vm.plaintiffs);
            defendantsCopy = angular.copy(vm.defendants);
            if (plaintiffsCopy.length > 0 || defendantsCopy.length > 0) {
                _.forEach(plaintiffsCopy, function (currentValue, index) {
                    currentValue.type = "Plaintiff";
                });
                _.forEach(defendantsCopy, function (currentValue, index) {
                    currentValue.type = "Defendant";
                });
                vm.plaintiffOrdefendant = _.union(plaintiffsCopy, defendantsCopy);
            }
        }

        /**
         * plaintiff and defendant grouping
         */
        function groupPlaintiffDefendant(contact) {
            if (utils.isNotEmptyVal(contact.contactid)) {
                _.forEach(vm.pd_Type, function (pd_Type) {
                    if (pd_Type == contact.type) {
                        vm.groupBy = pd_Type;
                    }
                })
                return vm.groupBy;
            }
        }

        /**
         * 
         * @param {service provider grouping } providers
         */
        function groupServiceProviders(providers) {
            if (utils.isNotEmptyVal(providers.contactid)) {
                _.forEach(vm.providerType, function (pd_Type) {
                    if (pd_Type == providers.type) {
                        vm.groupBy = pd_Type;
                    }
                });
                return vm.groupBy;
            }
        }

        /**
         * 
         * @param {attorney grouping } attorney
         */
        function groupAllAttorneys(attorney) {
            if (utils.isNotEmptyVal(attorney.uid)) {
                _.forEach(vm.attorneyTypes, function (at_Type) {
                    if (at_Type == attorney.type) {
                        vm.groupBy = at_Type;
                    }
                });
                return vm.groupBy;
            }
        }

        /* function to get plaintiffs*/
        function getPlaintiffs(args) {
            allPartiesDataService.getPlaintiffs(vm.TemplateModelInfo.matterId, args)
                .then(function (response) {
                    var data = response.data;
                    templateHelper.setNamePropForPlaintiffs(data);
                    vm.plaintiffs = data;
                    vm.plaintiff_dropdown = data;
                    vm.plaintiff_dropdown_minor = [];
                    vm.plaintiff_guardian = [];
                    vm.estateAdmins = [];
                    vm.deceased_plaintiff = [];

                    //Deceased plaintiff dropdown
                    _.forEach(vm.plaintiff_dropdown, function (item) {
                        if (item.isalive == 0) {
                            vm.deceased_plaintiff.push(item);
                        }
                    });

                    if (vm.TemplateModelInfo.template_code == "F1210_3" || vm.TemplateModelInfo.template_code == "F1210_1")
                        _.forEach(vm.plaintiff_dropdown, function (item) {
                            if (utils.isNotEmptyVal(item.estateadminid)) {
                                item.estateadminid.new_contact_name = item.estateadminid.firstname + ' ' + (utils.isNotEmptyVal(item.estateadminid.lastname) ? item.estateadminid.lastname : '');
                                vm.estateAdmins.push(item.estateadminid);
                            }
                        });

                    _.forEach(vm.plaintiff_dropdown, function (currentItem, index) {
                        if (currentItem.isinfant == 1) {
                            vm.plaintiff_dropdown_minor.push(currentItem);
                        }
                    });

                    _.forEach(vm.plaintiff_dropdown_minor, function (currentItem) {
                        if (currentItem.guardianid != null) {
                            if (angular.isDefined(currentItem.guardianid.contactid) && utils.isNotEmptyVal(currentItem.guardianid.contactid)) {
                                currentItem.guardianid.new_contact_name = currentItem.guardianid.firstname + ' ' + (utils.isNotEmptyVal(currentItem.guardianid.lastname) ? currentItem.guardianid.lastname : '');
                                vm.plaintiff_guardian.push(currentItem.guardianid);
                            }
                        }
                    })

                    if (vm.TemplateModelInfo.typeId == 23 || vm.TemplateModelInfo.typeId == 129 || vm.TemplateModelInfo.typeId == 173) {
                        vm.plaintiffs = _.filter(data, function (plaintiff) {
                            return utils.isNotEmptyVal(plaintiff.employerid);
                        });
                        vm.employerMsg = utils.isEmptyVal(vm.plaintiffs) ? true : false;
                    } else if (vm.TemplateModelInfo.typeId == 25 || vm.TemplateModelInfo.typeId == 26 || vm.TemplateModelInfo.typeId == 128 || vm.TemplateModelInfo.typeId == 172) {
                        vm.plaintiffs = _.filter(data, function (plaintiff) {
                            return (utils.isNotEmptyVal(plaintiff.insurance_details) && plaintiff.insurance_details.insurancetype == 'No-Fault');
                        });
                        vm.insuranceNoFaultMsg = utils.isEmptyVal(vm.plaintiffs) ? true : false;
                    } else {
                        /* noplantiffMsg flag update to shown when no plaintiffs present */
                        vm.plantiffMsg = utils.isEmptyVal(vm.plaintiffs) ? true : false;
                    }
                    (vm.plaintiffOrDefendantCall) ? getPlaintiffOrDefendantUnion() : '';
                    (vm.isLeadAttorneyRequired) ? getAttorneys() : angular.noop();
                    (vm.isParalegalRequired) ? getAttorneys() : angular.noop();

                }, function (error) {
                    notificationService.error('Unable to fetch plaintiffs');
                });
        }

        function getPlaintiffEmployers(plaintiffs) {
            var obj = JSON.parse(plaintiffs);
            vm.plaintiffEmployers = [];
            vm.TemplateModelInfo.plaintiffEmployerIds = undefined;

            if (utils.isNotEmptyVal(obj.employerid)) {
                _.forEach(obj.employerid, function (employer) {
                    employer.new_contact_name = employer.contactid.firstname + ' ' + (utils.isNotEmptyVal(employer.contactid.lastname) ? employer.contactid.lastname : '');
                    vm.plaintiffEmployers.push(employer);
                });
            }
        };

        function getPlaintiffEmployersNew(plaintiffs) {
            vm.plaintiffEmployers = [];
            vm.TemplateModelInfo.plaintiffEmployerIds = undefined;

            if (utils.isNotEmptyVal(plaintiffs.employerid)) {
                _.forEach(plaintiffs.employerid, function (employer) {
                    employer.new_contact_name = employer.contactid.firstname + ' ' + (utils.isNotEmptyVal(employer.contactid.lastname) ? employer.contactid.lastname : '');
                    vm.plaintiffEmployers.push(employer);
                });
            }
        }

        // Get Insurance Provider from Settlement Info
        function getPlaintiffInsuranceProviders(plaintiff) {
            vm.plaintiffInsuranceProviders = [];
            // By default getSettlement is called for (vm.settlementInfo)
            _.forEach(vm.settlementInfo, function (data) {
                if (data.plaintiff_id == plaintiff.plaintiffid) {
                    vm.plaintiffInsuranceProviders = data.settlement_negotiations;
                }
            });
            vm.plaintiffInsuranceProviders = utils.isNotEmptyVal(vm.plaintiffInsuranceProviders) ? vm.plaintiffInsuranceProviders : [];

            _.forEach(vm.plaintiffInsuranceProviders, function (data) {
                if (data.insurance_type == 'PIP') {
                    vm.settlementPIPInsProvider.push(data);
                } else if (data.insurance_type == 'UI/UIM') {
                    vm.settlementUIMInsProvider.push(data)
                }
            });
        }

        /* function to get defendants*/
        function getDefendants() {
            allPartiesDataService.getDefendants(vm.TemplateModelInfo.matterId)
                .then(function (response) {
                    if (response.data) {
                        var data = response.data;
                        templateHelper.setNamePropForDefendants(data);
                        vm.defendants = data;
                        vm.defendants_dropdown = data;
                        vm.defendants_dropdown1 = data;
                        vm.defendants_dropdown2 = data;
                        /* nodefendantMsg flag update to shown when no defendants present */
                        vm.defendantMsg = utils.isEmptyVal(vm.defendants) ? true : false;
                        (vm.plaintiffOrDefendantCall) ? getPlaintiffOrDefendantUnion() : '';
                        (vm.isLeadAttorneyRequired) ? getAttorneys() : angular.noop();

                    }

                });
        }

        /**
         * primary defendant change event to remove selected defendant from secondary defendant
         */
        vm.primaryDefendantChange = function () {
            vm.secDefendants = [];
            vm.TemplateModelInfo.secondaryDefendantsAttorney = [];
            _.filter(vm.defendantAttorneyids, function (defendantKey) {
                if (vm.TemplateModelInfo.primaryDefendantsAttorney != defendantKey.contactid) {
                    vm.secDefendants.push(defendantKey);
                }
            });
            vm.secDefendantMsg = utils.isEmptyVal(vm.secDefendants);
        }

        /* function to get attorneys*/
        function getAttorneys() {
            matterFactory.getMatterOverview(vm.TemplateModelInfo.matterId)
                .then(function (response) {
                    if (response.data) {
                        var data = response.data;
                        /**
                         * Set location of accident
                         */

                        var leadattorneyOnly = [];
                        _.forEach(data.assigned_users.attorney, function (key) {
                            key.islead == 2 || key.islead == 1 ? leadattorneyOnly.push(key) : '';
                        })

                        vm.TemplateModelInfo.locationOfAccident = data.matter_info[0].accident_location;

                        vm.referredById = utils.isNotEmptyVal(data.matter_info[0].referred_by) ? [parseInt(data.matter_info[0].referred_by)] : [0]; //Collect contact IDs of 'referred by' contacts

                        var attorneys = angular.copy(data.assigned_users.attorney);
                        var paralegalsOnly = angular.copy(data.assigned_users.paralegal);
                        templateHelper.setNamePropForAttorneys(attorneys);
                        vm.attorneys = attorneys;
                        var allAttorneys = angular.copy(data.assigned_users.partner);
                        var partnerOnly = angular.copy(data.assigned_users.partner);
                        vm.userInfo = angular.copy(data.matter_info);
                        var smpOnly = angular.copy(data.assigned_users.subscriber);
                        //US#11370 - staffs dropdown
                        var staffOnly = angular.copy(data.assigned_users.staffs);
                        vm.OnlyParalegalList = [];
                        vm.OnlyPartnerList = [];
                        vm.paralegalAndAttorneyList = [];
                        vm.paralegalListFilter = [];
                        vm.onlyStaffs = [];
                        vm.onlyLeadAtt = [];
                        vm.onlyLeadAtt1 = [];
                        _.forEach(smpOnly, function (currentItem, index) {
                            currentItem.contact_name = currentItem.name + " " + currentItem.lname;
                            currentItem.type = "Partner";
                        });
                        _.forEach(leadattorneyOnly, function (currentItem, index) {
                            currentItem.contact_name = currentItem.name + " " + currentItem.lname;
                            currentItem.type = "Lead Attorney";
                            vm.onlyLeadAtt.push(currentItem);
                            vm.onlyLeadAtt1.push(currentItem);
                        });
                        //US#11370 - staffs dropdown
                        _.forEach(staffOnly, function (currentItem, index) {
                            currentItem.contact_name = currentItem.name + " " + currentItem.lname;
                            currentItem.type = "Staff";
                            vm.onlyStaffs.push(currentItem);;
                        });
                        _.forEach(attorneys, function (currentItem, index) {
                            currentItem.contact_name = currentItem.name + " " + currentItem.lname;
                            currentItem.type = "Attorney";
                        });
                        _.forEach(partnerOnly, function (currentItem, index) {
                            currentItem.type = "Partner";
                            currentItem.contact_name = currentItem.name + " " + currentItem.lname;
                        });
                        _.forEach(partnerOnly, function (currentItem, index) {
                            currentItem.type = "Partner";
                            currentItem.contact_name = currentItem.name + " " + currentItem.lname;
                            vm.OnlyPartnerList.push(currentItem);

                        });
                        _.forEach(attorneys, function (currentItem, index) {
                            currentItem.contact_name = currentItem.name + " " + currentItem.lname;
                            currentItem.type = "Attorney";
                            vm.paralegalAndAttorneyList.push(currentItem);
                            vm.paralegalListFilter.push(currentItem);
                        });
                        _.forEach(paralegalsOnly, function (currentItem, index) {
                            currentItem.contact_name = currentItem.name + " " + currentItem.lname;
                            currentItem.type = "Paralegal";
                            vm.paralegalAndAttorneyList.push(currentItem);

                        });
                        // paralegal name set
                        var paralegals = angular.copy(data.assigned_users);
                        vm.paralegalList = setAllParalegalGroup(paralegals);
                        //to add SMP 
                        vm.allParalegalList = smpOnly.concat(vm.paralegalList);
                        vm.allParalegalList1 = smpOnly.concat(vm.paralegalList);
                        vm.OnlyParalegalList = paralegals.paralegal;
                        /*filter the lead attorneys to show in dropdown*/
                        vm.leadAttorneyList = attorneys.concat(data.assigned_users.partner);
                        /* all attorney list with SMP */

                        vm.allAttorneysList = attorneys.concat(partnerOnly).concat(smpOnly);
                        // templateHelper.setNamePropForAttorneys(vm.allAttorneysList);
                        /*create attribute as contact_name to show in dropdown for selection*/
                        _.forEach(vm.leadAttorneyList, function (attorney) {
                            attorney.contact_name = attorney.name;
                        });
                        /* set flags to show messages when no attorneys/lead attorneys present */
                        vm.AttorneyMsg = utils.isEmptyVal(vm.attorneys) ? true : false;
                        vm.leadAttorneyMsg = (utils.isEmptyVal(vm.leadAttorneyList)) ? true : false;
                        vm.paralegalMsg = (utils.isEmptyVal(vm.paralegalList)) ? true : false;
                    }
                });
        }


        // Function to get User in Firm
        function getUsersInFirm() {
            contactFactory.getUsersInFirm()
                .then(function (response) {
                    vm.allFirmUser = response.data;
                }, function (error) {
                    notificationService.error("Firm Users not loaded.");
                });
        }

        //Function to get Contact info Java API Call
        function getContactInfo_Java(contact) {
            var contact_id = utils.isNotEmptyVal(contact) ? contact.contactid.contact_id : '';
            var contacttype = 'Local';
            var url = globalContactConstants.RESTAPI.getContactById1 + contact_id + '?type=' + contacttype;

            $http({
                url: url,
                method: "GET",
                headers: {
                    "Authorization": "Bearer " + localStorage.getItem('accessToken'),
                    'Content-type': 'application/json'
                }
            }).then(function (response) {
                vm.plaintiffContactInfo = response.data;
            });
        }

        //Function to get Contact info Java API Call for Adjuster 
        function getContactInfo_Java_InsuranceAdj(contact) {
            var contact_id = utils.isNotEmptyVal(contact) ? contact.contactid : '';
            var contacttype = 'Local';
            var url = globalContactConstants.RESTAPI.getContactById1 + contact_id + '?type=' + contacttype;

            $http({
                url: url,
                method: "GET",
                headers: {
                    "Authorization": "Bearer " + localStorage.getItem('accessToken'),
                    'Content-type': 'application/json'
                }
            }).then(function (response) {
                vm.adjustorContactInfo = response.data;
                vm.insuranceProviderContactInfo = response.data;
            });
        }

        //Function to get Contact info Java API Call for Insurance Provider 
        function getContactInfo_Java_insuranceProvider(contact) {
            var contact_id = utils.isNotEmptyVal(contact) ? contact.contactid : '';
            var contacttype = 'Local';
            var url = globalContactConstants.RESTAPI.getContactById1 + contact_id + '?type=' + contacttype;

            $http({
                url: url,
                method: "GET",
                headers: {
                    "Authorization": "Bearer " + localStorage.getItem('accessToken'),
                    'Content-type': 'application/json'
                }
            }).then(function (response) {
                vm.insuranceProviderContactInfo = response.data;
            });
        }

        // Plaintiff Contact Number
        function getPlaintiffContactInfo(contact) {
            vm.selectedPlaintiffInfo = [];
            var obj = utils.isNotEmptyVal(contact.contactid) ? contact.contactid : '';

            if (obj.hasOwnProperty('phone_cell') && utils.isNotEmptyVal(obj.phone_cell)) {
                var cellNum = (obj.phone_cell).split(',');
                addPlaintiffContactObj('Cell', cellNum);
            }
            if (obj.hasOwnProperty('phone_work') && utils.isNotEmptyVal(obj.phone_work)) {
                var workNum = (obj.phone_work).split(',');
                addPlaintiffContactObj('Work', workNum);
            }
            if (obj.hasOwnProperty('phone_home') && utils.isNotEmptyVal(obj.phone_home)) {
                var homeNum = (obj.phone_home).split(',');
                addPlaintiffContactObj('Home', homeNum);
            }
        }

        function addPlaintiffContactObj(type, number) {
            if (type == 'Work') {
                _.forEach(number, function (data) {
                    var tempObj = {};
                    tempObj.type = 'Work';
                    tempObj.number = utils.isNotEmptyVal(data) ? data : undefined;
                    vm.selectedPlaintiffInfo.push(tempObj);
                })
            } else if (type == 'Home') {
                _.forEach(number, function (data) {
                    var tempObj = {};
                    tempObj.type = 'Home';
                    tempObj.number = utils.isNotEmptyVal(data) ? data : undefined;
                    vm.selectedPlaintiffInfo.push(tempObj);
                })
            } else if (type == 'Cell') {
                _.forEach(number, function (data) {
                    var tempObj = {};
                    tempObj.type = 'Cell';
                    tempObj.number = utils.isNotEmptyVal(data) ? data : undefined;
                    vm.selectedPlaintiffInfo.push(tempObj);
                })
            }
        }

        /**
         * load second attorney based on first Attorney
         */
        vm.changeAttorney = function () {
            vm.TemplateModelInfo.secondleadattorneyid = undefined;
            vm.secondLeadAttorneyList = [];
            _.forEach(vm.leadAttorneyList, function (value) {
                if (value.uid != vm.TemplateModelInfo.leadattorneyid) {
                    vm.secondLeadAttorneyList.push(value);
                }
            });
            vm.secondLeadAttorneyMsg = (utils.isEmptyVal(vm.secondLeadAttorneyList)) ? true : false;
        }

        /**
         * load second paralegal based on first paralegal
         */
        vm.changeParalegal = function () {
            vm.TemplateModelInfo.secondparalegalid = undefined;
            vm.secondParalegalList = [];
            _.forEach(vm.paralegalList, function (value) {
                if (value.uid != vm.TemplateModelInfo.paralegalid) {
                    vm.secondParalegalList.push(value);
                }
            });
            vm.secondParalegalMsg = (utils.isEmptyVal(vm.secondParalegalList)) ? true : false;
        }

        /**
         * get expense information
         */
        function getExpenseInfo() {
            matterDetailsService.getExpensesInfo_BEFORE_OFF_DRUPAL(vm.TemplateModelInfo.matterId, 'all')
                .then(function (response) {
                    vm.expenseProviders = response.data.expenses;
                    _.forEach(vm.expenseProviders, function (currentItem) {
                        vm.expenseIds.push(currentItem);
                    });
                }, function (error) {
                    notificationService.error("Expense not loaded.");
                });
        }

        /**
         * filter expense provider 
         */
        function filterExpenseProvider(plaintiff) {
            vm.TemplateModelInfo.expenseproviderid = undefined;
            var selectedPlaintiffs = [];
            vm.plaintiffExpenseProvider = [];
            (!Array.isArray(plaintiff)) ? selectedPlaintiffs.push(JSON.parse(plaintiff)) : selectedPlaintiffs = plaintiff;
            _.forEach(selectedPlaintiffs, function (party) {
                _.forEach(vm.expenseProviders, function (contact) {
                    if (contact.plaintiffid.contactid == party.contactid.contactid) {
                        vm.plaintiffExpenseProvider.push(contact);
                    }
                });
            });

            vm.expenseProviderMsg = (utils.isEmptyVal(vm.plaintiffExpenseProvider)) ? true : false;
        }

        function insuranceContactFetch(insuranceId) {
            var obj;
            _.forEach(vm.insuranceAdjusorInsured, function (currentItem) {
                if (insuranceId == currentItem.insuranceid) {
                    obj = currentItem;
                }
            });
            return obj;
        }

        /**
         * Get medical information
         * flag refer phyician and provider both require or not
         */
        function getMedicalInfo() {
            var defer = $q.defer();
            matterDetailsService.getMedicalInfo_BEFORE_OFF_DRUPAL(vm.TemplateModelInfo.matterId, 'all')
                .then(function (resp) {
                    vm.associateMedicalContacts = resp.data.medicalinfo;
                    vm.allMedicalProviders = [];
                    vm.associateMedicalContactsForNotEmptyPhysician = [];
                    _.forEach(vm.associateMedicalContacts, function (currentItem) {
                        if (currentItem.providerid == null || currentItem.providerid == "") {
                            return;
                        } else {
                            currentItem.providerid.servicestartdate = currentItem.servicestartdate;
                            currentItem.providerid.serviceenddate = currentItem.serviceenddate;
                            currentItem.providerid.medicaltreatmentid = currentItem.medicaltreatmentid;
                            vm.allMedicalProviders.push(currentItem.providerid);
                            vm.allMedicalProvidersList.push(currentItem);
                        }
                    });
                    vm.uniqueAllMedicalProviders = _.uniq(vm.allMedicalProviders, function (item, contactid) {
                        return item.contactid;
                    });

                    _.forEach(vm.associateMedicalContacts, function (currentItem) {
                        if (currentItem.party_role == "1" && currentItem.providerid != "") {
                            vm.allMedicalProvidersPlantiffOnly.push(currentItem.providerid);
                        }
                    });
                    templateHelper.setContactName(vm.allMedicalProvidersPlantiffOnly);

                    _.forEach(vm.associateMedicalContacts, function (currentItem) {
                        if (currentItem.party_role == "1" && currentItem.plaintiffid != "") {
                            if (!(currentItem.physicianid == null || currentItem.physicianid == "")) {
                                vm.physicianOnlyPlaintiff.push(currentItem);
                            }
                        }
                    });
                    templateHelper.setContactName(vm.physicianOnlyPlaintiff);

                    _.forEach(vm.associateMedicalContacts, function (currentItem) {
                        if (utils.isNotEmptyVal(currentItem.physicianid)) {
                            currentItem.physicianid.medicaltreatmentid = currentItem.medicaltreatmentid;
                            vm.physician_provider_medicalInfo.push(currentItem.physicianid);
                        }

                    });
                    templateHelper.setContactName(vm.physician_provider_medicalInfo);

                    /**
                     * Unique Physician
                     */
                    vm.physician_provider_medicalInfo1 = _.uniq(vm.physician_provider_medicalInfo, function (item, contactid) {
                        return item.contactid;
                    });

                    _.forEach(vm.associateMedicalContacts, function (currentItem) {
                        if (utils.isNotEmptyVal(currentItem.physicianid)) {
                            currentItem.physicianid.medicaltreatmentid = currentItem.medicaltreatmentid;
                            currentItem.physicianName = currentItem.physicianid.contact_name;
                            vm.associateMedicalContactsForNotEmptyPhysician.push(currentItem);
                        }

                    });

                    _.forEach(vm.associateMedicalContacts, function (currentItem) {
                        if (utils.isNotEmptyVal(currentItem.servicestartdate) && utils.isNotEmptyVal(currentItem.serviceenddate)) {
                            currentItem.startEndDate = 'Start: ' + moment.unix(currentItem.servicestartdate).utc().format('MM/DD/YYYY') + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MM/DD/YYYY');
                            vm.medicalInfoDates.push(currentItem);
                        } else if (utils.isNotEmptyVal(currentItem.servicestartdate)) {
                            currentItem.startEndDate = 'Start: ' + moment.unix(currentItem.servicestartdate).utc().format('MM/DD/YYYY') + ' |  End: ' + " ";
                            vm.medicalInfoDates.push(currentItem);
                        } else if (utils.isNotEmptyVal(currentItem.serviceenddate)) {
                            currentItem.startEndDate = 'Start: ' + " " + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MM/DD/YYYY');
                            vm.medicalInfoDates.push(currentItem);
                        }
                    })

                    vm.medicalInfoDates = _.uniq(vm.medicalInfoDates, function (item) {
                        return item.medicaltreatmentid;
                    });

                    _.forEach(vm.associateMedicalContacts, function (currentItem) {
                        if (currentItem.servicestartdate != "" || currentItem.serviceenddate != "") {
                            vm.medicalproviderdate.push(currentItem);
                        }
                    });

                    //Date requested from medical info
                    _.forEach(vm.associateMedicalContacts, function (currentItem) {
                        if (utils.isNotEmptyVal(currentItem.date_requested)) {
                            currentItem.dateRequested1 = moment.unix(currentItem.date_requested).utc().format('MM/DD/YYYY');
                            currentItem.dateRequested2 = moment.unix(currentItem.date_requested).utc().format('MMMM D, YYYY');
                            vm.medicalInfoRequestedDates.push(currentItem);
                        }
                    });

                    vm.medicalInfoRequestedDates = _.uniq(vm.medicalInfoRequestedDates, function (item) {
                        return item.date_requested;
                    });
                    templateHelper.setContactName(vm.allMedicalProviders);
                    defer.resolve();
                }, function (error) {
                    notificationService.error("Service providers not loaded.");
                });
            return defer.promise;
        }

        //Get Medical Info Java API Call
        function getMedicalInfo_Java() {
            var defer = $q.defer();
            matterDetailsService.getMedicalInfo(vm.TemplateModelInfo.matterId, 'all')
                .then(function (resp) {
                    vm.associateMedicalContacts_Java = resp;
                    vm.allMedicalProviders_Java = [];
                    vm.associateMedicalContactsForNotEmptyPhysician_Java = [];
                    vm.physicianListOnly = [];

                    //Get All Medical Providers
                    _.forEach(vm.associateMedicalContacts_Java, function (currentItem) {
                        if (currentItem.medical_provider == null || currentItem.medical_provider == "") {
                            return;
                        }
                        else {
                            vm.allMedicalProviders_Java.push(currentItem.medical_provider_id);
                            vm.allMedicalProvidersList_Java.push(currentItem);
                        }
                    });

                    //Get All Physician + Medical Providers
                    _.forEach(vm.associateMedicalContacts_Java, function (currentItem) {
                        var obj = {};
                        if (currentItem.physician_id != 0) {
                            currentItem.physician.full_name = currentItem.physician.first_name + " " + currentItem.physician.last_name;
                        }
                        obj.physician = currentItem.physician;

                        if (currentItem.medical_provider_id != 0) {
                            currentItem.medical_provider.full_name = currentItem.medical_provider.first_name + " " + currentItem.medical_provider.last_name;
                        }
                        obj.medical_provider = currentItem.medical_provider;
                        obj.medical_information_id = currentItem.medical_information_id;

                        vm.associateMedicalContactsForNotEmptyPhysician_Java.push(obj);
                    });

                    //Get All Physician
                    _.forEach(vm.associateMedicalContacts_Java, function (currentItem) {
                        var PhysicianObj = {};
                        if (currentItem.physician_id == 0 || currentItem.physician_id == "") {
                            return;
                        }
                        else {
                            currentItem.physician.full_name = currentItem.physician.first_name + " " + currentItem.physician.last_name;
                            PhysicianObj.physician = currentItem.physician;
                            PhysicianObj.medical_provider = currentItem.medical_provider;
                            PhysicianObj.medical_information_id = currentItem.medical_information_id;
                        }
                        vm.physicianListOnly.push(PhysicianObj);
                    });

                    templateHelper.setContactName(vm.allMedicalProviders);
                    defer.resolve();
                }, function (error) {
                    notificationService.error("Service providers not loaded.");
                });
            return defer.promise;
        }
        /**
         * 
         */
        function getMedicalInfoAndGetMedicalBillInfo() {
            var fn1 = getMedicalBillInfo();
            var fn2 = getMedicalInfo();
            $q.all([fn1, fn2]).then(function (values) {
                var obj = vm.allMedicalProvidersList.concat(vm.medicalBillInfoList);
                _.forEach(obj, function (currentItem) {
                    if (currentItem.party_role == "1") {
                        if (currentItem.providerid == null || currentItem.providerid == "") {
                            return;
                        } else {
                            vm.allMedicalProvidersAndMedicalBillInfo.push(currentItem.providerid);
                        }
                    }
                });

                //Treatment Dates From medical Info & Medical Bill info
                _.forEach(obj, function (currentItem) {
                    if (currentItem.hasOwnProperty("medicalbillid")) {
                        if (utils.isNotEmptyVal(currentItem.servicedate) && utils.isNotEmptyVal(currentItem.serviceenddate)) {
                            currentItem.startEndDate = 'Start: ' + moment.unix(currentItem.servicedate).utc().format('MM/DD/YYYY') + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MM/DD/YYYY');
                            currentItem.startEndDate1 = 'Start: ' + moment.unix(currentItem.servicedate).utc().format('MMMM D, YYYY') + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MMMM D, YYYY');
                            vm.medicalBillAndInfoDates.push(currentItem);
                        } else if (utils.isNotEmptyVal(currentItem.servicedate)) {
                            currentItem.startEndDate = 'Start: ' + moment.unix(currentItem.servicedate).utc().format('MM/DD/YYYY') + ' |  End: ' + " ";
                            currentItem.startEndDate1 = 'Start: ' + moment.unix(currentItem.servicedate).utc().format('MMMM D, YYYY') + ' |  End: ' + " ";
                            vm.medicalBillAndInfoDates.push(currentItem);
                        } else if (utils.isNotEmptyVal(currentItem.serviceenddate)) {
                            currentItem.startEndDate = 'Start: ' + " " + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MM/DD/YYYY');
                            currentItem.startEndDate1 = 'Start: ' + " " + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MMMM D, YYYY');
                            vm.medicalBillAndInfoDates.push(currentItem);
                        }
                    } else if (currentItem.hasOwnProperty("medicaltreatmentid")) {
                        if (utils.isNotEmptyVal(currentItem.servicestartdate) && utils.isNotEmptyVal(currentItem.serviceenddate)) {
                            currentItem.startEndDate = 'Start: ' + moment.unix(currentItem.servicestartdate).utc().format('MM/DD/YYYY') + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MM/DD/YYYY');
                            currentItem.startEndDate1 = 'Start: ' + moment.unix(currentItem.servicestartdate).utc().format('MMMM D, YYYY') + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MMMM D, YYYY');
                            vm.medicalBillAndInfoDates.push(currentItem);
                        } else if (utils.isNotEmptyVal(currentItem.servicestartdate)) {
                            currentItem.startEndDate = 'Start: ' + moment.unix(currentItem.servicestartdate).utc().format('MM/DD/YYYY') + ' |  End: ' + " ";
                            currentItem.startEndDate1 = 'Start: ' + moment.unix(currentItem.servicestartdate).utc().format('MMMM D, YYYY') + ' |  End: ' + " ";
                            vm.medicalBillAndInfoDates.push(currentItem);
                        } else if (utils.isNotEmptyVal(currentItem.serviceenddate)) {
                            currentItem.startEndDate = 'Start: ' + " " + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MM/DD/YYYY');
                            currentItem.startEndDate1 = 'Start: ' + " " + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MMMM D, YYYY');
                            vm.medicalBillAndInfoDates.push(currentItem);
                        }
                    }
                });

                _.forEach(obj, function (currentItem) {
                    if (currentItem.providerid == null || currentItem.providerid == "") {
                        return;
                    } else {
                        vm.medicalProvidersFromMedicalBillAndInfo.push(currentItem.providerid);
                        vm.uniqMedicalProvidersFromBillAndInfo.push(currentItem);
                        vm.uniqMedicalProvidersFromBillAndInfoCopy.push(currentItem);
                        vm.uniqMedicalProvidersFromBillAndInfoPhysician.push(currentItem);
                    }
                });

                vm.uniqMedicalProvidersFromBillAndInfoCopy = _.uniq(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (item) {
                    if (item.providerid && item.providerid.contactid) {
                        return item.providerid.contactid;
                    }
                })

                vm.uniqMedicalProvidersFromBillAndInfoCopy = _.pluck(vm.uniqMedicalProvidersFromBillAndInfoCopy, 'providerid');

                _.forEach(obj, function (currentItem) {
                    if (currentItem.medicalbillid) {
                        currentItem.providerid.adjustedamount = '';
                        currentItem.providerid.totalamount = currentItem.totalamount;
                        currentItem.providerid.adjustedamount = currentItem.adjustedamount;
                        vm.medicalProvidersFromMedicalBillamountAndInfo.push(currentItem.providerid);
                    } else {
                        vm.medicalProvidersFromMedicalBillamountAndInfo.push(currentItem.providerid);
                    }
                });

                _.forEach(vm.uniqMedicalProvidersFromBillAndInfo, function (currentItem) {
                    currentItem.providerid.startEndDate = currentItem.startEndDate;
                    vm.medicalProvidersFromBillAndInfo.push(currentItem.providerid);
                    currentItem.contact_name = currentItem.providerid.contact_name;
                    vm.medicalProvidersFromBillAndInfoWithBillId.push(currentItem);
                });
                vm.uniqMedicalBillInfoForOutstandingAmount = angular.copy(vm.medicalProvidersFromBillAndInfoWithBillId);
                vm.medicalBillAndInfoDates = _.uniq(vm.medicalBillAndInfoDates, function (item) {
                    if (item.hasOwnProperty("medicaltreatmentid")) {
                        return item.medicaltreatmentid;
                    } else if (item.hasOwnProperty("medicalbillid")) {
                        return item.medicalbillid;
                    }

                })



            });
        }

        //Function to get physician from Other Party and Medical Info
        function getMedicalInfoAndGetOtherParties() {
            var fn1 = getOtherParties();
            var fn2 = getMedicalInfo();
            $q.all([fn1, fn2]).then(function (values) {
                var obj = vm.associateMedicalContactsForNotEmptyPhysician.concat(vm.otherPartyPhysicians);
                _.forEach(obj, function (currentItem) {
                    if (currentItem.medicaltreatmentid != "" || currentItem.medicaltreatmentid != null) {
                        if (currentItem.physicianid == null || currentItem.physicianid == "") {
                            return;
                        } else {
                            currentItem.contactid = currentItem.physicianid.contactid;
                            currentItem.contact_name = currentItem.physicianid.contact_name;
                            vm.physiciansFromMedicalInfoAndOtherParties.push(currentItem);
                        }
                    }
                });
                _.forEach(obj, function (currentItem) {
                    if (currentItem.contactroleid == "null" || currentItem.contactroleid == "") {
                        return;
                    } else if (currentItem.contactroleid == "2") {
                        vm.physiciansFromMedicalInfoAndOtherParties.push(currentItem);
                    }
                });


            });
        }

        //function to get physician from medicalInfo_java and other party
        function getMedicalInfo_JavaAndGetOtherParties() {
            var fn1 = getOtherParties();
            var fn2 = getMedicalInfo_Java();
            $q.all([fn1, fn2]).then(function (values) {

                var obj = vm.physicianListOnly.concat(vm.otherPartyPhysicians);
                _.forEach(obj, function (currentItem) {
                    if (currentItem.hasOwnProperty('contactrolename')) {
                        vm.phpJavaPhysicianConcat.push(currentItem);
                    } else if(currentItem.hasOwnProperty('physician')){
                        var obj1 = {};
                        obj1.contactid = currentItem.physician.contact_id;
                        obj1.contact_name = currentItem.physician.full_name;
                        obj1.phone_cell = currentItem.physician.phone_cell;
                        obj1.phone_home = currentItem.physician.phone_home;
                        obj1.phone_work = currentItem.physician.phone_work;
                        obj1.phone_number = currentItem.physician.phone_numbers;
                        obj1.emailid = currentItem.physician.email_ids;
                        obj1.faxnumber = currentItem.physician.fax_numbers;
                        obj1.contact_type = currentItem.physician.contact_type == "Global" ? "Global" : "Local";
                        vm.phpJavaPhysicianConcat.push(obj1);
                    }
                });
            });
        }

        //Settlement Info
        function getSettlementPlaintiffRecovery() {
            matterDetailsService.getNegotiation(vm.TemplateModelInfo.matterId)
                .then(function (response) {
                    vm.settlementInfo = angular.copy(response);
                    _.forEach(vm.settlementInfo, function (item) {
                        item.negotiation_amount = 0;
                        _.forEach(item.settlement_negotiations, function (ct) {
                            if ((utils.isEmptyVal(ct.policy_limit) && utils.isEmptyVal(ct.policylimit_max))) {
                                ct.policy = "-";
                            } else {
                                var policy_limit_max = utils.isNotEmptyVal(ct.policylimit_max) ? $filter('currency')(angular.copy(ct.policylimit_max), '$', 2) : "-";
                                var policy_limit = utils.isNotEmptyVal(ct.policy_limit) ? $filter('currency')(angular.copy(ct.policy_limit), '$', 2) : "-";
                                ct.policy = policy_limit + '/' + policy_limit_max;
                            }
                            ct.defendant_name = utils.isNotEmptyVal(ct.defendant_name) ? angular.copy(ct.defendant_name) : '-';
                            ct.demanded_amount = ct.demanded_amount ? angular.copy(ct.demanded_amount) : '-';
                            ct.offered_amount = ct.offered_amount ? angular.copy(ct.offered_amount) : '-';
                            ct.adjuster_name = ct.adjuster_name ? ct.adjuster_name : '-';
                            ct.policy = ct.policy ? ct.policy : '-';
                            ct.claim_number = ct.claim_number ? ct.claim_number : '-';
                            ct.policy_exhausted = ct.policy_exhausted ? ct.policy_exhausted : '-';
                            ct.insurance_type = ct.insurance_type ? ct.insurance_type : '-';
                            _.forEach(ct.settlement_calculators, function (data) {
                                if (data.is_final_settlement == 1) {
                                    var total = data.client_recovery ? parseFloat(data.client_recovery) : 0;
                                    item.negotiation_amount += total;
                                }
                            })
                        })

                    });

                    // Settlement Insurance dropdowns and Amount calculations
                    // _.forEach(vm.settlementInfo, function (item) {
                    //     _.forEach(item.settlement_negotiations, function (data) {
                    //         vm.settlementInsuranceProviders.push(data);
                    //     })
                    // });

                    // _.forEach(vm.settlementInsuranceProviders, function (data) {
                    //     if (data.insurance_type == 'PIP') {
                    //         vm.settlementPIPInsProvider.push(data);
                    //     } else if (data.insurance_type == 'UI/UIM') {
                    //         vm.settlementUIMInsProvider.push(data)
                    //     }
                    // });


                });
        }

        //function to populate timePicker dropdowns
        function timePicker() {
            var hr;
            var min;
            var sec;

            for (hr = 1; hr <= 12; hr++) {
                if (hr <= 9) {
                    vm.hrs.push('0' + hr);
                } else {
                    vm.hrs.push(hr);
                }
            }
            for (min = 0; min <= 59; min++) {
                if (min <= 9) {
                    vm.mins.push('0' + min);
                } else {
                    vm.mins.push(min);
                }
            }
            for (sec = 0; sec <= 59; sec++) {
                if (sec <= 9) {
                    vm.secs.push('0' + sec);
                } else {
                    vm.secs.push(sec);
                }
            }
        }


        /**
         * Get medical bill information
         * flag refer phyician and provider both require or not
         */
        function getMedicalBillInfo() {
            var defer = $q.defer();
            matterDetailsService.getMedicalBillsInfo_BEFORE_OFF_DRUPAL(vm.TemplateModelInfo.matterId, 'all')
                .then(function (resp) {
                    var medicalBillList = [];
                    medicalBillList = resp.data.medicalbills;
                    vm.medicalBillListWOProvider = resp.data.medicalbills;
                    setMedicalBillInfoProvider(medicalBillList);
                    _.forEach(medicalBillList, function (current, index) {
                        if (utils.isNotEmptyVal(current.providerid)) {
                            vm.medicalBillInfo.push(current.providerid);
                            vm.medicalBillInfoList.push(current);
                        }
                        vm.uniqMedicalBillInfo = _.uniq(vm.medicalBillInfo, function (item, contactid) {
                            return item.contactid;
                        })
                    });
                    _.forEach(medicalBillList, function (currentItem) {
                        if (utils.isNotEmptyVal(currentItem.servicedate) && utils.isNotEmptyVal(currentItem.serviceenddate)) {
                            currentItem.startEndDate = 'Start: ' + moment.unix(currentItem.servicedate).utc().format('MM/DD/YYYY') + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MM/DD/YYYY');
                            vm.medicalBillDates.push(currentItem);
                        } else if (utils.isNotEmptyVal(currentItem.servicedate)) {
                            currentItem.startEndDate = 'Start: ' + moment.unix(currentItem.servicedate).utc().format('MM/DD/YYYY') + ' |  End: ' + " ";
                            vm.medicalBillDates.push(currentItem);
                        } else if (utils.isNotEmptyVal(currentItem.serviceenddate)) {
                            currentItem.startEndDate = 'Start: ' + " " + ' |  End: ' + moment.unix(currentItem.serviceenddate).utc().format('MM/DD/YYYY');
                            vm.medicalBillDates.push(currentItem);
                        }
                    })

                    vm.medicalBillDates = _.uniq(vm.medicalBillDates, function (item) {
                        return item.medicalbillid;
                    });

                    _.forEach(medicalBillList, function (currentItem) {
                        if (currentItem.party_role == "1") {
                            if (currentItem.providerid == null || currentItem.providerid == "") {
                                return;
                            } else {
                                vm.MedicalBillInfoPlantiffOnly.push(currentItem.providerid);
                            }
                        }
                    });

                    templateHelper.setContactName(vm.medicalBillInfo);
                    // vm.medicalBillInfo = _.uniq(vm.medicalBillInfo, 'contact_name');
                    defer.resolve();
                }, function (error) {
                    notificationService.error("Service providers not loaded.");
                });
            return defer.promise;
        }

        /**
         * Set medical bill info in provider
         */
        function setMedicalBillInfoProvider(party) {
            _.forEach(party, function (oparty) {
                if (oparty.providerid != null) {
                    oparty.providerid.medicalbillid = utils.isNotEmptyVal(oparty.medicalbillid) ? oparty.medicalbillid : '';
                    oparty.providerid.servicedatestart = utils.isNotEmptyVal(oparty.servicedate) ? oparty.servicedate : '';
                    oparty.providerid.totalamount = utils.isNotEmptyVal(oparty.totalamount) ? oparty.totalamount : '';
                }
            });
        }

        /* function to get service provider list*/

        function getServiceProviders() {
            matterDetailsService.getMedicalInfo(vm.TemplateModelInfo.matterId, 'all')
                .then(function (resp) {
                    vm.associateContactsList = resp.data.medicalinfo;
                    if (vm.TemplateModelInfo.typeId == 169) {
                        vm.allPhysicians = [];
                        _.forEach(vm.associateContactsList, function (currentItem) {
                            if (utils.isNotEmptyVal(currentItem.physicianid)) {
                                vm.allPhysicians.push(currentItem.physicianid)
                            }
                        });
                        templateHelper.setContactName(vm.allPhysicians);
                    }
                    var associateContacts = [];
                    (vm.TemplateModelInfo.typeId == 16 || vm.TemplateModelInfo.typeId == 21 || vm.TemplateModelInfo.typeId == 131 || vm.TemplateModelInfo.typeId == 139 || vm.TemplateModelInfo.typeId == 138) ?
                        _.forEach(vm.associateContactsList, function (physician) {
                            if (utils.isNotEmptyVal(physician.physicianid)) {
                                associateContacts.push(physician);
                            }
                        }) :
                        _.forEach(vm.associateContactsList, function (provider) {
                            if (utils.isNotEmptyVal(provider.providerid)) {
                                associateContacts.push(provider);
                            }
                        });
                    vm.associateContactsList = associateContacts;
                    addInsuranceProvider();
                }, function (error) {
                    notificationService.error("Service providers not loaded.");
                });
        }

        function getLawSecTitle() {
            vm.lawSecretoryTitle = ["MR. OR MS.", "Mr.", "Ms.", "Mrs.", "Dr."];
            vm.TemplateModelInfo.lawSecretoryTitle = vm.lawSecretoryTitle[0];
        }

        /* function to get insurance contact list*/
        function getInsuranceContacts() {
            matterDetailsService.getInsauranceInfo_BEFORE_OFF_DRUPAL(vm.TemplateModelInfo.matterId, 'all', '')
                .then(function (resp) {
                    vm.noFaultInsuranceProviders = [];
                    vm.noFaultInsuranceList = [];
                    vm.workersCompInsurance = [];
                    vm.insuranceContactList = resp.data.insurance;
                    vm.uniqOnlyInsuranceProvider = [];
                    vm.uniqOnlyInsuranceProviderAdjuster = [];

                    if (vm.TemplateModelInfo.template_code == "DLT02") {
                        _.forEach(vm.insuranceContactList, function (item) {
                            if (utils.isNotEmptyVal(item.insuranceproviderid)) {
                                if (utils.isNotEmptyVal(item.insuredpartyid)) {
                                    if (utils.isNotEmptyVal(item.insuredpartyid.lastname) && utils.isNotEmptyVal(item.insuredpartyid.firstname) && utils.isNotEmptyVal(item.insuranceproviderid.firstname)) {
                                        item.new_contact_name = item.insuranceproviderid.firstname + ' ' + (utils.isNotEmptyVal(item.insuranceproviderid.lastname) ? item.insuranceproviderid.lastname : '') + ' - ' + item.insuredpartyid.firstname + ' ' + item.insuredpartyid.lastname;
                                        vm.insurance_allParties.push(item);
                                    } else if (utils.isEmptyVal(item.insuredpartyid.lastname) && utils.isNotEmptyVal(item.insuranceproviderid.firstname)) {
                                        item.new_contact_name = item.insuranceproviderid.firstname + ' ' + (utils.isNotEmptyVal(item.insuranceproviderid.lastname) ? item.insuranceproviderid.lastname : '') + ' - ' + item.insuredpartyid.firstname;
                                        vm.insurance_allParties.push(item);
                                    } else if (utils.isEmptyVal(item.insuredpartyid.firstname) && utils.isNotEmptyVal(item.insuranceproviderid.firstname)) {
                                        item.new_contact_name = item.insuranceproviderid.firstname + ' ' + (utils.isNotEmptyVal(item.insuranceproviderid.lastname) ? item.insuranceproviderid.lastname : '') + ' - ' + item.insuredpartyid.lastname;
                                        vm.insurance_allParties.push(item);
                                    }
                                } else if (utils.isEmptyVal(item.insuredpartyid)) {
                                    item.new_contact_name = item.insuranceproviderid.firstname + ' ' + (utils.isNotEmptyVal(item.insuranceproviderid.lastname) ? item.insuranceproviderid.lastname : '');
                                    vm.insurance_allParties.push(item);
                                }
                            };

                        });
                    };

                    vm.filterClaim = _.filter(vm.insuranceContactList, function (currentItem) {
                        return currentItem.claimnumber != null;
                    });
                    if (vm.TemplateModelInfo.typeId == 169 || vm.TemplateModelInfo.typeId == 218) {
                        _.forEach(vm.insuranceContactList, function (currentItem) {
                            if (currentItem.insurancetype == "No-Fault") {
                                vm.noFaultInsuranceProviders.push(currentItem);
                                vm.noFaultInsuranceProvidersId.push(currentItem);
                            }
                        });
                        templateHelper.setContactName(vm.noFaultInsuranceProviders);
                    }

                    _.forEach(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insurancetype == "No-Fault") {
                            currentItem.insuranceProviderName = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            vm.noFaultInsuranceList.push(currentItem);
                        }
                    });

                    if (vm.TemplateModelInfo.template_code == "F1143_133") {
                        _.forEach(vm.insuranceContactList, function (currentItem) {
                            if (utils.isNotEmptyVal(currentItem.insurancetype) && currentItem.insurancetype == "Workers Comp.") {
                                currentItem.contact_name = currentItem.insuranceproviderid.firstname + ' ' + (utils.isNotEmptyVal(currentItem.insuranceproviderid.lastname) ? currentItem.insuranceproviderid.lastname : '');
                                vm.workersCompInsurance.push(currentItem);
                            }
                        });
                    }
                    vm.onlyInsuranceProvider = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insuranceproviderid != "") {
                            currentItem.contact_name = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            return currentItem;
                        }

                    });

                    vm.uniqOnlyInsuranceProvider = _.uniq(vm.onlyInsuranceProvider, function (item) {
                        return item.insuranceproviderid.contactid;
                    });

                    vm.uniqOnlyInsuranceProviderAdjuster = _.uniq(vm.onlyInsuranceProvider, function (item) {
                        return item.insuranceproviderid.contactid;
                    });

                    vm.onlyInsuranceBIProvider = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insurancetype == "BI" && currentItem.insuranceproviderid != "") {
                            currentItem.contact_name = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            return currentItem;
                        }

                    });
                    vm.InsuranceUMProvider = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insurancetype == "UI/UIM" && currentItem.insuranceproviderid != "") {
                            currentItem.contact_name = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            return currentItem;
                        }

                    });
                    vm.InsurancePropertyProvider = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insurancetype == "Property" && currentItem.insuranceproviderid != "") {
                            currentItem.contact_name = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            return currentItem;
                        }

                    });
                    vm.onlyInsuranceProviderPlantiff = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.associated_party_id.party_role == "1" && currentItem.insuranceproviderid != "") {
                            currentItem.contact_name = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            return currentItem;
                        }
                    });
                    vm.insuranceAdjusorInsured = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insuranceproviderid != "") {
                            currentItem.insuranceProviderName = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            return currentItem;
                        }
                    });

                    vm.onlyAdjustor = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.adjusterid != "") {
                            currentItem.contact_name = currentItem.adjusterid.firstname + " " + currentItem.adjusterid.lastname;
                            return currentItem;
                        }
                    });

                    vm.onlyInsuranceProviderNew = _.uniq(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insuranceproviderid != "") {
                            return currentItem;
                        }
                    });

                    vm.uniqonlyInsuranceProviderNew = _.uniq(vm.onlyInsuranceProviderNew, function (item) {
                        if (item.insuranceproviderid != "") {
                            item.insuranceProvider_contact_name = item.insuranceproviderid.firstname + " " + item.insuranceproviderid.lastname;
                            return item.insuranceproviderid.contactid;
                        }
                    });



                    vm.insuranceAdjusorInsuredType = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insuranceproviderid != "") {
                            return currentItem;
                        }
                    });
                    vm.insuranceUM = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insurancetype == "UI/UIM") {
                            return currentItem;
                        }
                    });
                    vm.insurancePIP = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insurancetype == "PIP") {
                            return currentItem;
                        }
                    });
                    vm.insuranceHealth = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insurancetype == "Health") {
                            return currentItem;
                        }
                    });
                    vm.insuranceInsured = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insuranceproviderid != "") {
                            return currentItem;
                        }
                    });

                    _.forEach(vm.insuranceContactList, function (item) {
                        if (utils.isNotEmptyVal(item.insuranceproviderid) || utils.isNotEmptyVal(item.adjusterid) || utils.isNotEmptyVal(item.claimnumber)) {
                            vm.insuranceAdjusters.push({ 'insuranceId': item.insuranceid, 'insuranceProviderId': item.insuranceproviderid, 'adjusterId': item.adjusterid, 'claim': item.claimnumber, 'adjuster_name': item.adjusterid.firstname + ' ' + item.adjusterid.lastname, 'contact_name': item.contact_name })
                        }

                    })

                    _.forEach(vm.insuranceContactList, function (item) {
                        if (item.associated_party_id.party_role == "2") {
                            vm.defendantAdjusters.push({ 'insuranceId': item.insuranceid, 'insuranceProviderId': item.insuranceproviderid, 'adjusterId': item.adjusterid, 'contact_name': item.adjusterid.firstname + ' ' + item.adjusterid.lastname })
                            vm.defendantInsProvider.push(item);
                        }

                    })

                    //Fetch BI Defendant Insurance Providers
                    _.forEach(vm.insuranceContactList, function (item) {
                        if (item.insuranceproviderid != "") {
                            if ((item.associated_party_id.party_role == "2") && (item.insurancetype == "BI")) {
                                vm.defendantAdjusters.push({ 'insuranceId': item.insuranceid, 'insuranceProviderId': item.insuranceproviderid, 'adjusterId': item.adjusterid, 'contact_name': item.adjusterid.firstname + ' ' + item.adjusterid.lastname })
                                vm.defendantInsProviderBI.push(item);
                            }
                        }
                    })

                    // Fech All UI - UIM Insurance Providers
                    _.forEach(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.insuranceproviderid != "") {
                            if (currentItem.insurancetype == "UI/UIM") {
                                currentItem.insuranceProviderName = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                                vm.UIUIMInsuranceList.push(currentItem);
                            }
                        }
                    });

                    vm.insuranceAdjusorInsuredDefendant = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.associated_party_id.party_role == "2" && currentItem.insuranceproviderid != "") {
                            return currentItem;
                        }
                    });
                    vm.onlyInsuranceProviderDefendant = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.associated_party_id.party_role == "2" && currentItem.insuranceproviderid != "") {
                            currentItem.contact_name = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            return currentItem;
                        }
                    });

                    vm.onlyInsuranceProviderDefendant2 = _.filter(vm.insuranceContactList, function (currentItem) {
                        if (currentItem.associated_party_id.party_role == "2" && currentItem.insuranceproviderid != "") {
                            currentItem.contact_name = currentItem.insuranceproviderid.firstname + " " + currentItem.insuranceproviderid.lastname;
                            return currentItem;
                        }
                    });

                    vm.uniquOnlyInsuranceProviderDefendant = _.uniq(vm.onlyInsuranceProviderDefendant, function (item) {
                        return item.insuranceproviderid.contactid;
                    });

                    addInsuranceProvider();
                }, function (error) {
                    notificationService.error('Unable to fetch insurance provider');
                });
        }

        /**
         * insured party data
         */
        function insuredParty() {
            matterDetailsService.getInsauranceInfo(vm.TemplateModelInfo.matterId, 'all', '')
                .then(function (resp) {
                    vm.insuranceContactList = resp.data.insurance;
                    _.forEach(vm.insuranceContactList, function (currentItem, index) {
                        if (currentItem.insuredpartyid != "") {
                            currentItem.insuredpartyid.insuranceid = currentItem.insuranceid;
                            if (utils.isNotEmptyVal(currentItem.insuredpartyid.firstname) || utils.isNotEmptyVal(currentItem.insuredpartyid.lastname)) {
                                currentItem.insuredpartyid.contact_name = currentItem.insuredpartyid.firstname + " " + currentItem.insuredpartyid.lastname;
                                vm.insuredParties.push(currentItem.insuredpartyid)
                            }
                        }
                    });
                }, function (error) {
                    notificationService.error('Unable to fetch insurance provider');
                });
        }

        /**
         * filter insurance claim number with null
         */
        vm.nullValExclude = function (item) {
            return !(item.claimnumber === null || item.claimnumber === "" || item.claimnumber.trim().length === 0)
        }
        vm.nulValExcludeDate = function (item) {
            return !(item.servicestartdate === null || item.servicestartdate === "" || item.servicestartdate.trim().length === 0)
        }


        /*function to get other party contacts with physican/defendant attorney role*/
        function getOtherParties() {
            var defer = $q.defer();
            allPartiesDataService.getOtherParties(vm.TemplateModelInfo.matterId)
                .then(function (resp) {
                    var otherparty = resp.data;
                    vm.otherPartydata = resp.data;
                    vm.workerCompAttorney = [];
                    vm.otherPartyPhysicians = [];
                    vm.otherPartyExpertWitness = [];
                    vm.otherPartytWitness = [];
                    vm.otherPartytHospital = [];
                    vm.otherPartyCounsel = [];
                    vm.plaintiffAttorney = [];
                    if (utils.isNotEmptyVal(otherparty)) {
                        templateHelper.setNamePropForotherParty(otherparty);
                        _.forEach(otherparty, function (party) {
                            /*filter other parties by role according to type pf template*/
                            if (party.contactrolename == 'Defendant Attorney') {
                                vm.associateContacts.push(party);
                            };
                            //setOtherParty(party);
                        });
                    }
                    if (vm.TemplateModelInfo.template_code == "F1143_133") {
                        if (utils.isNotEmptyVal(otherparty)) {
                            _.forEach(otherparty, function (currentItem) {
                                if (currentItem.contactrolename == "Worker's Comp Attorney") {
                                    vm.workerCompAttorney.push(currentItem);
                                }
                            })
                        }
                    }

                    //physician from other parties
                    if (utils.isNotEmptyVal(vm.otherPartydata)) {
                        _.forEach(vm.otherPartydata, function (item) {
                            if (item.contactrolename == "Physician") {
                                vm.otherPartyPhysicians.push(item);
                            };
                        });
                    };

                    //Expert Witness From Other Parties
                    if (utils.isNotEmptyVal(vm.otherPartydata)) {
                        _.forEach(vm.otherPartydata, function (item) {
                            if (item.contactrolename == "Expert Witness") {
                                vm.otherPartyExpertWitness.push(item);
                            };
                        });
                    };

                    //Witness From Other Parties
                    if (utils.isNotEmptyVal(vm.otherPartydata)) {
                        _.forEach(vm.otherPartydata, function (item) {
                            if (item.contactrolename == "Witness") {
                                vm.otherPartytWitness.push(item);
                            };
                        });
                    };

                    // Hospital From other Parties
                    //Witness From Other Parties
                    if (utils.isNotEmptyVal(vm.otherPartydata)) {
                        _.forEach(vm.otherPartydata, function (item) {
                            if (item.contactrolename == "Hospital") {
                                vm.otherPartytHospital.push(item);
                            };
                        });
                    };

                    //Attorney of Counsel from other parties
                    if (utils.isNotEmptyVal(vm.otherPartydata)) {
                        _.forEach(vm.otherPartydata, function (item) {
                            if (item.contactrolename == "Attorney - Of Counsel") {
                                vm.otherPartyCounsel.push(item);
                            };
                        });
                    };

                    //Plaintiff Attorney from other parties
                    if (utils.isNotEmptyVal(vm.otherPartydata)) {
                        _.forEach(vm.otherPartydata, function (item) {
                            if (item.contactrolename == "Plaintiff Attorney") {
                                vm.plaintiffAttorney.push(item);
                            };
                        });
                    };

                    vm.defAttorneyMsg = (vm.option == 'DefendantAttorney' && utils.isEmptyVal(vm.associateContacts)) ? true : false;
                    defer.resolve();
                }, function (error) {
                    notificationService.error("Defendant attorneys not loaded.");
                });
            return defer.promise;
        }

        /*function to get all EBT/Deposition event list*/
        function getEBTEvents() {
            eventsDataService.getEvents(vm.TemplateModelInfo.matterId)
                .then(function (reponse) {
                    vm.EBTEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '13');
                    });
                    _.forEach(vm.EBTEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });
                    /* SOL EVENTS dropdown */
                    vm.solEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '1');
                    });
                    _.forEach(vm.solEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    /* Events(Type:Other) dropwdown */
                    vm.otherEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '100');
                    });
                    _.forEach(vm.otherEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    vm.arbitrationEvent = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '22')
                    })
                    _.forEach(vm.arbitrationEvent, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstarrt).format('MM/DD/YYYY hh:mm A') + ' | End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    vm.IMEEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '18');
                    });
                    _.forEach(vm.IMEEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });
                    //set trial events 
                    vm.TrialEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '14');
                    });

                    _.forEach(vm.TrialEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    //Mediation Event
                    vm.mediationEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '21');
                    });

                    _.forEach(vm.mediationEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    vm.EUOEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '20');
                    });

                    _.forEach(vm.EUOEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });
                    vm.EUOADEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '20' || event.labelid == '3');
                    });
                    _.forEach(vm.EUOADEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });
                    vm.NOCEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '6');
                    });
                    _.forEach(vm.NOCEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });
                    vm.discoveryEndDateEvent = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '17');
                    });
                    _.forEach(vm.discoveryEndDateEvent, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    vm.AllEvents = reponse.data.data;

                    _.forEach(vm.AllEvents, function (event) {
                        event.titleOrName = utils.isEmptyVal(event.title) ? event.name : event.title;
                        event.startEndTime = (event.allday == '0') ? ' Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            ' Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    //Phone Conference Event
                    vm.phoneConferenceEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '31');
                    });
                    _.forEach(vm.phoneConferenceEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    // Facilitation Events
                    vm.FacilitationEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '27');
                    });
                    _.forEach(vm.FacilitationEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MM/DD/YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MM/DD/YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MM/DD/YYYY');
                    });

                    // Settlement Conference Events
                    vm.settlementConferenceEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '28');
                    });
                    _.forEach(vm.settlementConferenceEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MMMM D, YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MMMM D, YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MMMM D, YYYY');
                    });

                    // Hearing Conference Events
                    vm.hearingEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '26');
                    });
                    _.forEach(vm.hearingEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MMMM D, YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MMMM D, YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MMMM D, YYYY');
                    });

                    // Pre-trial Conference Events
                    vm.pretrialConferenceEvents = _.filter(reponse.data.data, function (event) {
                        return (event.labelid == '29');
                    });
                    _.forEach(vm.pretrialConferenceEvents, function (event) {
                        event.startEndTime = (event.allday == '0') ? 'Start: ' + moment.unix(event.utcstart).format('MMMM D, YYYY hh:mm A') + '  |  End: ' + moment.unix(event.utcend).format('MM/DD/YYYY hh:mm A') :
                            'Start: ' + moment.unix(event.utcstart).utc().format('MMMM D, YYYY') +
                            ' |  End: ' + moment.unix(event.utcend).utc().format('MMMM D, YYYY');
                    });

                    vm.AllEvents1 = angular.copy(vm.AllEvents);
                    vm.AllEvents2 = angular.copy(vm.AllEvents);
                    vm.AllEvents3 = angular.copy(vm.AllEvents);
                    vm.AllEventsOriginal1 = angular.copy(vm.AllEvents);
                    vm.AllEventsOriginal2 = angular.copy(vm.AllEvents);
                    vm.AllEventsOriginal3 = angular.copy(vm.AllEvents);
                }, function (error) {
                    notificationService.error('Events not loaded');
                });
        }

        /**
         * set plaintiff based insurance provider
         * medicalFlag-refer to medical provider is define in DOM or not
         * medicalFilterType- refer to medical provider filter with physician or provider
         */
        vm.setPlaintiffProvider = function (plaintiff, medicalFlag, medicalFilterType) {
            var selectedPlaintiffs = [];
            var plaintiffOrDefendant = (typeof (plaintiff) == "object") ? plaintiff : JSON.parse(plaintiff);
            (!Array.isArray(plaintiff)) ? selectedPlaintiffs.push(plaintiffOrDefendant) : selectedPlaintiffs = plaintiffOrDefendant;
            if (medicalFlag) {
                vm.TemplateModelInfo.serviceproviderid = undefined;
                filterMedicalProvider(selectedPlaintiffs, medicalFilterType);
            } else {
                getfilterInsuranceContacts(selectedPlaintiffs);
            }
        }

        /**
         * fill Address Plaintiff or Defendant
         */
        function fillAddressPlaintiffDefendant(plaintiffOrDefendant, type, contactType) {
            //added new parameter contact type to restrict 'plaintiffs_defendants' of getting undefined for template 'Defendant_Claim_Letter_-_Premises'
            if (!(contactType == "Tenant")) {
                vm.TemplateModelInfo.plaintiffs_defendants = undefined;
            }
            vm.plaintiffDefendantAddress = 'Blank';
            vm.selectedPlaintiffOrDefendant = [];
            if (vm.TemplateModelInfo.defendants != undefined) {
                var convertJSON = [];
                convertJSON = JSON.parse(vm.TemplateModelInfo.defendants);
                convertJSON.type = "Defendant";
                vm.selectedPlaintiffOrDefendant.push(convertJSON)
            }
            if (vm.TemplateModelInfo.defendants2 != undefined) {
                var convertJSON = [];
                convertJSON = JSON.parse(vm.TemplateModelInfo.defendants2);
                convertJSON.type = "Defendant";
                vm.selectedPlaintiffOrDefendant.push(convertJSON)
            }
        }

        function fillAddressPlaintiffDefendant_1(plaintiffOrDefendant, type, contactType) {
            //added new parameter contact type to restrict 'plaintiffs_defendants' of getting undefined for template 'Defendant_Claim_Letter_-_Premises'
            if (!(contactType == "Tenant")) {
                vm.TemplateModelInfo.plaintiffs_defendants = undefined;
            }
            vm.plaintiffDefendantAddress = 'Blank';
            vm.selectedPlaintiffOrDefendant = [];
            if (vm.TemplateModelInfo.secDefOwner != undefined) {
                vm.selectedPlaintiffOrDefendant.push(vm.TemplateModelInfo.secDefOwner)
            }
            if (vm.TemplateModelInfo.secDefOperator != undefined) {
                vm.selectedPlaintiffOrDefendant.push(vm.TemplateModelInfo.secDefOperator)
            }
        }

        /**
         * filter physician provider
         */
        function filterPhysicianProvider(selectedPlaintiff) {
            vm.filterPhysicianProviders = [];
            _.forEach(vm.associateMedicalContacts, function (contact) {
                if (contact.plaintiffid.contactid == selectedPlaintiff.contactid.contactid && contact.physicianid != "") {
                    contact.physicianid.medicaltreatmentid = contact.medicaltreatmentid;
                    vm.filterPhysicianProviders.push(contact.physicianid);
                }
            });

            if (vm.filterPhysicianProviders.length > 0) {
                templateHelper.setNamePropForserviceprovider(vm.filterPhysicianProviders);
            }
        }

        /**
         * filter medical provider
         */
        function filterMedicalServiceProvider(selectedPlaintiff) {
            vm.filterMedicalServiceProviders = [];
            _.forEach(vm.associateMedicalContacts, function (contact) {
                if (contact.plaintiffid.contactid == selectedPlaintiff.contactid.contactid && contact.providerid != "") {
                    contact.providerid.medicaltreatmentid = contact.medicaltreatmentid;
                    vm.filterMedicalServiceProviders.push(contact.providerid);
                }
            });

            if (vm.filterMedicalServiceProviders.length > 0) {
                templateHelper.setNamePropForserviceprovider(vm.filterMedicalServiceProviders);
            }

            vm.filterMedicalBillServiceProvider = [];
            _.forEach(vm.medicalBillInfoList, function (contact) {
                if (contact.plaintiffid.contactid == selectedPlaintiff.contactid.contactid && contact.providerid != "") {
                    contact.providerid.medicalbillid = contact.medicalbillid;
                    vm.filterMedicalBillServiceProvider.push(contact.providerid);
                }
            });

            if (vm.filterMedicalBillServiceProvider.length > 0) {
                templateHelper.setNamePropForserviceprovider(vm.filterMedicalBillServiceProvider);
            }
        }

        /**
         * filter Insurance claim by InsuranceProvider
         */
        function fnFilterClaimByInsuranceProvider(selectedInsuranceProvider) {
            vm.filterClaimByInsuranceProvider = [];
            _.forEach(vm.filterClaim, function (data) {
                if (data.insuranceproviderid.contactid == selectedInsuranceProvider.insuranceproviderid.contactid) {
                    vm.filterClaimByInsuranceProvider.push(data);
                }
            });
        }

        // Get Service Provider According Physician
        function filterMedicalServiceProviderByPhysician(selectedPhysician) {
            vm.allMedicalProvidersAssociatePhysician = [];
            _.forEach(vm.associateMedicalContacts, function (contact) {
                if (contact.medicaltreatmentid == selectedPhysician.medicaltreatmentid && contact.providerid != "") {
                    vm.allMedicalProvidersAssociatePhysician.push(contact.providerid);
                }
            });
        }

        /**
         * get filter medical provider
         */
        function filterMedicalProvider(plaintiff, medicalFilterType) {
            var tempContacts = [],
                allcontact = [];
            vm.associateContacts = [];
            _.forEach(plaintiff, function (party) {
                _.forEach(vm.associateMedicalContacts, function (contact) {
                    if (contact.plaintiffid.contactid == party.contactid.contactid) {
                        tempContacts.push(contact);
                    }
                });
            });
            vm.medicalInfoProvider = _.filter(tempContacts, function (currentItem, index) {
                return currentItem.servicestartdate != "";
            });
            vm.physicianMedicalList = _.pluck(tempContacts, 'physicianid');
            vm.providerMedicalList = _.pluck(tempContacts, 'providerid');
            switch (medicalFilterType) {
                case "all":
                    var physicians = _.pluck(tempContacts, 'physicianid');
                    var providers = _.pluck(tempContacts, 'providerid');
                    _.forEach(physicians, function (key) {
                        (key != "") ? key.provider_type = "physician" : '';
                    });
                    _.forEach(providers, function (key) {
                        (key != "") ? key.provider_type = "provider" : '';
                    });
                    allcontact = physicians.concat(providers);
                    break;
                case "physican":
                    allcontact = _.pluck(tempContacts, 'physicianid');
                    break;
                case "provider":
                    allcontact = _.pluck(tempContacts, 'providerid');
                    break;
            }

            _.forEach(allcontact, function (contactKey) {
                (contactKey != "") ? vm.associateContacts.push(contactKey) : '';
            });

            vm.newServiceProviderMsg = (vm.associateContacts.length == 0) ? true : false;
            templateHelper.setNamePropForserviceprovider(vm.associateContacts);
        }

        /**
         * function to populate dropdown list with associated service 
         * medicalFlag-refer to medical provider is define in DOM or not
         * provider when plaintiff is selected
         */
        function getServiceContactsList(plaintiffs, medicalFlag) {
            if (medicalFlag == 20) {
                return;
            }
            var selectedPlaintiffs = [];
            vm.associateContacts = [];
            (!Array.isArray(plaintiffs)) ? selectedPlaintiffs.push(JSON.parse(plaintiffs)) : selectedPlaintiffs = plaintiffs;
            if (vm.TemplateModelInfo.typeId == 17 || vm.TemplateModelInfo.typeId == 23 || vm.TemplateModelInfo.typeId == 25 || vm.TemplateModelInfo.typeId == 26 || vm.TemplateModelInfo.typeId == 128 || vm.TemplateModelInfo.typeId == 129) {
                getInsContactsList(selectedPlaintiffs);
            }
            vm.TemplateModelInfo.insuranceproviderid = undefined;
            if (vm.option == 'PlaintiffService') {
                var linkedcontacts = [];
                linkedcontacts = templateHelper.setLinkedContacts(selectedPlaintiffs,
                    vm.associateContactsList, vm.TemplateModelInfo.typeId);
                /*remove previous selected value if no linked contacts found */
                if (utils.isEmptyVal(linkedcontacts)) { vm.TemplateModelInfo.insuranceproviderid = undefined; }
                vm.associateContacts = linkedcontacts;
                vm.newServiceProviderMsg = (medicalFlag) ? (vm.associateContacts.length == 0) ? true : false : false;
                /*Show message if no associate contact found*/
                switchMessageFlags(vm.TemplateModelInfo.typeId);
            }

        }

        /**
         * merge medical and insurance provider 
         */
        function addInsuranceProvider() {
            vm.insuranceFilterOnPlaintiff = [];
            _.forEach(vm.insuranceContactList, function (currentItem) {
                if (currentItem.insuranceproviderid != "" && currentItem.insuranceproviderid != undefined) {
                    currentItem.insuranceproviderid.type = "Insurance Provider";
                    vm.insuranceFilterOnPlaintiff.push(currentItem.insuranceproviderid);
                }
            });
            _.forEach(vm.associateContactsList, function (currentItem) {
                if (currentItem.providerid != "" && currentItem.providerid != undefined) {
                    currentItem.providerid.type = "Service Provider";
                    vm.insuranceFilterOnPlaintiff.push(currentItem.providerid);
                }
            });
            if (utils.isNotEmptyVal(vm.otherPartydata)) {
                _.forEach(vm.otherPartydata, function (currentItem) {
                    if (currentItem.contactrolename == "Physician" && currentItem.contact_type == "Local") {
                        currentItem.type = "Physician";
                        vm.insuranceFilterOnPlaintiff.push(currentItem)
                    }
                });
            }
            templateHelper.setContactName(vm.insuranceFilterOnPlaintiff);



        }

        function switchMessageFlags(typeId) {
            /*To update noServiceProviderMsg flag*/
            if (utils.isEmptyVal(vm.associateContacts) && utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs)) {
                vm.physicianMsg = (typeId == 21 || typeId == 16 || typeId == 131) ? true : false;
                vm.hospitalMsg = (typeId == 22) ? true : false;
                vm.serviceProviderMsg = (typeId == 8 || typeId == 9 || typeId == 20 || typeId == 28) ? true : false;
            } else {
                vm.physicianMsg = false;
                vm.hospitalMsg = false;
                vm.serviceProviderMsg = false;
            }
        }

        /**
         * filter insurance provider data based on plaintiff
         */
        function getfilterInsuranceContacts(plaintiffOrdefendant) {
            var linkedcontacts = [];
            var insurance = [];
            var plaintiffOrdefendantObj = [];
            vm.TemplateModelInfo.insuranceid = undefined;
            vm.TemplateModelInfo.newinsuranceproviderid = undefined;
            vm.TemplateModelInfo.newadjusterproviderid = undefined;
            vm.filterAdjusterContacts = [];
            if (typeof plaintiffOrdefendant != "object") {
                plaintiffOrdefendantObj.push(JSON.parse(plaintiffOrdefendant));
            } else {
                plaintiffOrdefendantObj = plaintiffOrdefendant;
            }
            _.forEach(plaintiffOrdefendantObj, function (plaintiffOrdefendant) {
                _.forEach(vm.insuranceContactList, function (inscontact) {

                    if (inscontact.associated_party_id.contactid == plaintiffOrdefendant.contactid.contactid && utils.isNotEmptyVal(inscontact.insuranceprovider_address)) {
                        linkedcontacts.push(inscontact.insuranceprovider_address);

                        insurance.push({
                            'insuranceid': inscontact.insuranceid,
                            'insurance_adjuster_contact_name': (utils.isEmptyVal(inscontact.adjusterid.firstname) && utils.isEmptyVal(inscontact.adjusterid.lastname)) ? '-' : inscontact.adjusterid.firstname + " " + inscontact.adjusterid.lastname,
                            'insurance_provider_contact_name': inscontact.insuranceprovider_address.firstname + " " + inscontact.insuranceprovider_address.lastname
                        });
                    }
                });
            });
            /*remove previous selected value if no linked contacts found */
            if (utils.isEmptyVal(linkedcontacts)) {
                vm.TemplateModelInfo.newinsuranceproviderid = undefined;
            }
            if (utils.isEmptyVal(insurance)) {
                vm.TemplateModelInfo.insuranceid = undefined;
            }
            vm.filterInsuranceContacts = linkedcontacts;
            vm.filterInsurances = insurance;
            /*To update noInsuranceMsg flag*/
            vm.plaintiffDefendantInsuMsg = (utils.isEmptyVal(vm.filterInsuranceContacts)) ? true : false;
            vm.plaintiffInsMsg = ((utils.isEmptyVal(vm.filterInsuranceContacts)) && utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs)) ? true : false;
            vm.defendentInsMsg = ((utils.isEmptyVal(vm.filterInsuranceContacts)) && utils.isNotEmptyVal(vm.TemplateModelInfo.defendants)) ? true : false;
        }



        /* function to get associated insurance contacts with defendant */
        function getInsContactsList(defendants) {
            var selectedDefendants = [];
            vm.associateContacts = [];
            //vm.TemplateModelInfo.insuranceproviderid =undefined;
            (!Array.isArray(defendants)) ? selectedDefendants.push(JSON.parse(defendants)) : selectedDefendants = defendants;

            if (vm.option == 'PlaintiffDefendant' || vm.option == 'Plaintiff') {
                var linkedcontacts = [];
                var defendantsObj = [];
                if (typeof defendants != "object") {
                    defendantsObj.push(JSON.parse(defendants));
                } else {
                    defendantsObj = defendants;
                }

                if (vm.TemplateModelInfo.template_code == 'DLT08' || vm.TemplateModelInfo.template_code == 'DLT12') {
                    if (vm.TemplateModelInfo.typeId == 25 || vm.TemplateModelInfo.typeId == 26 || vm.TemplateModelInfo.typeId == 128) {
                        _.forEach(defendantsObj, function (defendant) {
                            _.forEach(vm.insuranceContactList, function (inscontact) {
                                if (inscontact.associated_party_id.contactid == defendant.contactid.contactid && utils.isNotEmptyVal(inscontact.insuranceprovider_address) && inscontact.insurancetype == 'No-Fault' && utils.isNotEmptyVal(inscontact.contact_name)) {
                                    linkedcontacts.push(inscontact.insuranceprovider_address);
                                }
                            });
                        });
                    }
                } else if (vm.TemplateModelInfo.typeId == 25 || vm.TemplateModelInfo.typeId == 26 || vm.TemplateModelInfo.typeId == 128) {
                    _.forEach(defendantsObj, function (defendant) {
                        _.forEach(vm.insuranceContactList, function (inscontact) {
                            if (inscontact.associated_party_id.contactid == defendant.contactid.contactid && utils.isNotEmptyVal(inscontact.insuranceprovider_address)) {
                                linkedcontacts.push(inscontact.insuranceprovider_address);
                            }
                        });
                    });
                } else {
                    _.forEach(defendantsObj, function (defendant) {
                        _.forEach(vm.insuranceContactList, function (inscontact) {
                            if (inscontact.associated_party_id.contactid == defendant.contactid.contactid && utils.isNotEmptyVal(inscontact.insuranceprovider_address)) {
                                linkedcontacts.push(inscontact.insuranceprovider_address);
                            }
                        });
                    });
                }

                /*remove previous selected value if no linked contacts found */
                if (utils.isEmptyVal(linkedcontacts)) {
                    vm.TemplateModelInfo.insuranceproviderid = undefined;
                    vm.TemplateModelInfo.insuranceCompany = undefined;
                }
                vm.associateContacts = linkedcontacts;

                /*To update noInsuranceMsg flag*/
                if (vm.TemplateModelInfo.typeId == 25 || vm.TemplateModelInfo.typeId == 26 || vm.TemplateModelInfo.typeId == 128) {
                    vm.plaintiffInsMsg = ((utils.isEmptyVal(vm.associateContacts)) && utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs)) ? true : false;
                } else {
                    vm.insuranceMsg = ((utils.isEmptyVal(vm.associateContacts)) && (utils.isNotEmptyVal(vm.TemplateModelInfo.defendants) || utils.isNotEmptyVal(vm.TemplateModelInfo.plaintiffs))) ? true : false;
                }

            }
        }

        /**
         * set all paralegal in grouping
         */
        function setAllParalegalGroup(paralegals) {
            var allParalegal = [];
            _.forEach(paralegals.attorney, function (attorney) {
                if (utils.isNotEmptyVal(attorney)) {
                    attorney.type = "Attorney";
                    attorney.type2 = "Paralegal_attorney";
                }
            });
            paralegals.attorney.sort(function (a, b) {
                return a.name == b.name ? 0 : a.name < b.name ? -1 : 1;
            });
            _.forEach(paralegals.paralegal, function (paralegal) {
                if (utils.isNotEmptyVal(paralegal)) {
                    paralegal.type = "Paralegal";
                    paralegal.type2 = "Paralegal_attorney";
                }
            });
            paralegals.paralegal.sort(function (a, b) {
                return a.name == b.name ? 0 : a.name < b.name ? -1 : 1;
            });
            _.forEach(paralegals.partner, function (partner) {
                if (utils.isNotEmptyVal(partner)) {
                    partner.type = "Partner";
                    partner.type2 = "Partner";
                }
            });
            paralegals.partner.sort(function (a, b) {
                return a.name == b.name ? 0 : a.name < b.name ? -1 : 1;
            });
            _.forEach(paralegals.staffs, function (staffs, index) {
                if (utils.isNotEmptyVal(staffs)) {
                    staffs.type = "Staffs";
                    staffs.type2 = "Staffs";
                }
            });
            /**
             * remove Lexvia service name from paralegal list
             */
            paralegals.staffs = _.filter(paralegals.staffs, function (item) {
                return item.uid != "0" && item.name != "Lexvia";
            });
            paralegals.staffs.sort(function (a, b) {
                return a.name == b.name ? 0 : a.name < b.name ? -1 : 1;
            });

            allParalegal = (paralegals.attorney).concat(paralegals.paralegal).concat(paralegals.partner).concat(paralegals.staffs)

            if (utils.isNotEmptyVal(allParalegal)) {
                templateHelper.setNamePropForParalegals(allParalegal);
            }

            return allParalegal;
        }

        /**
         * other party contact list
         */
        function otherPartyContact() {
            vm.otherPartyContact = [];
            templatestDatalayer.getMatterContacts(vm.TemplateModelInfo.matterId)
                .then(function (response) {
                    var data = response.data;
                    data.oparty.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    });

                    vm.otherPartyContact = data.oparty;

                    _.forEach(vm.otherPartyContact, function (currentItem, index) {
                        if (currentItem.contactroleid == "8") {
                            vm.filterOtherPartyData.push(currentItem);
                        }
                        if (currentItem.contactroleid == "3") {
                            vm.filterOtherPartyHospital.push(currentItem);
                        }
                        if (currentItem.contactroleid == "1") {
                            currentItem.new_contact_name = currentItem.fname + ' ' + (utils.isNotEmptyVal(currentItem.mname) ? currentItem.mname : '') + ' ' + (utils.isNotEmptyVal(currentItem.lname) ? currentItem.lname : '');
                            vm.filterOtherPartySpouse.push(currentItem);
                        }
                    });



                    if (utils.isNotEmptyVal(vm.otherPartyContact)) {
                        templateHelper.setNamePropForContacts(vm.otherPartyContact);
                    }
                }, function (error) {
                    notificationService.error('Other Party contact not loaded');
                });
        }

        /**
         * get matter all contact list
         */
        function getMatterAllContactList() {
            vm.matterAllContacts = [];
            vm.allMatterContacts = [];
            vm.allContacts = [];
            vm.matterContactsForDefault = [];
            vm.insurance_providerList = [];
            vm.hospitalContacts = [];
            templatestDatalayer.getMatterContacts(vm.TemplateModelInfo.matterId)
                .then(function (response) {
                    var data = response.data;
                    _.forEach(data.defendant, function (defendant) {
                        utils.isNotEmptyVal(defendant) ? defendant.type = "Defendant" : "";
                    });
                    data.defendant.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.lien_adjuster, function (lienAdjuster) {
                        utils.isNotEmptyVal(lienAdjuster) ? lienAdjuster.type = "Lien Adjuster" : "";
                    });
                    data.lien_adjuster.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.lien_holder, function (lienHolder) {
                        utils.isNotEmptyVal(lienHolder) ? lienHolder.type = "Lien Holder" : "";
                    })
                    data.lien_holder.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.lien_insurance_provider, function (lienInsProvider) {
                        utils.isNotEmptyVal(lienInsProvider) ? lienInsProvider.type = "Lien Insurance Provider" : "";
                    })
                    data.lien_insurance_provider.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.medicalbills_service_provider, function (medBillServiceProvider) {
                        utils.isNotEmptyVal(medBillServiceProvider) ? medBillServiceProvider.type = "Medical Bills Service Provider" : "";
                    })
                    data.medicalbills_service_provider.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.physician, function (physician) {
                        utils.isNotEmptyVal(physician) ? physician.type = "Physician" : "";
                    })
                    data.physician.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.service_provider, function (serviceProvider) {
                        utils.isNotEmptyVal(serviceProvider) ? serviceProvider.type = "Service Provider" : "";
                    })
                    data.service_provider.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.oparty, function (otherParty) {
                        utils.isNotEmptyVal(otherParty) ? otherParty.type = "Other Party" : "";
                    });
                    data.oparty.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.insurance_adjuster, function (insAdjuster) {
                        utils.isNotEmptyVal(insAdjuster) ? insAdjuster.type = "Insurance Adjuster" : "";
                    });
                    data.insurance_adjuster.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.insurance_provider, function (insProvider) {
                        utils.isNotEmptyVal(insProvider) ? insProvider.type = "Insurance Provider" : "";
                    });
                    data.insurance_provider.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    _.forEach(data.insured_party, function (insParty) {
                        utils.isNotEmptyVal(insParty) ? insParty.type = "Insurance Party" : "";
                    });
                    data.insured_party.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    vm.insured_party = data.insured_party;
                    _.forEach(data.plaintiff, function (insPlaintiff) {
                        utils.isNotEmptyVal(insPlaintiff) ? insPlaintiff.type = "Plaintiff" : "";
                    });
                    data.plaintiff.sort(function (a, b) {
                        return a.fname == b.fname ? 0 : a.fname < b.fname ? -1 : 1;
                    })
                    var otherPartyListofPhy = [];
                    var contactForDefault = angular.copy(data.oparty);
                    _.forEach(contactForDefault, function (item) {
                        if (vm.TemplateModelInfo.template_code == "DLT13" || vm.TemplateModelInfo.template_code == "DLT05") {
                            if (item.contactroleid == 2 || item.contactroleid == 3 || item.contactroleid == 4 || item.contactroleid == 5) {
                                otherPartyListofPhy.push(item);
                            }
                        }
                        if (vm.TemplateModelInfo.template_code == "DLT10" || vm.TemplateModelInfo.template_code == "DLT08" || vm.TemplateModelInfo.template_code == "DLT12" || vm.TemplateModelInfo.template_code == "DLT02" || vm.TemplateModelInfo.template_code == "F1118_25" || vm.TemplateModelInfo.template_code == "F1074_18" || vm.TemplateModelInfo.template_code == "F1429_67" || vm.TemplateModelInfo.template_code == "F1074_23" || vm.TemplateModelInfo.template_code == "F1074_24" || vm.TemplateModelInfo.template_code == "F1153_1400" || vm.TemplateModelInfo.template_code == "F1429_73" || vm.TemplateModelInfo.template_code == "F1118_30" || vm.TemplateModelInfo.template_code == "F1118_31") {
                            if (item.contactroleid == 4 || item.contactroleid == 5) {
                                otherPartyListofPhy.push(item);
                            }
                        }
                        // if (vm.TemplateModelInfo.template_code == "DLT07") {
                        //     if (item.contactroleid == 3) {
                        //         otherPartyListofPhy.push(item);
                        //     }
                        // }

                    });

                    //US#15409 - Medical providers from bill, info and other party
                    var medProviderForDefault = [];
                    if (vm.TemplateModelInfo.template_code == "DLT07") {
                        _.forEach(data.oparty, function (item) {
                            if (item.contactroleid == 3) {
                                medProviderForDefault.push(item);
                            }
                        });
                        medProviderForDefault = medProviderForDefault.concat(data.service_provider).concat(data.medicalbills_service_provider)
                        medProviderForDefault = _.uniq(medProviderForDefault, 'contactid')
                    }

                    vm.matterAllContacts = (data.defendant).concat(data.oparty).concat(data.insurance_adjuster).concat(data.insurance_provider).concat(data.plaintiff).concat(data.insured_party)
                    if (utils.isNotEmptyVal(vm.matterAllContacts)) {
                        templateHelper.setNamePropForContacts(vm.matterAllContacts);
                        vm.noAllContactsMsg = false;
                    } else {
                        vm.noAllContactsMsg = true;
                    }
                    vm.allMatterContacts = (data.defendant).concat(data.oparty).concat(data.insurance_adjuster).concat(data.insurance_provider).concat(data.plaintiff).concat(data.insured_party).concat(data.lien_adjuster).concat(data.lien_holder).concat(data.lien_insurance_provider).concat(data.medicalbills_service_provider).concat(data.physician).concat(data.service_provider)
                    if (utils.isNotEmptyVal(vm.allMatterContacts)) {
                        templateHelper.setNamePropForContacts(vm.allMatterContacts);
                        vm.noAllContactsMsg = false;
                    } else {
                        vm.noAllContactsMsg = true;
                    }
                    vm.allContacts = (otherPartyListofPhy).concat(data.insurance_provider).concat(data.medicalbills_service_provider).concat(data.physician).concat(data.service_provider)
                    if (utils.isNotEmptyVal(vm.allContacts)) {
                        templateHelper.setNamePropForContacts(vm.allContacts);
                        vm.noAllContactsMsg = false;
                    } else {
                        vm.noAllContactsMsg = true;
                    }
                    vm.matterContactsForDefault = (data.defendant).concat(data.oparty).concat(data.insurance_adjuster).concat(data.insurance_provider);
                    if (utils.isNotEmptyVal(vm.matterContactsForDefault)) {
                        templateHelper.setNamePropForContacts(vm.matterContactsForDefault);
                        vm.noAllContactsMsg = false;
                    } else {
                        vm.noAllContactsMsg = true;
                    }
                    vm.insurance_providerList = (otherPartyListofPhy).concat(data.insurance_provider);
                    if (utils.isNotEmptyVal(vm.insurance_providerList)) {
                        templateHelper.setNamePropForContacts(vm.insurance_providerList);
                        vm.noAllContactsMsg = false;
                    } else {
                        vm.noAllContactsMsg = true;
                    }
                    vm.hospitalContacts = medProviderForDefault;
                    if (utils.isNotEmptyVal(vm.hospitalContacts)) {
                        templateHelper.setNamePropForContacts(vm.hospitalContacts);
                        vm.noAllContactsMsg = false;
                    } else {
                        vm.noAllContactsMsg = true;
                    }
                }, function (error) {
                    notificationService.error('Contacts not loaded');
                });
        }

        /* function to get associated insurance contacts with defendant */
        function getMatterContactList() {
            vm.matterContactId = "";
            templatestDatalayer.getMatterContacts(vm.TemplateModelInfo.matterId)
                .then(function (response) {
                    var data = response.data;
                    _.forEach(data.defendant, function (defendant) {
                        utils.isNotEmptyVal(defendant) ? defendant.type = "Defendant" : "";
                    });
                    _.forEach(data.oparty, function (otherParty) {
                        utils.isNotEmptyVal(otherParty) ? otherParty.type = "Other Party" : "";
                    });
                    _.forEach(data.insurance_adjuster, function (insAdjuster) {
                        utils.isNotEmptyVal(insAdjuster) ? insAdjuster.type = "Insurance Adjuster" : "";
                    });
                    _.forEach(data.insurance_provider, function (insProvider) {
                        utils.isNotEmptyVal(insProvider) ? insProvider.type = "Insurance Provider" : "";
                    });

                    vm.matterContacts = (data.defendant).concat(data.oparty).concat(data.insurance_adjuster).concat(data.insurance_provider)
                    // vm.matterContacts = (vm.matterContacts).concat(data.insurance_adjuster);
                    // vm.matterContacts = (vm.matterContacts).concat(data.insurance_provider);

                    if (utils.isNotEmptyVal(vm.matterContacts)) {
                        templateHelper.setNamePropForContacts(vm.matterContacts);
                        vm.noContactsMsg = false;
                    }
                }, function (error) {
                    notificationService.error('Contacts not loaded');
                });
        }

        /**
         * grouping all paralegal
         */
        function groupContacts(contact) {
            if (utils.isNotEmptyVal(contact.contactid)) {
                _.forEach(vm.contactType, function (contactType) {
                    if (contactType == contact.type) {
                        vm.groupBy = contactType;
                    }
                })
                return vm.groupBy;
            }
        }

        /**
         * manage ime events for multiple physician
         */
        function manageIMEEvent(event, eventNo) {
            var eventCallIME1 = vm.TemplateModelInfo.imeeventid1;
            var eventCallIME2 = vm.TemplateModelInfo.imeeventid2;
            var eventCallIME3 = vm.TemplateModelInfo.imeeventid3;
            var imeEvent1One = vm.AllEvents1;
            var imeEvent1Two = vm.AllEvents2;
            var imeEvent1Three = vm.AllEvents3;
            vm.AllEvents1 = _.filter(vm.AllEventsOriginal1, function (current, index) {
                return (current.id != eventCallIME2 && current.id != eventCallIME3);
            });
            vm.AllEvents2 = _.filter(vm.AllEventsOriginal2, function (current, index) {
                return (current.id != eventCallIME1 && current.id != eventCallIME3);
            });
            vm.AllEvents3 = _.filter(vm.AllEventsOriginal3, function (current, index) {
                return (current.id != eventCallIME1 && current.id != eventCallIME2);
            });
        }

        /**
         * grouping all paralegal
         */
        function groupParalegals(contact) {
            if (utils.isNotEmptyVal(contact.uid)) {
                _.forEach(vm.paralegalType, function (paralegalType) {
                    if (paralegalType == contact.type) {
                        vm.groupBy = paralegalType;
                    }
                });
                return vm.groupBy;
            }
        }

        function groupFirmUsers(contact) {
            if (utils.isNotEmptyVal(contact.user_id)) {
                _.forEach(vm.firmUserType, function (userType) {
                    if (userType == contact.user_role) {
                        vm.groupBy = userType;
                    }
                });
                return vm.groupBy;
            }
        }

        /**
         * matter lien holders
         */
        function getMatterLiens() {
            matterDetailsService.getLiensInfo_BEFORE_OFF_DRUPAL(vm.TemplateModelInfo.matterId, 'all')
                .then(function (response) {
                    vm.matterLiens = response.data;
                    vm.lienAmounts = [];
                    /** Added All matter liens */

                    _.forEach(vm.matterLiens.liens, function (contact) {
                        if (contact.lienholdername != "" && utils.isNotEmptyVal(contact.lienholdername)) {
                            vm.AllMatterLiens.push(contact);
                        }
                        templateHelper.setLienHolderInsuranceProvider(vm.AllMatterLiens);
                    });
                    _.forEach(vm.matterLiens.liens, function (currentItem) {
                        vm.liensIds.push(currentItem);
                    });
                    if (vm.TemplateModelInfo.template_code == "F1143_133") {
                        _.forEach(vm.matterLiens.liens, function (currentItem) {
                            if (utils.isNotEmptyVal(currentItem.lienamount)) {
                                vm.lienAmounts.push({ 'lien_id': currentItem.lienid, 'lien_amount': currentItem.lienamount });
                            }
                        });
                    }
                }, function (error) {
                    notificationService.error('Unable to load matter liens!');
                });

        }

        /**
         * Params (Liens): selected lien holder
         */
        vm.filterLinesHolderInsuranceProvider = function (liens) {
            vm.linesHolderInsuranceProvider = [];
            if (liens.insuranceproviderid != undefined && utils.isNotEmptyVal(liens.insuranceproviderid)) {
                vm.linesHolderInsuranceProvider.push(liens.insuranceproviderid);
                templateHelper.setNamePropForserviceprovider(vm.linesHolderInsuranceProvider);
            }
        }

        /**
         * liens filter on plaintiff selection
         */
        function filterPlaintiffLiens(selectedPlaintiff) {
            vm.TemplateModelInfo.lienholderid = undefined;
            var selectedPlaintiffs = [];
            vm.plaintiffliens = [];
            selectedPlaintiffs.push(selectedPlaintiff);
            _.forEach(selectedPlaintiffs, function (party) {
                _.forEach(vm.matterLiens.liens, function (contact) {
                    if (contact.plaintiffid.contactid == party.contactid.contactid && utils.isNotEmptyVal(contact.lienholdername)) {
                        vm.plaintiffliens.push(contact);
                    }
                });
            });
            if (vm.plaintiffliens.length > 0) {
                templateHelper.setLienHolderInsuranceProvider(vm.plaintiffliens);
            }
        }

        /**
         * set params for specific template
         */
        function setParams(templateCode, templateId, params) {
            var resetParams = {};
            switch (templateCode) {
                case "F1_36":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_37":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_38":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_39":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_40":
                    resetParams = {

                        matterid: params.matterid,
                        userid: params.plaintiff.plaintiffid,
                        insuranceproviderid: params.newinsuranceproviderid.contactid,
                        mattercontactid: params.mattercontactid.contactid,
                        contactType: params.mattercontactid.contact_type,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_41":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        insuranceproviderid: params.newinsuranceproviderid.contactid,
                        mattercontactid: params.mattercontactid.contactid,
                        contactType: params.mattercontactid.contact_type,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_42":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_43":
                    resetParams = {

                        matterid: params.matterid,
                        userid: angular.isDefined(params.defendant) ? params.defendant.defendantid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        paralegalid: params.paralegalid,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        defendant2: params.insured_defendant.defendantid,
                        defendant3: params.operator_defendant.defendantid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_44":
                    resetParams = {

                        matterid: params.matterid,
                        userid: angular.isDefined(params.defendant) ? params.defendant.defendantid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        paralegalid: params.paralegalid,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        defendant2: params.insured_defendant.defendantid,
                        defendant3: params.operator_defendant.defendantid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_45":
                    resetParams = {

                        matterid: params.matterid,
                        paralegalid: params.paralegalid,
                        attorneyid: params.primarydefedantid,
                        defendantattorneyids: params.secondarydefendantid,
                        eventid: params.eventid,
                        defendants: "all",
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_46":
                    resetParams = {

                        matterid: params.matterid,
                        paralegalid: params.paralegalid,
                        attorneyid: params.primarydefedantid,
                        defendantattorneyids: params.secondarydefendantid,
                        eventid: params.eventid,
                        defendants: "all",
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_47":
                    resetParams = {

                        matterid: params.matterid,
                        userid: params.defendant.defendantid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_48":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_49":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_50":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_51":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        eventid: params.eventid,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_52":
                    resetParams = {

                        matterid: params.matterid,
                        userid: params.plaintiff.plaintiffid, // userid key refer plaintiff id
                        paralegalid: params.paralegalid,
                        contactid: params.serviceproviderid, // contactid key refer service provider id
                        showsocialsecuritynumber: params.showsocialsecuritynumber,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_53":
                    resetParams = {

                        matterid: params.matterid,
                        userid: params.plaintiff.plaintiffid, // userid key refer plaintiff id
                        paralegalid: params.paralegalid,
                        contactid: params.serviceproviderid, // contactid key refer service provider id
                        showsocialsecuritynumber: params.showsocialsecuritynumber,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_54":
                    resetParams = {

                        matterid: params.matterid,
                        userid: params.plaintiff.plaintiffid, // userid key refer plaintiff id
                        paralegalid: params.paralegalid,
                        contactid: params.serviceproviderid, // contactid key refer service provider id
                        showsocialsecuritynumber: params.showsocialsecuritynumber,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_55":
                    resetParams = {

                        matterid: params.matterid,
                        userid: params.plaintiff.plaintiffid, // userid key refer plaintiff id
                        paralegalid: params.paralegalid,
                        contactid: params.serviceproviderid, // contactid key refer service provider id
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_56":
                    resetParams = {

                        matterid: params.matterid,
                        userid: params.plaintiff.plaintiffid, // userid key refer plaintiff id
                        paralegalid: params.paralegalid,
                        contactid: params.serviceproviderid, // contactid key refer service provider id
                        isphysician: params.isphysician,
                        showsocialsecuritynumber: params.showsocialsecuritynumber,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_58":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        expenseid: params.expenseproviderid,
                        mattercontactid: params.mattercontactid.contactid,
                        contactType: params.mattercontactid.contact_type,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_57":
                    resetParams = {

                        matterid: params.matterid,
                        plaintiffid: params.plaintiff.plaintiffid,
                        paralegalid: params.paralegalid,
                        expenseid: params.expenseproviderid,
                        mattercontactid: params.mattercontactid.contactid,
                        contactType: params.mattercontactid.contact_type,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_60":
                    resetParams = {

                        matterid: params.matterid,
                        contactid: (params.pd_contact != undefined) ? params.pd_contact.contactid.contactid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        adjusterid: angular.isDefined(params.newadjusterproviderid) ? params.newadjusterproviderid.contactid : undefined,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_61":
                    resetParams = {

                        matterid: params.matterid,
                        contactid: (params.pd_contact != undefined) ? params.pd_contact.contactid.contactid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        adjusterid: angular.isDefined(params.newadjusterproviderid) ? params.newadjusterproviderid.contactid : undefined,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_62":
                    resetParams = {

                        matterid: params.matterid,
                        contactid: (params.pd_contact != undefined) ? params.pd_contact.contactid.contactid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        plaintiffid1: angular.isDefined(params.plaintiff2) ? params.plaintiff2.plaintiffid : undefined,
                        physicianid: angular.isDefined(params.physicianproviderid) ? params.physicianproviderid : undefined,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        adjusterid: angular.isDefined(params.newadjusterproviderid) ? params.newadjusterproviderid.contactid : undefined,
                        paralegalid: params.paralegalid,
                        eventid: params.imeeventid,
                        noofmiles: params.noofmiles,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_63":
                    resetParams = {

                        matterid: params.matterid,
                        contactid: (params.pd_contact != undefined) ? params.pd_contact.contactid.contactid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        physicianid: angular.isDefined(params.physicianproviderid) ? params.physicianproviderid.contactid : undefined,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        adjusterid: angular.isDefined(params.newadjusterproviderid) ? params.newadjusterproviderid.contactid : undefined,
                        paralegalid: params.paralegalid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_64":
                    resetParams = {

                        matterid: params.matterid,
                        contactid: (params.pd_contact != undefined) ? params.pd_contact.contactid.contactid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        physicianid: angular.isDefined(params.physicianproviderid) ? params.physicianproviderid.contactid : undefined,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        adjusterid: angular.isDefined(params.newadjusterproviderid) ? params.newadjusterproviderid.contactid : undefined,
                        paralegalid: params.paralegalid,
                        eventid: params.imeeventid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_65":
                    resetParams = {

                        matterid: params.matterid,
                        contactid: (params.pd_contact != undefined) ? params.pd_contact.contactid.contactid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        paralegalid: params.paralegalid,
                        medicalbillid: angular.isDefined(params.medicalbillproviderid) ? params.medicalbillproviderid.medicalbillid : undefined,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        serviceproviderid: angular.isDefined(params.medicalbillproviderid) ? params.medicalbillproviderid.contactid : undefined,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_66":
                    resetParams = {

                        matterid: params.matterid,
                        contactid: (params.pd_contact != undefined) ? params.pd_contact.contactid.contactid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        paralegalid: params.paralegalid,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_67":
                    resetParams = {

                        matterid: params.matterid,
                        contactid: (params.pd_contact != undefined) ? params.pd_contact.contactid.contactid : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        paralegalid: params.paralegalid,
                        adjusterid: angular.isDefined(params.newadjusterproviderid) ? params.newadjusterproviderid.contactid : undefined,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_68":
                    resetParams = {
                        matterid: params.matterid,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        physicianid: angular.isDefined(params.physicianproviderid) ? params.physicianproviderid.contactid : undefined,
                        paralegalid: params.paralegalid,
                        eventid: params.imeeventid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_69":
                    resetParams = {
                        matterid: params.matterid,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        physicianid: angular.isDefined(params.physicianproviderid) ? params.physicianproviderid.contactid : undefined,
                        paralegalid: params.paralegalid,
                        mattercontactid: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contactid : undefined,
                        contactType: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_type : undefined,
                        eventid: params.imeeventid,
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_70":
                    resetParams = {
                        matterid: params.matterid,
                        plaintiffid: angular.isDefined(params.plaintiff) ? params.plaintiff.plaintiffid : undefined,
                        insuranceproviderid: angular.isDefined(params.newinsuranceproviderid) ? params.newinsuranceproviderid.contactid : undefined,
                        paralegalid: params.paralegalid,
                        eventidlist: params.event.toString(),
                        physicianidlist: params.physician.toString(),
                        templateid: templateId,
                        templatetype: params.templatetype
                    }
                    break;
                case "F1_71":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        contactId: contactID,
                        contactType: contactType,
                        insuranceid: (params.insuranceclaimnumber != undefined) ? parseInt(params.insuranceclaimnumber.insuranceid) : '',
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_72":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        contactId: contactID,
                        contactType: contactType,
                        insuranceid: (params.insuranceclaimnumber != undefined) ? parseInt(params.insuranceclaimnumber.insuranceid) : '',
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_73":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        contactId: contactID,
                        contactType: contactType,
                        insuranceid: (params.insuranceclaimnumber != undefined) ? parseInt(params.insuranceclaimnumber.insuranceid) : '',
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_74":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        contactId: contactID,
                        contactType: contactType,
                        insuranceid: (params.insuranceclaimnumber != undefined) ? parseInt(params.insuranceclaimnumber.insuranceid) : '',
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_75":
                    resetParams = {
                        templateId: parseInt(templateId),
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_76":
                    resetParams = {
                        templateId: parseInt(templateId),
                        lienholderid: (params.lienholderid != undefined) ? parseInt(params.lienholderid) : undefined,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_77":
                    resetParams = {
                        templateId: parseInt(templateId),
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : undefined,
                        insuranceid: angular.isDefined(params.insuranceid) ? parseInt(params.insuranceid.insuranceid) : undefined,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_78":
                    resetParams = {
                        templateId: parseInt(templateId),
                        insuranceid: angular.isDefined(params.insuranceid) ? parseInt(params.insuranceid.insuranceid) : undefined,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_80":
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_81":
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        templateId: parseInt(templateId),
                        matterContactId: angular.isDefined(params.otherpartycontactid) ? parseInt(params.otherpartycontactid.contactid) : undefined,
                        contactType: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_type : undefined,
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_83":
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        eventId: parseInt(params.eventid),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_84":
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        eventId: parseInt(params.eventid),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_85":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        leadAttorneyId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_86":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        leadAttorneyId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        insuranceid: (params.insuredpartyid != undefined) ? parseInt(params.insuredpartyid) : '',
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_87":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        leadAttorneyId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_88":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        leadAttorneyId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_89":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    var paralegal1 = 0;
                    var paralegal2 = 0;
                    var attorney1 = 0;
                    var attorney2 = 0;
                    (params.paralegalid != undefined) ? paralegal1 = parseInt(params.paralegalid) : '';
                    (params.paralegalid2 != undefined) ? paralegal2 = parseInt(params.paralegalid2) : '';
                    (params.attorneyid1 != undefined) ? attorney1 = parseInt(params.attorneyid1) : '';
                    (params.attorneyid2 != undefined) ? attorney2 = parseInt(params.attorneyid2) : '';

                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: [paralegal1, paralegal2],
                        attorneyId: [attorney1, attorney2],
                        managingPartnerId: (params.managing_partner_id != undefined) ? [parseInt(params.managing_partner_id)] : [],
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_31":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_90":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : undefined,
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : undefined,
                        documentId: parseInt(params.captionDocumentId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_91":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : undefined,
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : undefined,
                        documentId: parseInt(params.captionDocumentId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_95":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_96":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        today: moment(new Date()).unix(),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_97":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_98":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        eventId: parseInt(params.eventid),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_99":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_100":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_94":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_101":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        medicalTreatmentId: angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.medicaltreatmentid) : undefined,
                        templateId: templateId,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_102":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        pageToSign: params.page_to_sign,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        eventId: parseInt(params.eventid),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_103":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_105":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        eventId: parseInt(params.eventid),
                        today: params.custom_date,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "EBT-EXECUTED.LET":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        eventId: parseInt(params.eventid),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_107":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        medicalTreatmentId: (params.medicalInfo != undefined) ? parseInt(params.medicalInfo.medicaltreatmentid) : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        hospitalId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : undefined,
                        contactType: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_type : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_108":
                    var plaintiff1 = 0
                    var plaintiff2 = 0;
                    angular.isDefined(params.plaintiff) ? plaintiff1 = parseInt(params.plaintiff.plaintiffid) : '';
                    angular.isDefined(params.plaintiff2) ? plaintiff2 = parseInt(params.plaintiff2.plaintiffid) : '';
                    resetParams = {
                        plaintiffId: [plaintiff1, plaintiff2],
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        templateId: parseInt(templateId),
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_109":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        templateId: parseInt(templateId),
                        hospitalId: angular.isDefined(params.hospitalproviderid) ? [parseInt(params.hospitalproviderid.contactid)] : undefined,
                        contactType: angular.isDefined(params.hospitalproviderid) ? params.hospitalproviderid.contact_type : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_110":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.physicianproviderid) ? [parseInt(params.physicianproviderid.medicaltreatmentid)] : [0],
                        templateId: templateId,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_111":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        templateId: parseInt(templateId),
                        hospitalId: angular.isDefined(params.hospitalproviderid) ? [parseInt(params.hospitalproviderid.contactid)] : undefined,
                        contactType: angular.isDefined(params.hospitalproviderid) ? params.hospitalproviderid.contact_type : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_112":
                    var plaintiff1 = 0
                    var plaintiff2 = 0;
                    angular.isDefined(params.plaintiff) ? plaintiff1 = parseInt(params.plaintiff.plaintiffid) : '';
                    angular.isDefined(params.plaintiff2) ? plaintiff2 = parseInt(params.plaintiff2.plaintiffid) : '';
                    resetParams = {
                        plaintiffId: [plaintiff1, plaintiff2],
                        paralegalId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        templateId: parseInt(templateId),
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_113":
                    resetParams = {
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        uservalue40: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_114":
                    resetParams = {
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        uservalue40: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_115":
                    // var plaintiff1 = 0
                    // var defendant1 = 0;
                    // var defendant2 = 0;
                    // angular.isDefined(params.plaintiff) ? plaintiff1 = parseInt(params.plaintiff.plaintiffid) : '';
                    // angular.isDefined(params.defendant) ? defendant1 = parseInt(params.defendant.defendantid) : '';
                    // angular.isDefined(params.defendant2) ? defendant2 = parseInt(params.defendant2.defendantid) : '';
                    resetParams = {
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantOwnerId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantOperatorId: angular.isDefined(params.defendant2) ? [parseInt(params.defendant2)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue40: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1_116":
                    resetParams = {
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_117":
                    var plaintiff1 = 0
                    var defendant1 = 0;
                    var defendant2 = 0;
                    var tenantId = 0;
                    var tenantType = '';
                    var pathwayType = 1;
                    angular.isDefined(params.plaintiff) ? plaintiff1 = parseInt(params.plaintiff.plaintiffid) : '';
                    angular.isDefined(params.defendant) ? defendant1 = parseInt(params.defendant.defendantid) : '';
                    angular.isDefined(params.defendant2) ? defendant2 = parseInt(params.defendant2.defendantid) : '';
                    //tenant type
                    if (angular.isDefined(params.tenant)) {
                        if (params.tenant.plaintiffid) {
                            tenantId = parseInt(params.tenant.plaintiffid);
                            tenantType = "plaintiff";
                        }
                        if (params.tenant.defendantid) {
                            tenantId = parseInt(params.tenant.defendantid);
                            tenantType = "defendant";
                        }
                    }
                    //set type of premises
                    if (angular.isDefined(params.isPath)) {
                        pathwayType = params.isPath == 1 ? "SIDEWALK" : "PATHWAY";
                    }

                    resetParams = {
                        plaintiffId: [plaintiff1],
                        defendantId: [defendant1, defendant2],
                        tenantId: [tenantId],
                        tenantType: [tenantType],
                        pathwayType: pathwayType,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_118":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_119":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    var pathwayType = 1;
                    var countyPlaintiff = '';
                    var countySignature = '';
                    var specificCondition = '';
                    var countyofAccident = '';
                    var countyofSignature = '';
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    angular.isDefined(params.countyPlaintiff) ? countyPlaintiff = params.countyPlaintiff : '';
                    angular.isDefined(params.specificCondition) ? specificCondition = params.specificCondition : '';
                    angular.isDefined(params.countyofAccident) ? countyofAccident = params.countyofAccident : '';

                    //set type of premises
                    if (angular.isDefined(params.isPath)) {
                        if (params.isPath == 1) {
                            pathwayType = "SIDEWALK"
                        }
                        if (params.isPath == 2) {
                            pathwayType = "PATHWAY";
                        }
                        if (params.isPath == 3) {
                            pathwayType = "FRONT STEP"
                        }
                    }
                    resetParams = {
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : undefined,
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        specificDangerousDefective: specificCondition,
                        uservalue43: angular.isDefined(params.countySignature) ? params.countySignature : 'COUNTY_SIGNATURE',
                        residenceOfPlaintiff: countyPlaintiff,
                        countyOfAccident: countyofAccident,
                        premises: pathwayType,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_120":
                    resetParams = {
                        plaintiffId: params.plaintiffContactId,
                        defendantId: params.defendentContactId,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_121":
                    var type = "Local";
                    if (params.plaintiffEmployerIds != undefined) {
                        (params.plaintiffEmployerIds.is_global == "0") ? type = "Local" : type = "Global";
                    }
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        plaintiffEmployerId: (params.plaintiffEmployerIds != undefined) ? [parseInt(params.plaintiffEmployerIds.employerid)] : undefined,
                        plaintiffEmployerType: [type],
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_122":
                    var plaintiff = 0
                    var defendant = 0;
                    var plaintiffVclType = '';
                    var plaintiffVclMake = '';
                    var plaintiffLicenseNo = '';
                    var defendentVclType = '';
                    var defendentVclMake = '';
                    var defendentLicenseNo = '';
                    var attorney = 0;
                    var captionDoc = 0;
                    var locationOfIncidentState = '';
                    var locationOfIncidentCounty = '';
                    angular.isDefined(params.plaintiff) ? plaintiff = parseInt(params.plaintiff.plaintiffid) : '';
                    angular.isDefined(params.defendant) ? defendant = parseInt(params.defendant.defendantid) : '';
                    angular.isDefined(params.plaintiffVehicleType) ? plaintiffVclType = params.plaintiffVehicleType : '';
                    angular.isDefined(params.plaintiffVehicleMake) ? plaintiffVclMake = params.plaintiffVehicleMake : '';
                    angular.isDefined(params.plaintiffLicenseNumber) ? plaintiffLicenseNo = params.plaintiffLicenseNumber : '';
                    angular.isDefined(params.defendentVehicleType) ? defendentVclType = params.defendentVehicleType : '';
                    angular.isDefined(params.defendentVehicleMake) ? defendentVclMake = params.defendentVehicleMake : '';
                    angular.isDefined(params.defendentLicenseNumber) ? defendentLicenseNo = params.defendentLicenseNumber : '';
                    angular.isDefined(params.attorneyid1) ? attorney = parseInt(params.attorneyid1) : '';
                    angular.isDefined(params.captionDocumentId) ? captionDoc = parseInt(params.captionDocumentId) : '';
                    angular.isDefined(params.locationOfState) ? locationOfIncidentState = params.locationOfState : '';
                    angular.isDefined(params.locationOfCounty) ? locationOfIncidentCounty = params.locationOfCounty : '';
                    resetParams = {
                        plaintiffId: [plaintiff],
                        defendantId: [defendant],
                        uservalue1: plaintiffVclType,
                        uservalue2: plaintiffVclMake,
                        uservalue3: plaintiffLicenseNo,
                        uservalue4: defendentVclType,
                        uservalue5: defendentVclMake,
                        uservalue6: defendentLicenseNo,
                        uservalue7: locationOfIncidentCounty,
                        uservalue8: locationOfIncidentState,
                        attorneyId: [attorney],
                        captionId: [captionDoc],
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_123":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        leadAttorneyId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_124":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        leadAttorneyId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        insuranceid: (params.insuredpartyid != undefined) ? parseInt(params.insuredpartyid) : '',
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_126":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        leadAttorneyId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_125":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        leadAttorneyId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_127":
                    if (params.mattercontactid != undefined) {
                        var contactID = [parseInt(params.mattercontactid.contactid)];
                        var contactType = params.mattercontactid.contact_type;
                    }
                    var paralegal1 = 0;
                    var paralegal2 = 0;
                    var attorney1 = 0;
                    var attorney2 = 0;
                    (params.paralegalid != undefined) ? paralegal1 = parseInt(params.paralegalid) : '';
                    (params.paralegalid2 != undefined) ? paralegal2 = parseInt(params.paralegalid2) : '';
                    (params.attorneyid1 != undefined) ? attorney1 = parseInt(params.attorneyid1) : '';
                    (params.attorneyid2 != undefined) ? attorney2 = parseInt(params.attorneyid2) : '';

                    resetParams = {
                        contactId: contactID,
                        contactType: contactType,
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : undefined,
                        paralegalId: [paralegal1, paralegal2],
                        attorneyId: [attorney1, attorney2],
                        managingPartnerId: (params.managing_partner_id != undefined) ? [parseInt(params.managing_partner_id)] : [],
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1_128":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: params.matterid,
                        templatetype: params.templatetype,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        contactid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid) : undefined,
                        insuredpartyid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.insurance_details.insuredpartyid) : undefined,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "F1_129":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: params.matterid,
                        templatetype: params.templatetype,
                        userid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        insuranceproviderid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid) : undefined,
                        contactid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.contactid.contact_id) : undefined,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "F1_130":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: params.matterid,
                        templatetype: params.templatetype,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        contactid: angular.isDefined(params.defendant) ? parseInt(params.defendant.contactid.contactid) : undefined,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "F1_131":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: params.matterid,
                        templatetype: params.templatetype,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        contactid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid) : undefined,
                        paralegalid: angular.isDefined(params.paralegalid) ? parseInt(params.paralegalid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;

                case "F1153_1":
                case "F1153_3":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;


                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        defendantId: defendantids,
                        captionId: [parseInt(params.captionDocumentId)],
                        contactId: contactID,
                        contactTypes: [defendantContactTypes],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1153_2":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: [parseInt(params.captionDocumentId)],
                        defendantId: defendantids,
                        contactId: contactId,
                        contactTypes: [defendantContactTypes],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1135_122":
                    resetParams = {
                        contactTypes: angular.isDefined(params.physicianproviderid) ? [params.physicianproviderid.contact_type] : [''],
                        eventId: angular.isDefined(params.imeeventid) ? parseInt(params.imeeventid) : '',
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        contactId: angular.isDefined(params.physicianproviderid) ? [parseInt(params.physicianproviderid.contactid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1135_119":
                    resetParams = {
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : '',
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1135_121":
                    resetParams = {
                        contactTypes: angular.isDefined(params.physicianproviderid) ? [params.physicianproviderid.contact_type] : [''],
                        contactId: angular.isDefined(params.physicianproviderid) ? [parseInt(params.physicianproviderid.contactid)] : [0],
                        eventId: angular.isDefined(params.imeeventid) ? parseInt(params.imeeventid) : '',
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1135_120":
                    resetParams = {
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : '',
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1135_118":
                case "F1135_117":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : '',
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1135_125":
                case "F1135_126":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : '',
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1135_123":
                case "F1135_124":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1127_1":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1127_2":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId) : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1127_3":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalTreatmentId: angular.isDefined(params.physicianproviderid) ? parseInt(params.physicianproviderid.medicaltreatmentid) : '',
                        uservalue1: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MM/DD/YYYY') : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1143_124":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactId) ? contactId : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        attorneyId: angular.isDefined(params.attorneyid1) ? [parseInt(params.attorneyid1)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        uservalue5: defendantids.join(', '),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1143_127":
                    var defendantids = [];
                    var defendantnames = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        })
                    }
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess(),
                        userId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        uservalue2: (params.attorney_residence_county != undefined) ? (params.attorney_residence_county) : undefined,
                        uservalue3: (params.document_name != undefined) ? (params.document_name) : undefined,
                        contactId: angular.isDefined(contactID) ? contactID : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                    }
                    break;

                case "F1143_125":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        contactId: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contactid] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : [''],
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1153_5":
                case "F1153_4":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue4: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : '',
                        uservalue5: angular.isDefined(defendantids) ? defendantids.join(', ') : '',
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1153_14":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue4: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : '',
                        uservalue5: angular.isDefined(defendantids) ? defendantids.join(', ') : '',
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],

                    }
                    break;
                case "F1153_6":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        uservalue2: (params.attorney_residence_county != undefined) ? (params.attorney_residence_county) : undefined,
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        userId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1153_7":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue4: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : '',
                        uservalue5: angular.isDefined(defendantids) ? defendantids.join(', ') : '',
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "DLT03":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        paralegalid: angular.isDefined(params.defparalegalid) ? parseInt(params.defparalegalid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;

                case "DLT09":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        leadattorneyid: angular.isDefined(params.attorneyid1) ? parseInt(params.attorneyid1) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;

                case "DLT12":
                    var insuredId;
                    if (angular.isDefined(params.insuranceproviderid)) {
                        _.forEach(vm.insured_party, function (item) {
                            if (item.insuranceid == params.insuranceproviderid.insuranceid) {
                                insuredId = item.contactid;
                            }
                        })
                    }
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        from: angular.isDefined(params.insuranceproviderid) ? (params.insuranceproviderid.type == "Other Party") ? "otherparty" : "" : "",
                        insuranceid: angular.isDefined(params.insuranceproviderid) ? angular.isDefined(params.insuranceproviderid.insuranceid) ? parseInt(params.insuranceproviderid.insuranceid) : "" : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        contactid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid.contactid) : undefined,
                        insuredpartyid: utils.isNotEmptyVal(insuredId) ? parseInt(insuredId) : undefined,
                        leadattorneyid: undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT01":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        contactid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid) : undefined,
                        paralegalid: angular.isDefined(params.paralegalid) ? parseInt(params.paralegalid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT02":
                    var insuredId;
                    if (angular.isDefined(params.insuranceproviderid)) {
                        _.forEach(vm.insured_party, function (item) {
                            if (item.insuranceid == params.insuranceproviderid.insuranceid) {
                                insuredId = item.contactid;
                            }
                        })
                    }
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        from: angular.isDefined(params.insuranceproviderid) ? (params.insuranceproviderid.type == "Other Party") ? "otherparty" : "" : "",
                        insuranceid: angular.isDefined(params.insuranceproviderid) ? angular.isDefined(params.insuranceproviderid.insuranceid) ? parseInt(params.insuranceproviderid.insuranceid) : "" : undefined,
                        contactid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid.contactid) : undefined,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        insuredpartyid: utils.isNotEmptyVal(insuredId) ? parseInt(insuredId) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT04":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        contactid: angular.isDefined(params.defendant) ? parseInt(params.defendant.contactid.contactid) : undefined,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "F1153_8":
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        tz: moment.tz.guess(),
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        eventId: params.eventid,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;
                case "F1153_11":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue7: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : '',
                        uservalue5: angular.isDefined(defendantids) ? defendantids.join(', ') : '',
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1143_129":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        uservalue8: angular.isDefined(params.generalLigitation) ? params.generalLigitation : '',
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1143_130":
                    var defendantids = [];

                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        uservalue8: angular.isDefined(params.JudgeName) ? params.JudgeName : '',
                        uservalue7: angular.isDefined(params.MotionActionText) ? params.MotionActionText : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1143_128":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        uservalue2: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : '',
                        uservalue5: angular.isDefined(defendantids) ? defendantids.join(', ') : '',
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "DLT05":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        showsocialsecuritynumber: angular.isDefined(params.showsocialsecuritynumber) ? params.showsocialsecuritynumber : undefined,
                        contactid: angular.isDefined(params.otherpartycontactid2) ? parseInt(params.otherpartycontactid2.contactid) : undefined,
                        mattercontactid: angular.isDefined(params.otherpartycontactid) ? parseInt(params.otherpartycontactid.contactid) : undefined,
                        contactType: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_type : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT13":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        showsocialsecuritynumber: angular.isDefined(params.showsocialsecuritynumber) ? params.showsocialsecuritynumber : undefined,
                        contactid: angular.isDefined(params.otherpartycontactid2) ? parseInt(params.otherpartycontactid2.contactid) : undefined,
                        mattercontactid: undefined,
                        contactType: undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT07":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        contactid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid) : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT06":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        contactid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid) : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT10":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        from: angular.isDefined(params.insuranceproviderid) ? (params.insuranceproviderid.type == "Other Party") ? "otherparty" : "" : "",
                        userid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        insuranceproviderid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid.contactid) : undefined,
                        contactid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.contactid.contactid) : undefined,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT11":
                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: parseInt(params.matterid),
                        templatetype: params.templatetype,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        attorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        secondattorneyid: angular.isDefined(params.secondleadattorneyid) ? parseInt(params.secondleadattorneyid) : undefined,
                        paralegalid: angular.isDefined(params.paralegalid) ? parseInt(params.paralegalid) : undefined,
                        secondparalegalid: angular.isDefined(params.secondparalegalid) ? parseInt(params.secondparalegalid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;
                case "DLT08":
                    var insuredId;
                    if (angular.isDefined(params.insuranceproviderid)) {
                        _.forEach(vm.insured_party, function (item) {
                            if (item.insuranceid == params.insuranceproviderid.insuranceid) {
                                insuredId = item.contactid;
                            }
                        })
                    }

                    resetParams = {
                        templateid: parseInt(templateId),
                        matterid: params.matterid,
                        templatetype: params.templatetype,
                        from: angular.isDefined(params.insuranceproviderid) ? (params.insuranceproviderid.type == "Other Party") ? "otherparty" : "" : "",
                        insuranceid: angular.isDefined(params.insuranceproviderid) ? angular.isDefined(params.insuranceproviderid.insuranceid) ? parseInt(params.insuranceproviderid.insuranceid) : "" : undefined,
                        plaintiffid: angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : undefined,
                        contactid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid.contactid) : undefined,
                        insuredpartyid: utils.isNotEmptyVal(insuredId) ? parseInt(insuredId) : undefined,
                        leadattorneyid: angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : undefined,
                        tz: moment.tz(moment.tz.guess()).format('Z')
                    }
                    break;


                case "F1153_9":
                case "F1153_10":
                    var plaintiffIds = [];
                    _.forEach(params.plaintiff, function (currentItem) {
                        plaintiffIds.push(parseInt(currentItem.plaintiffid))
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        contactId: vm.referredById,
                        contactTypes: ["Local"],
                        plaintiffId: angular.isDefined(params.plaintiff) ? plaintiffIds : [0],
                        uservalue6: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('YYYY/MM/DD') : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1153_12":
                    var defendantids = [];
                    if (utils.isNotEmptyVal(vm.allMedicalProviders)) {
                        var hospitalProviderIds = _.map(vm.allMedicalProviders, function (currentItem) {
                            return parseInt(currentItem.contactid);
                        });
                    }
                    if (utils.isNotEmptyVal(vm.physician_provider_medicalInfo)) {
                        var physicianIds = _.map(vm.physician_provider_medicalInfo, function (currentItem) {
                            return parseInt(currentItem.medicaltreatmentid);
                        });
                    }
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;

                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        });
                    };
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        medicalTreatmentIds: utils.isNotEmptyVal(physicianIds) ? physicianIds : [0],
                        hospitalId: utils.isNotEmptyVal(hospitalProviderIds) ? hospitalProviderIds : [0],
                        hospitalType: ['Local'],
                        insuranceid: angular.isDefined(params.insuranceproviderid) ? parseInt(params.insuranceproviderid.insuranceid) : 0,
                        defendantAttorneyId: angular.isDefined(contactId) ? contactId : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        uservalue5: angular.isDefined(params.defendantLawFirm) ? defendantids.join(',') : '',
                        uservalue6: angular.isDefined(params.photographNumber) ? params.photographNumber : '',
                        uservalue7: angular.isDefined(params.daysLost) ? params.daysLost : '',
                        uservalue8: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MM/DD/YYYY') : '',
                        uservalue9: angular.isDefined(params.physicianids) ? params.physicianids.contact_name : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1155_1":
                    resetParams = {
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : undefined,
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : [0],
                    }
                    break;
                case "F1155_2":
                    var type = "Local";
                    if (params.medicalbillproviderid != undefined) {
                        if (params.medicalbillproviderid.contact_type != undefined) {
                            type = (params.medicalbillproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalbillproviderid) ? [parseInt(params.medicalbillproviderid.contactid)] : undefined,
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;

                case "F1155_6":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1155_7":
                    var plaintiffIds = [];
                    _.forEach(params.plaintiff, function (currentItem) {
                        plaintiffIds.push(parseInt(currentItem.plaintiffid))
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        plaintiffId: angular.isDefined(params.plaintiff) ? plaintiffIds : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: angular.isDefined(params.attorneyid1) ? [parseInt(params.attorneyid1)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1155_8":
                    var type = "Local";
                    if (params.medicalbillproviderid != undefined) {
                        if (params.medicalbillproviderid.contact_type != undefined) {
                            type = (params.medicalbillproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalbillproviderid) ? [parseInt(params.medicalbillproviderid.contactid)] : undefined,
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1155_9":
                    var type = "Local";
                    if (params.medicalbillAndInfoproviderid != undefined) {
                        if (params.medicalbillAndInfoproviderid.contact_type != undefined) {
                            type = (params.medicalbillAndInfoproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalbillAndInfoproviderid) ? [parseInt(params.medicalbillAndInfoproviderid.contactid)] : undefined,
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1153_13":
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess(),
                        userId: (params.paralegalid != undefined) ? [parseInt(params.paralegalid)] : undefined,
                        uservalue6: angular.isDefined(params.countyName) ? params.countyName : ''
                    }
                    break;
                case "F1143_131":

                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });

                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        tz: moment.tz.guess(),
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        contactId: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contactid] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : [''],
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue8: angular.isDefined(params.JudgeName) ? params.JudgeName : ''
                    }
                    break;
                case "F1153_15":
                    resetParams = {
                        plaintiffId: (params.plaintiff != undefined) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        attorneyId: (params.attorneyid1 != undefined) ? [parseInt(params.attorneyid1)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                    }
                    break;

                case "F1153_17":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;
                    }
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        attorneyId: angular.isDefined(params.attorneyid1) ? [parseInt(params.attorneyid1)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        medicalTreatmentId: angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid) : 0,
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? [defendantContactTypes] : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1153_18":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue8: angular.isDefined(params.JudgeName) ? params.JudgeName : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1153_20":
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess(),
                        uservalue7: angular.isDefined(params.amountInWords) ? params.amountInWords : undefined,
                        uservalue8: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : undefined,
                    }
                    break;
                case "F1153_19":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        tz: moment.tz.guess(),
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue6: (params.document_name != undefined) ? (params.document_name) : undefined
                    }
                    break;
                case "F1153_21":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]

                    }
                    break;

                case "F1153_22":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue6: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MM/DD/YYYY') : '',
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1153_26":
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        hospitalId: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalTreatmentId: angular.isDefined(params.physicianproviderid) ? parseInt(params.physicianproviderid.medicaltreatmentid) : 0,
                        contactType: 'Local',
                        uservalue8: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue4: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : '',
                        uservalue5: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1153_24":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        tz: moment.tz.guess()
                    }

                    break;
                case "F1153_23":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        tz: moment.tz.guess(),
                        uservalue7: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : ''
                    }
                    break;
                case "F1153_25":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        uservalue8: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : undefined,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        //defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                    }
                    break;
                case "F1153_27":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: (params.insuredpartyid != undefined) ? parseInt(params.insuredpartyid) : '',
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        lienholderid: (params.lienholderid != undefined) ? parseInt(params.lienholderid) : undefined,
                    }
                    break;
                case "F1153_28":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue8: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : undefined,
                    }
                    break;
                case "F1153_29":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        //medicalTreatmentId: angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid) : 0,
                    }
                    break;
                case "F1153_33":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        });
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        contactId: angular.isDefined(contactID) ? contactID : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? defendantContactTypes : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue2: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : '',
                        uservalue5: angular.isDefined(params.generalLigitation) ? params.generalLigitation : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1153_35":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        contactId: angular.isDefined(contactID) ? contactID : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? defendantContactTypes : [''],
                        eventId: angular.isDefined(params.eventid) ? params.eventid : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1153_32":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        tz: moment.tz.guess(),
                        uservalue8: angular.isDefined(params.medicalDateService) ? params.medicalDateService : '',
                        medicalTreatmentId: angular.isDefined(params.expertWitnessId) ? parseInt(params.expertWitnessId.contactid) : '',
                    }
                    break;
                case "F1153_34":
                    if (params.defendantLawFirm != undefined) {
                        var contactId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = params.defendantLawFirm.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        contactId: angular.isDefined(contactId) ? [parseInt(contactId)] : [0],
                        contactTypes: angular.isDefined(defendantContactTypes) ? [defendantContactTypes] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess(),
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue3: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD, YYYY') : ''
                    }
                    break;
                case "F1153_31":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1153_36":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue8: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : undefined,
                        //defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant.defendantid)] : [0],
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        insuranceid: (params.insuranceclaimnumber != undefined) ? parseInt(params.insuranceclaimnumber.insuranceid) : '',
                    }
                    break;
                case "F1153_38":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        eventId: angular.isDefined(params.eventid) ? params.eventid : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                    }
                    break;
                case "F1153_40":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1153_37":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        // medicalTreatmentId: angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid) : 0,
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                    }
                    break;
                case "F1153_42":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : undefined,
                        defendantId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        uservalue7: angular.isDefined(params.amountInWords) ? params.amountInWords : undefined,
                        uservalue8: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : undefined,
                    }
                    break;
                case "F1153_43":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : undefined,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;
                case "F1153_41":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        uservalue8: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '',
                        uservalue7: angular.isDefined(params.amountInWords) ? params.amountInWords : ''
                    }
                    break;
                case "F1153_44":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',

                    }
                    break;
                case "F1153_45":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        });
                    }
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? $filter('uppercase')(params.plantiffResidenceCounty) : '',
                        uservalue11: angular.isDefined(params.plantiffResidenceState) ? $filter('uppercase')(params.plantiffResidenceState) : '',
                        uservalue10: angular.isDefined(params.entityName) ? params.entityName : '',
                        uservalue9: angular.isDefined(params.custodianRecordsName) ? params.custodianRecordsName : '',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        medicalTreatmentId: angular.isDefined(params.parentObjPhysicianproviderid) ? parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid) : 0,
                        contactType: 'Local',
                        witnessId: angular.isDefined(params.witnessId) ? [parseInt(params.witnessId.contactid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],

                    }
                    break;

                case "F1153_46":
                    var defid1 = 0,
                        defid2 = 0,
                        defid3 = 0;
                    var defendantids = [];
                    defid1 = angular.isDefined(params.defendants1) ? parseInt(params.defendants1.defendantid) : 0;
                    defid2 = angular.isDefined(params.defendants2) ? parseInt(params.defendants2.defendantid) : 0;
                    defid3 = angular.isDefined(params.defendants3) ? parseInt(params.defendants3.defendantid) : 0;
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue8: angular.isDefined(params.JudgeName) ? params.JudgeName : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        uservalue2: angular.isDefined(params.lawSecretoryTitle) ? params.lawSecretoryTitle : '',
                        uservalue4: angular.isDefined(params.lawSecretoryName) ? params.lawSecretoryName : '',
                        uservalue3: angular.isDefined(params.nonParty) ? params.nonParty : '',
                        uservalue13: angular.isDefined(params.noticeDate) ? moment.unix(params.noticeDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue14: angular.isDefined(params.testifyDate) ? moment.unix(params.testifyDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue15: angular.isDefined(params.noticeProduceDate) ? moment.unix(params.noticeProduceDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue16: angular.isDefined(params.ResponseDate) ? moment.unix(params.ResponseDate).utc().format('MMMM DD, YYYY') : '',
                        defendantId: [defid1, defid2, defid3],
                        uservalue5: angular.isDefined(defendantids) ? defendantids.join(', ') : '',
                        conferenceEventId: angular.isDefined(params.othereventid) ? [parseInt(params.othereventid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1153_48":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }
                    var fullName, fName, mName, lName;
                    if (angular.isDefined(params.deceasedName)) {
                        (angular.isDefined(params.deceasedName.firstname) && (params.deceasedName.firstname != null)) ? fName = $filter('uppercase')(params.deceasedName.firstname) : fName = '';
                        (angular.isDefined(params.deceasedName.middelname) && (params.deceasedName.middelname != null)) ? mName = $filter('uppercase')(params.deceasedName.middelname) : mName = '';
                        (angular.isDefined(params.deceasedName.lastname) && (params.deceasedName.lastname != null)) ? lName = $filter('uppercase')(params.deceasedName.lastname) : lName = '';
                        fullName = fName + " " + mName + " " + lName;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId1) ? [parseInt(params.captionDocumentId1)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue5: angular.isDefined(defendantids) ? defendantids.join(', ') : '',
                        contactId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        uservalue13: angular.isDefined(params.executrixName) ? $filter('uppercase')(params.executrixName) : '',
                        uservalue11: angular.isDefined(params.newPlaintiffName) ? params.newPlaintiffName : '',
                        uservalue10: angular.isDefined(params.newDefendantName) ? params.newDefendantName : '',
                        uservalue15: angular.isDefined(fullName) ? $filter('uppercase')(fullName) : '',
                        uservalue16: angular.isDefined(params.dateOfDeath) ? moment.unix(params.dateOfDeath).utc().format('MMMM DD, YYYY') : '',
                        uservalue12: angular.isDefined(params.indexNumberFiledDate) ? moment.unix(params.indexNumberFiledDate).utc().format('MMMM DD, YYYY') : '',
                    }
                    break;
                case "F1153_47":
                    if (params.defendantLawFirm != undefined) {
                        var defendantAttorneyId = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantAttorneyTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        medicalTreatmentIds: angular.isDefined(params.physicianPalintiffs) ? [parseInt(params.physicianPalintiffs)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? defendantAttorneyId : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantAttorneyTypes : [''],
                        uservalue16: angular.isDefined(params.physicianDefendants) ? params.physicianDefendants : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess(),
                        eventId: angular.isDefined(params.imeeventid) ? parseInt(params.imeeventid) : '',
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : ''
                    }
                    break;
                case "F1143_132":

                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        tz: moment.tz.guess(),
                        uservalue8: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : undefined,
                        uservalue10: angular.isDefined(params.commercialRetainer) ? params.commercialRetainer : '',
                        uservalue6: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('YYYY/MM/DD') : ''
                    }
                    break;
                case "F1153_49":
                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    var defendantnames = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantnames.push(currentItem.name);
                            }
                        });
                    }
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    /* Start: Send All Medical Provider ids without Showing UI */
                    var allMedicalProvidersIds = [],
                        allUniqueMedicalProvidersByContactId = [];
                    allUniqueMedicalProvidersByContactId = _.uniq(vm.allMedicalProviders, function (item, contactid) {
                        return item.contactid;
                    });
                    _.forEach(allUniqueMedicalProvidersByContactId, function (item) {
                        var firstname = (item.firstname == undefined || item.firstname == null) ? " " : item.firstname;
                        var middelname = (item.middelname == undefined || item.middelname == null) ? " " : item.middelname;
                        var lastname = (item.lastname == undefined || item.lastname == null) ? " " : item.lastname;
                        var fullName = firstname + " " + middelname + " " + lastname;
                        allMedicalProvidersIds.push(fullName.trim());
                    });
                    /* End: Send All Medical Provider ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? $filter('uppercase')(params.plantiffResidenceCounty) : '',
                        //uservalue11: angular.isDefined(params.plantiffResidenceState) ? $filter('uppercase')(params.plantiffResidenceState) : '',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0],
                        contactType: 'Local',
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue5: angular.isDefined(defendantnames) ? defendantnames.join(', ') : '',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        uservalue13: angular.isDefined(params.reportDate) ? moment.unix(params.reportDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue14: angular.isDefined(params.dateOfMRI) ? moment.unix(params.dateOfMRI).utc().format('MMMM DD, YYYY') : '',
                        uservalue16: allMedicalProvidersIds.join(', '),
                    }
                    break;
                case "F1153_51":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        });
                    }
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? $filter('uppercase')(params.plantiffResidenceCounty) : '',
                        //uservalue11: angular.isDefined(params.plantiffResidenceState) ? $filter('uppercase')(params.plantiffResidenceState) : '',
                        uservalue9: angular.isDefined(params.custodianRecordsName) ? params.custodianRecordsName : '',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0],
                        contactType: 'Local',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                    }
                    break;
                case "F1153_52":
                case "F1153_53":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        });
                    }
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0],
                        contactType: 'Local',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue2: angular.isDefined(params.plantiffResidenceCounty) ? $filter('uppercase')(params.plantiffResidenceCounty) : '',
                        uservalue12: angular.isDefined(params.plantiffResidenceState) ? $filter('uppercase')(params.plantiffResidenceState) : '',
                        uservalue9: angular.isDefined(params.dateOfMRI) ? moment.unix(params.dateOfMRI).utc().format('MMMM DD, YYYY') : '',
                        uservalue15: angular.isDefined(params.noOfMRI) ? params.noOfMRI : '',
                        uservalue11: angular.isDefined(params.bodyPart) ? params.bodyPart : '',
                    }
                    break;
                case "F1153_50":
                    var medicalTreatmentIds = [];
                    var noFaultInsuranceNameId = [];
                    var allUniinsuranceNofault = [];
                    var allUniinmedicalTreatmentIds = [];
                    allUniinmedicalTreatmentIds = _.uniq(vm.physician_provider_medicalInfo, function (item, contactid) {
                        return item.contactid;
                    });
                    _.forEach(allUniinmedicalTreatmentIds, function (item) {
                        medicalTreatmentIds.push(item.medicaltreatmentid);
                    });
                    allUniinsuranceNofault = _.uniq(vm.noFaultInsuranceProvidersId, function (item, insuranceid) {
                        return item.insuranceid;
                    });
                    _.forEach(allUniinsuranceNofault, function (item) {
                        noFaultInsuranceNameId.push(item.insuranceid);
                    });
                    resetParams = {
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        templateId: parseInt(templateId),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        tz: moment.tz.guess(),
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId) : 0,
                        medicalTreatmentIds: angular.isDefined(medicalTreatmentIds) ? medicalTreatmentIds : [0],
                        noFaultInsuranceNameId: angular.isDefined(noFaultInsuranceNameId) ? noFaultInsuranceNameId : [0]
                    }
                    break;
                case "F1164_1":
                case "F1164_2":
                case "F1164_3":
                case "F1166_9":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1153_57":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0,
                        defendantfullName, firstname1, middelname1, lastname1;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? "" : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? "" : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? "" : params.defendants1.contactid.lastname;
                        defendantfullName = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue27: defendantfullName,
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? (params.plantiffResidenceCounty) : '',
                        uservalue23: angular.isDefined(params.volPageName) ? params.volPageName : '',
                        uservalue21: angular.isDefined(params.locationAccident) ? params.locationAccident : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue17: angular.isDefined(params.accidentState) ? params.accidentState : '',
                        uservalue24: angular.isDefined(params.annexName) ? params.annexName : '',
                        uservalue22: angular.isDefined(params.bigappleDate) ? moment.unix(params.bigappleDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue20: angular.isDefined(params.heldDate) ? moment.unix(params.heldDate).utc().format('MMMM DD, YYYY') : '',
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId.id) : '',
                    }
                    break;
                case "F1153_56":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0,
                        defendantfullName, firstname1, middelname1, lastname1;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? "" : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? "" : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? "" : params.defendants1.contactid.lastname;
                        defendantfullName = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue27: defendantfullName,
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        uservalue23: angular.isDefined(params.volPageName) ? params.volPageName : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue17: angular.isDefined(params.accidentState) ? params.accidentState : '',
                        uservalue20: angular.isDefined(params.heldDate) ? moment.unix(params.heldDate).utc().format('MMMM DD, YYYY') : '',
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId.id) : ''
                    }
                    break;
                case "F1153_58":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue27: angular.isDefined(params.defendants1) ? params.defendants1.name : "",
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? $filter('uppercase')(params.plantiffResidenceCounty) : '',
                        uservalue23: angular.isDefined(params.DefendantResidencCounty) ? params.DefendantResidencCounty : '',
                        uservalue21: angular.isDefined(params.locationAccident) ? params.locationAccident : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue17: angular.isDefined(params.accidentState) ? params.accidentState : '',
                        uservalue24: angular.isDefined(params.accidnetDescription) ? params.accidnetDescription : '',
                    }
                    break;
                case "F1153_54":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var fullName1, fullName2, state1, state2;
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? " " : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? " " : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? " " : params.defendants1.contactid.lastname;
                        fullName1 = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                        state1 = (params.defendants1.contactid.state == undefined || params.defendants1.contactid.state == null) ? " " : params.defendants1.contactid.state;
                    }
                    if ((params.defendants2 != undefined) && (params.defendants2.contactid != undefined)) {
                        var firstname2 = (params.defendants2.contactid.firstname == undefined || params.defendants2.contactid.firstname == null) ? " " : params.defendants2.contactid.firstname;
                        var middelname2 = (params.defendants2.contactid.middelname == undefined || params.defendants2.contactid.middelname == null) ? " " : params.defendants2.contactid.middelname;
                        var lastname2 = (params.defendants2.contactid.lastname == undefined || params.defendants2.contactid.lastname == null) ? " " : params.defendants2.contactid.lastname;
                        fullName2 = (firstname2 + " " + middelname2 + " " + lastname2).trim();
                        state2 = (params.defendants2.contactid.state == undefined || params.defendants2.contactid.state == null) ? " " : params.defendants2.contactid.state;
                    }
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue17: fullName1,
                        uservalue18: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        //uservalue19: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '',
                        uservalue19: state1,
                        uservalue20: fullName2,
                        uservalue21: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '',
                        //uservalue22: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '',
                        uservalue22: state2,
                        uservalue23: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '',
                        uservalue24: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '',
                        uservalue25: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '',
                    }
                    break;
                case "F1153_55":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var fullName1, fullName2, state1, state2;
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? " " : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? " " : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? " " : params.defendants1.contactid.lastname;
                        fullName1 = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                        state1 = (params.defendants1.contactid.state == undefined || params.defendants1.contactid.state == null) ? " " : params.defendants1.contactid.state;
                    }
                    if ((params.defendants2 != undefined) && (params.defendants2.contactid != undefined)) {
                        var firstname2 = (params.defendants2.contactid.firstname == undefined || params.defendants2.contactid.firstname == null) ? " " : params.defendants2.contactid.firstname;
                        var middelname2 = (params.defendants2.contactid.middelname == undefined || params.defendants2.contactid.middelname == null) ? " " : params.defendants2.contactid.middelname;
                        var lastname2 = (params.defendants2.contactid.lastname == undefined || params.defendants2.contactid.lastname == null) ? " " : params.defendants2.contactid.lastname;
                        fullName2 = (firstname2 + " " + middelname2 + " " + lastname2).trim();
                        state2 = (params.defendants2.contactid.state == undefined || params.defendants2.contactid.state == null) ? " " : params.defendants2.contactid.state;
                    }
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue17: fullName1,
                        uservalue18: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        //uservalue19: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '',
                        uservalue19: state1,
                        uservalue20: fullName2,
                        //uservalue21: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '',
                        //uservalue22: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '',
                        uservalue22: state2,
                        uservalue23: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '',
                        uservalue24: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '',
                        uservalue25: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '',
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                    }
                    break;
                case "F1153_59":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var fullName1, fullName2, state1, state2;
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? " " : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? " " : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? " " : params.defendants1.contactid.lastname;
                        fullName1 = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                        state1 = (params.defendants1.contactid.state == undefined || params.defendants1.contactid.state == null) ? " " : params.defendants1.contactid.state;
                    }
                    if ((params.defendants2 != undefined) && (params.defendants2.contactid != undefined)) {
                        var firstname2 = (params.defendants2.contactid.firstname == undefined || params.defendants2.contactid.firstname == null) ? " " : params.defendants2.contactid.firstname;
                        var middelname2 = (params.defendants2.contactid.middelname == undefined || params.defendants2.contactid.middelname == null) ? " " : params.defendants2.contactid.middelname;
                        var lastname2 = (params.defendants2.contactid.lastname == undefined || params.defendants2.contactid.lastname == null) ? " " : params.defendants2.contactid.lastname;
                        fullName2 = (firstname2 + " " + middelname2 + " " + lastname2).trim();
                        state2 = (params.defendants2.contactid.state == undefined || params.defendants2.contactid.state == null) ? " " : params.defendants2.contactid.state;
                    }
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue17: $filter('uppercase')(fullName1),
                        uservalue18: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        //uservalue19: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '',
                        uservalue19: state1,
                        uservalue20: $filter('uppercase')(fullName2),
                        uservalue21: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '',
                        //uservalue22: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '',
                        uservalue22: state2,
                        uservalue23: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '',
                        uservalue24: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '',
                        uservalue25: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;
                case "F1164_4":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue20: angular.isDefined(params.incidentDescription) ? params.incidentDescription : '',
                        tz: moment.tz.guess(),
                        defendantId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0]
                    }
                    break;
                case "F1164_5":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue21: angular.isDefined(params.otherDriverName) ? params.otherDriverName : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1164_6":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue21: angular.isDefined(params.otherDriverName) ? params.otherDriverName : '',
                        uservalue22: angular.isDefined(params.driverLicenseNumber) ? params.driverLicenseNumber : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1164_7":
                case "F1166_2":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1166_1":
                case "F1166_3":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1166_4":
                    var insuranceIdBI, insuranceId, insuranceIdUM, insuranceIdproperty;
                    insuranceId = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceIdBI = angular.isDefined(params.InsuranceIdBI) ? parseInt(params.InsuranceIdBI.insuranceid) : 0;
                    insuranceIdUM = angular.isDefined(params.InsuranceIdUM) ? parseInt(params.InsuranceIdUM.insuranceid) : 0;
                    insuranceIdproperty = angular.isDefined(params.PropertyInsuranceId) ? parseInt(params.PropertyInsuranceId.insuranceid) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        insuranceIds: [insuranceId, insuranceIdBI, insuranceIdUM, insuranceIdproperty],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1166_5":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1166_6":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        tz: moment.tz.guess(),
                        medicalTreatmentId: angular.isDefined(params.parentObjPhysicianproviderid) ? parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid) : 0
                    }
                    break;
                case "F1166_8":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1166_10":
                case "F1166_11":
                    var serviceStartDate, serviceEndDate, serviceDate;
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                        serviceStartDate = utils.isNotEmptyVal(params.medicalproviderid.servicestartdate) ? moment.unix(params.medicalproviderid.servicestartdate).utc().format('MMMM DD, YYYY') : '';
                        serviceEndDate = utils.isNotEmptyVal(params.medicalproviderid.serviceenddate) ? moment.unix(params.medicalproviderid.serviceenddate).utc().format('MMMM DD, YYYY') : '';
                        if (serviceStartDate !== "" && serviceEndDate !== "") {
                            serviceDate = serviceStartDate + "-" + serviceEndDate;
                        } else {
                            serviceDate = serviceStartDate + "" + serviceEndDate;
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue8: serviceDate,
                        uservalue26: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                    }
                    break;
                case "F1166_7":
                    var serviceStartDate, serviceEndDate, serviceDate;
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                        serviceStartDate = utils.isNotEmptyVal(params.medicalproviderid.servicestartdate) ? moment.unix(params.medicalproviderid.servicestartdate).utc().format('MMMM DD, YYYY') : '';
                        serviceEndDate = utils.isNotEmptyVal(params.medicalproviderid.serviceenddate) ? moment.unix(params.medicalproviderid.serviceenddate).utc().format('MMMM DD, YYYY') : '';
                        serviceDate = serviceStartDate + "-" + serviceEndDate;
                        if (serviceStartDate !== "" && serviceEndDate !== "") {
                            serviceDate = serviceStartDate + "-" + serviceEndDate;
                        } else {
                            serviceDate = serviceStartDate + "" + serviceEndDate;
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        uservalue8: serviceDate,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                    }
                    break;
                case "F1166_6":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        tz: moment.tz.guess(),
                        medicalTreatmentId: angular.isDefined(params.parentObjPhysicianproviderid) ? parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid) : 0
                    }
                    break;
                case "F1166_12":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue27: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : '',
                        uservalue26: angular.isDefined(params.otherDriverName) ? params.otherDriverName : '',
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [(params.otherpartycontactid.contact_type)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1166_13":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue27: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : '',
                        uservalue25: angular.isDefined(params.summonNumber) ? params.summonNumber : '',
                        uservalue17: angular.isDefined(params.checkName) ? params.checkName : '',
                        uservalue24: angular.isDefined(params.chargeNumber) ? params.chargeNumber : '',
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId) : '',
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [(params.otherpartycontactid.contact_type)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1166_14":
                case "F1166_15":
                case "F1164_22":
                case "F1164_23":
                case "F1164_24":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1143_133":
                    var medicalproviderid1 = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0
                    var medicalproviderid2 = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0
                    var medicalproviderid3 = angular.isDefined(params.medicalproviderid3) ? parseInt(params.medicalproviderid3.contactid) : 0
                    var medicalprovidertype1 = angular.isDefined(params.medicalproviderid) ? params.medicalproviderid.contact_type : ''
                    var medicalprovidertype2 = angular.isDefined(params.medicalproviderid2) ? params.medicalproviderid2.contact_type : ''
                    var medicalprovidertype3 = angular.isDefined(params.medicalproviderid3) ? params.medicalproviderid3.contact_type : ''
                    var medicaltreatmentid1 = utils.isNotEmptyVal(params.medicalproviderid) ? parseInt(params.medicalproviderid.medicaltreatmentid) : 0
                    var medicaltreatmentid2 = utils.isNotEmptyVal(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.medicaltreatmentid) : 0
                    var medicaltreatmentid3 = utils.isNotEmptyVal(params.medicalproviderid3) ? parseInt(params.medicalproviderid3.medicaltreatmentid) : 0

                    var defendantid1 = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0
                    var defendantid2 = angular.isDefined(params.defendant2) ? parseInt(params.defendant2) : 0
                    var defendantid3 = angular.isDefined(params.defendant3) ? parseInt(params.defendant3) : 0

                    var witnessId1 = angular.isDefined(params.witnessId) ? parseInt(params.witnessId.contactid) : 0
                    var witnessId2 = angular.isDefined(params.witnessId2) ? parseInt(params.witnessId2.contactid) : 0

                    var employmentStartDate = angular.isDefined(params.dateEmployedFrom) ? moment(params.dateEmployedFrom).utc().format('MMMM DD, YYYY') : ''
                    var employmentEndDate = angular.isDefined(params.dateEmployedTo) ? moment(params.dateEmployedTo).utc().format('MMMM DD, YYYY') : ''
                    var employmentStartDate2 = angular.isDefined(params.dateEmployedFrom2) ? moment(params.dateEmployedFrom2).utc().format('MMMM DD, YYYY') : ''
                    var employmentEndDate2 = angular.isDefined(params.dateEmployedTo2) ? moment(params.dateEmployedTo2).utc().format('MMMM DD, YYYY') : ''
                    var employmentStartDate3 = angular.isDefined(params.dateEmployedFrom3) ? moment(params.dateEmployedFrom3).utc().format('MMMM DD, YYYY') : ''
                    var employmentEndDate3 = angular.isDefined(params.dateEmployedTo3) ? moment(params.dateEmployedTo3).utc().format('MMMM DD, YYYY') : ''

                    var plaintiffEmployer1 = angular.isDefined(params.plaintiffEmployerIds) ? parseInt(params.plaintiffEmployerIds.employerid) : 0
                    var plaintiffEmployer2 = angular.isDefined(params.plaintiffEmployerIds2) ? parseInt(params.plaintiffEmployerIds2.employerid) : 0
                    var plaintiffEmployer3 = angular.isDefined(params.plaintiffEmployerIds3) ? parseInt(params.plaintiffEmployerIds3.employerid) : 0

                    var plaintiffEmployerType1 = angular.isDefined(params.plaintiffEmployerIds) ? params.plaintiffEmployerIds.contactid.contact_type : ''
                    var plaintiffEmployerType2 = angular.isDefined(params.plaintiffEmployerIds2) ? params.plaintiffEmployerIds2.contactid.contact_type : ''
                    var plaintiffEmployerType3 = angular.isDefined(params.plaintiffEmployerIds3) ? params.plaintiffEmployerIds3.contactid.contact_type : ''

                    var attorneyId = angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : 0
                    var workerCompAttorneyId = utils.isNotEmptyVal(params.workerCompAttorney) ? parseInt(params.workerCompAttorney.contactid) : 0

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: [plaintiffEmployer1, plaintiffEmployer2, plaintiffEmployer3],
                        plaintiffEmployerType: [plaintiffEmployerType1, plaintiffEmployerType2, plaintiffEmployerType3],
                        defendantId: [defendantid1, defendantid2, defendantid3],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        lienholderid: angular.isDefined(params.lienholderIds) ? parseInt(params.lienholderIds) : 0,
                        medicalproviderid: [medicalproviderid1, medicalproviderid2, medicalproviderid3],
                        medicalprovidertype: ['Local', 'Local', 'Local'],
                        medicalTreatmentIds: [medicaltreatmentid1, medicaltreatmentid2, medicaltreatmentid3],
                        uservalue7: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '',
                        uservalue32: angular.isDefined(params.amountInNumbers2) ? $filter('currency')(params.amountInNumbers2, '', 2) : '',
                        uservalue33: angular.isDefined(params.amountInNumbers3) ? $filter('currency')(params.amountInNumbers3, '', 2) : '',
                        attorneyId: [workerCompAttorneyId, attorneyId],
                        witnessId: [witnessId1, witnessId2],
                        insuranceid: angular.isDefined(params.workersCompensationId) ? parseInt(params.workersCompensationId.insuranceid) : 0,
                        uservalue3: angular.isDefined(params.attorneyAddress) ? params.attorneyAddress : '',
                        uservalue10: angular.isDefined(params.emergencyContactNumber) ? params.emergencyContactNumber : '',
                        uservalue9: angular.isDefined(params.spouseSSN) ? params.spouseSSN : '',
                        uservalue13: angular.isDefined(params.bedTime) ? params.bedTime : '',
                        uservalue14: angular.isDefined(params.houseTime) ? params.houseTime : '',
                        uservalue15: angular.isDefined(params.serviceDescription) ? params.serviceDescription : '',
                        uservalue16: angular.isDefined(params.policeAccidentInfo) ? params.policeAccidentInfo : '',
                        uservalue17: angular.isDefined(params.lostIncome) ? params.lostIncome : '',
                        uservalue18: angular.isDefined(params.prioirAccidents) ? params.prioirAccidents : '',
                        uservalue19: angular.isDefined(params.subsequentAccidents) ? params.subsequentAccidents : '',
                        uservalue20: angular.isDefined(params.priorMedicalCondition) ? params.priorMedicalCondition : '',
                        uservalue21: angular.isDefined(params.meansOfCalculation) ? params.meansOfCalculation : '',
                        uservalue22: angular.isDefined(params.liabilityBasis) ? params.liabilityBasis : '',
                        uservalue25: angular.isDefined(params.socialSecInfo) ? params.socialSecInfo : '',
                        uservalue23: angular.isDefined(params.defendantStatement) ? params.defendantStatement : '',
                        uservalue27: angular.isDefined(params.grossPay) ? $filter('currency')(params.grossPay, '', 2) : '',
                        uservalue28: angular.isDefined(params.grossPay2) ? $filter('currency')(params.grossPay2, '', 2) : '',
                        uservalue29: angular.isDefined(params.grossPay3) ? $filter('currency')(params.grossPay3, '', 2) : '',
                        uservalue8: angular.isDefined(params.accidnetDescription) ? params.accidnetDescription : '',
                        uservalue11: angular.isDefined(params.dateOfMarriage) ? moment(params.dateOfMarriage).utc().format('YYYY/MM/DD') : '',
                        uservalue24: angular.isDefined(params.dateOfFiling) ? moment(params.dateOfFiling).utc().format('MMMM DD, YYYY') : '',
                        uservalue26: employmentStartDate + ' - ' + employmentEndDate,
                        uservalue12: angular.isDefined(params.userState) ? params.userState.toUpperCase() : '',
                        uservalue2: angular.isDefined(params.userCounty) ? params.userCounty.toUpperCase() : '',
                        uservalue5: angular.isDefined(params.userAddress) ? params.userAddress : '',
                        uservalue30: employmentStartDate2 + ' - ' + employmentEndDate2,
                        uservalue31: employmentStartDate3 + ' - ' + employmentEndDate3,
                    }
                    break;
                case "F1164_8":
                case "F1164_9":
                case "F1164_10":
                case "F1164_11":
                case "F1164_16":
                case "F1164_17":
                case "F1164_18":
                case "F1164_19":
                case "F1164_20":
                    var defendantIds = _.map(params.defendantsArray, function (item) {
                        return parseInt(item);
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        uservalue8: utils.isNotEmptyVal(params.checkAmount) ? $filter('currency')(params.checkAmount, '', 2) : '',
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendantsArray) ? defendantIds : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        insuranceid: utils.isNotEmptyVal(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceId) : 0
                    }
                    break;
                case "F1164_15":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [(params.otherpartycontactid.contact_type)] : [0],
                        tz: moment.tz.guess(),
                    }
                    break;
                case "F1164_12":
                case "F1164_13":
                case "F1164_14":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        tz: moment.tz.guess(),
                    }
                    break;
                case "F1164_21":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [(params.otherpartycontactid.contact_type)] : [0],
                        uservalue32: angular.isDefined(params.vehicleInfo) ? params.vehicleInfo : '',
                        uservalue3: angular.isDefined(params.vinNumber) ? params.vinNumber : '',
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1164_25":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendants_single) ? [parseInt(params.defendants_single)] : [0],
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1164_26":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        insuranceid: utils.isNotEmptyVal(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;
                case "F1153_60":
                    var captionDoc1 = 0,
                        palintiffId = 0,
                        minorPlaintiff = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var fullName1, fullName2, state1, state2;
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? " " : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? " " : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? " " : params.defendants1.contactid.lastname;
                        fullName1 = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                        state1 = (params.defendants1.contactid.state == undefined || params.defendants1.contactid.state == null) ? " " : params.defendants1.contactid.state;
                    }
                    if ((params.defendants2 != undefined) && (params.defendants2.contactid != undefined)) {
                        var firstname2 = (params.defendants2.contactid.firstname == undefined || params.defendants2.contactid.firstname == null) ? " " : params.defendants2.contactid.firstname;
                        var middelname2 = (params.defendants2.contactid.middelname == undefined || params.defendants2.contactid.middelname == null) ? " " : params.defendants2.contactid.middelname;
                        var lastname2 = (params.defendants2.contactid.lastname == undefined || params.defendants2.contactid.lastname == null) ? " " : params.defendants2.contactid.lastname;
                        fullName2 = (firstname2 + " " + middelname2 + " " + lastname2).trim();
                        state2 = (params.defendants2.contactid.state == undefined || params.defendants2.contactid.state == null) ? " " : params.defendants2.contactid.state;
                    }
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    /* End: Send All  Defendant ids without Showing UI */
                    angular.isDefined(params.plaintiff) ? palintiffId = parseInt(params.plaintiff.plaintiffid) : '';
                    angular.isDefined(params.infantPlaintiff) ? minorPlaintiff = parseInt(params.infantPlaintiff.plaintiffid) : '';
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: [palintiffId, minorPlaintiff],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue17: fullName1,
                        uservalue18: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        uservalue19: state1,
                        uservalue28: angular.isDefined(params.guardianType) ? params.guardianType : '',
                        uservalue29: angular.isDefined(params.plantiffGuardianCounty) ? params.plantiffGuardianCounty : '',
                        uservalue20: fullName2,
                        uservalue21: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '',
                        uservalue22: state2,
                        uservalue23: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '',
                        uservalue24: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '',
                        uservalue25: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '',
                    }
                    break;
                case "F1153_61":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0,
                        palintiffId = 0,
                        minorPlaintiff = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var fullName1, fullName2, state1, state2;
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? " " : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? " " : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? " " : params.defendants1.contactid.lastname;
                        fullName1 = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                        state1 = (params.defendants1.contactid.state == undefined || params.defendants1.contactid.state == null) ? " " : params.defendants1.contactid.state;
                    }
                    if ((params.defendants2 != undefined) && (params.defendants2.contactid != undefined)) {
                        var firstname2 = (params.defendants2.contactid.firstname == undefined || params.defendants2.contactid.firstname == null) ? " " : params.defendants2.contactid.firstname;
                        var middelname2 = (params.defendants2.contactid.middelname == undefined || params.defendants2.contactid.middelname == null) ? " " : params.defendants2.contactid.middelname;
                        var lastname2 = (params.defendants2.contactid.lastname == undefined || params.defendants2.contactid.lastname == null) ? " " : params.defendants2.contactid.lastname;
                        fullName2 = (firstname2 + " " + middelname2 + " " + lastname2).trim();
                        state2 = (params.defendants2.contactid.state == undefined || params.defendants2.contactid.state == null) ? " " : params.defendants2.contactid.state;
                    }
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = [];
                    defedantsId[0] = angular.isDefined(params.defendants_single) ? parseInt(params.defendants_single) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defedantsId.push(parseInt(currentItem.defendantid));
                    });
                    angular.isDefined(params.plaintiff) ? palintiffId = parseInt(params.plaintiff.plaintiffid) : 0;
                    angular.isDefined(params.infantPlaintiff) ? minorPlaintiff = parseInt(params.infantPlaintiff.plaintiffid) : 0;
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: [palintiffId, minorPlaintiff],
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue17: fullName1,
                        uservalue18: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        uservalue21: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '',
                        uservalue28: angular.isDefined(params.guardianType) ? params.guardianType : '',
                        uservalue29: angular.isDefined(params.plantiffGuardianCounty) ? params.plantiffGuardianCounty : '',
                        uservalue19: state1,
                        uservalue20: fullName2,
                        uservalue22: state2,
                        uservalue6: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '',
                        uservalue26: angular.isDefined(params.defVehicleState) ? params.defVehicleState : '',
                        uservalue30: angular.isDefined(params.infantResidenceCounty) ? params.infantResidenceCounty : ''
                    }
                    break;
                case "F1153_62":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    var fullName1, fullName2, state1, state2;
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? " " : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? " " : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? " " : params.defendants1.contactid.lastname;
                        fullName1 = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                        state1 = (params.defendants1.contactid.state == undefined || params.defendants1.contactid.state == null) ? " " : params.defendants1.contactid.state;
                    }
                    if ((params.defendants2 != undefined) && (params.defendants2.contactid != undefined)) {
                        var firstname2 = (params.defendants2.contactid.firstname == undefined || params.defendants2.contactid.firstname == null) ? " " : params.defendants2.contactid.firstname;
                        var middelname2 = (params.defendants2.contactid.middelname == undefined || params.defendants2.contactid.middelname == null) ? " " : params.defendants2.contactid.middelname;
                        var lastname2 = (params.defendants2.contactid.lastname == undefined || params.defendants2.contactid.lastname == null) ? " " : params.defendants2.contactid.lastname;
                        fullName2 = (firstname2 + " " + middelname2 + " " + lastname2).trim();
                    }
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });

                    angular.isDefined(params.plaintiff) ? palintiffId = parseInt(params.plaintiff.plaintiffid) : 0;
                    angular.isDefined(params.infantPlaintiff) ? minorPlaintiff = parseInt(params.infantPlaintiff.plaintiffid) : 0;
                    /* End: Send All  Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2],
                        plaintiffId: [palintiffId, minorPlaintiff],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue17: fullName1,
                        uservalue20: fullName2,
                        uservalue21: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '',
                        uservalue23: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '',
                        uservalue25: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '',
                        uservalue33: angular.isDefined(params.hearingDate) ? moment.unix(params.hearingDate).utc().format('MMMM DD, YYYY') : '',
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId) : '',
                    }
                    break;
                case "F1153_63":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var fullName1, fullName2, state1, state2;
                    if ((params.defendants1 != undefined) && (params.defendants1.contactid != undefined)) {
                        var firstname1 = (params.defendants1.contactid.firstname == undefined || params.defendants1.contactid.firstname == null) ? " " : params.defendants1.contactid.firstname;
                        var middelname1 = (params.defendants1.contactid.middelname == undefined || params.defendants1.contactid.middelname == null) ? " " : params.defendants1.contactid.middelname;
                        var lastname1 = (params.defendants1.contactid.lastname == undefined || params.defendants1.contactid.lastname == null) ? " " : params.defendants1.contactid.lastname;
                        fullName1 = (firstname1 + " " + middelname1 + " " + lastname1).trim();
                        state1 = (params.defendants1.contactid.state == undefined || params.defendants1.contactid.state == null) ? " " : params.defendants1.contactid.state;
                    }
                    if ((params.defendants2 != undefined) && (params.defendants2.contactid != undefined)) {
                        var firstname2 = (params.defendants2.contactid.firstname == undefined || params.defendants2.contactid.firstname == null) ? " " : params.defendants2.contactid.firstname;
                        var middelname2 = (params.defendants2.contactid.middelname == undefined || params.defendants2.contactid.middelname == null) ? " " : params.defendants2.contactid.middelname;
                        var lastname2 = (params.defendants2.contactid.lastname == undefined || params.defendants2.contactid.lastname == null) ? " " : params.defendants2.contactid.lastname;
                        fullName2 = (firstname2 + " " + middelname2 + " " + lastname2).trim();
                        state2 = (params.defendants2.contactid.state == undefined || params.defendants2.contactid.state == null) ? " " : params.defendants2.contactid.state;
                    }
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        uservalue17: fullName1,
                        uservalue18: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        uservalue21: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '',
                        uservalue28: angular.isDefined(params.guardianType) ? params.guardianType : '',
                        uservalue29: angular.isDefined(params.plantiffGuardianCounty) ? params.plantiffGuardianCounty : '',
                        uservalue19: state1,
                        uservalue20: fullName2,
                        uservalue22: state2,
                        uservalue23: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '',
                        uservalue6: angular.isDefined(params.defVehicleNumber) ? params.defVehicleNumber : '',
                        uservalue31: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue25: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '',
                    }
                    break;
                case "F1153_65":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants1) ? parseInt(params.defendants1.defendantid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue17: angular.isDefined(params.accidentState) ? params.accidentState : '',
                        uservalue8: angular.isDefined(params.accidnetDescription) ? params.accidnetDescription : '',
                        uservalue32: angular.isDefined(params.defBusinessName) ? params.defBusinessName : '',
                        uservalue33: angular.isDefined(params.defBusinessAddress) ? params.defBusinessAddress : '',
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : ''
                    }
                    break;
                case "F1153_67":
                    var medicalProviderIds = [];
                    var medicalProviderTypes = [];
                    if (utils.isNotEmptyVal(vm.allMedicalProviders)) {
                        _.forEach(vm.allMedicalProviders, function (item) {
                            medicalProviderIds.push(parseInt(item.contactid));
                            medicalProviderTypes.push('Local');
                        });
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        medicalTreatmentId: angular.isDefined(params.physicianids) ? parseInt(params.physicianids.medicaltreatmentid) : 0,
                        contactId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue13: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MM/DD/YYYY') : '',
                        defendantId: angular.isDefined(params.defendants_single) ? [parseInt(params.defendants_single)] : [0],
                        medicalproviderid: angular.isDefined(medicalProviderIds) ? medicalProviderIds : [0],
                        medicalprovidertype: utils.isNotEmptyVal(medicalProviderTypes) ? medicalProviderTypes : [''],
                        uservalue12: angular.isDefined(params.userState) ? params.userState.toUpperCase() : '',
                        uservalue2: angular.isDefined(params.userCounty) ? params.userCounty.toUpperCase() : '',
                        uservalue25: angular.isDefined(params.hospitalproviderid) ? params.hospitalproviderid.contact_name : '',
                        userId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]
                    }
                    break;
                case "F1153_66":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        });
                    }
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        medicalTreatmentId: angular.isDefined(params.physicianids) ? parseInt(params.physicianids.medicaltreatmentid) : 0,
                        contactId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        contactTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        medicalproviderid: angular.isDefined(params.hospitalproviderid) ? [parseInt(params.hospitalproviderid.contactid)] : [0],
                        medicalprovidertype: ['Local'],
                        uservalue12: angular.isDefined(params.userState) ? params.userState.toUpperCase() : '',
                        uservalue2: angular.isDefined(params.userCounty) ? params.userCounty.toUpperCase() : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue9: angular.isDefined(params.dateOfMRI) ? moment.unix(params.dateOfMRI).utc().format('MMMM DD, YYYY') : '',
                        uservalue11: angular.isDefined(params.bodyPart) ? params.bodyPart : '',
                        uservalue15: angular.isDefined(params.mriNumber) ? params.mriNumber : '',
                        uservalue30: angular.isDefined(params.mriResult) ? params.mriResult : '',
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                    }
                    break;
                case "F1153_64":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(parseInt(currentItem.associated_party_id));
                            }
                        });
                    }
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        medicalTreatmentId: angular.isDefined(params.physicianids) ? parseInt(params.physicianids.medicaltreatmentid) : 0,
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        defendantId: angular.isDefined(defendantids) ? defendantids : [0],
                        medicalproviderid: angular.isDefined(params.hospitalproviderid) ? [parseInt(params.hospitalproviderid.contactid)] : [0],
                        medicalprovidertype: ['Local'],
                        uservalue12: angular.isDefined(params.userState) ? params.userState.toUpperCase() : '',
                        uservalue2: angular.isDefined(params.userCounty) ? params.userCounty.toUpperCase() : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue9: angular.isDefined(params.custodianName) ? params.custodianName : '',
                        uservalue11: angular.isDefined(params.bodyPart) ? params.bodyPart : '',
                        uservalue15: angular.isDefined(params.mriNumber) ? params.mriNumber : '',
                        uservalue29: angular.isDefined(params.signerName) ? params.signerName : '',
                        uservalue28: angular.isDefined(params.patientId) ? params.patientId : '',
                        uservalue8: angular.isDefined(params.medicalDateService) ? params.medicalDateService : '',
                        uservalue13: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD,YYYY') : '',
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1153_68":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    var defendantsId = [];
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantOperatorId: angular.isDefined(params.defendant2) ? [parseInt(params.defendant2)] : [0],
                        uservalue12: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue32: angular.isDefined(params.defBusinessName) ? params.defBusinessName : '',
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        uservalue23: angular.isDefined(params.defVehicleType) ? params.defVehicleType : '',
                        uservalue25: angular.isDefined(params.defVehicleRegistration) ? params.defVehicleRegistration : '',
                        uservalue37: angular.isDefined(params.locationOfIncidentCounty) ? params.locationOfIncidentCounty : '',
                        uservalue34: angular.isDefined(params.plaintiffVehicleType) ? params.plaintiffVehicleType : '',
                        uservalue35: angular.isDefined(params.plaintiffVehicleRegistrationState) ? params.plaintiffVehicleRegistrationState : '',
                        uservalue36: angular.isDefined(params.plaintiffVehicleRegistrationNumber) ? params.plaintiffVehicleRegistrationNumber : '',
                        uservalue18: angular.isDefined(params.userState) ? params.userState : '',
                        uservalue19: angular.isDefined(params.defResidenceState) ? params.defResidenceState : ''

                    }
                    break;
                case "F1153_69":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    var defendantsId = [];
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue37: angular.isDefined(params.locationOfIncidentCounty) ? params.locationOfIncidentCounty : '',
                        defendantOperatorId: angular.isDefined(params.defendant3) ? [parseInt(params.defendant3)] : [0],
                        defendantOwnerId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1153_70":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendant3) ? parseInt(params.defendant3) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        uservalue37: angular.isDefined(params.locationOfIncidentCounty) ? params.locationOfIncidentCounty : '',
                        uservalue32: angular.isDefined(params.entityHired) ? params.entityHired : '',
                        uservalue33: angular.isDefined(params.defendantAddress) ? params.defendantAddress : '',
                        uservalue15: angular.isDefined(params.defResidenceState) ? params.defResidenceState : '',
                        uservalue24: angular.isDefined(params.userState) ? params.userState : '',
                        defendantOperatorId: angular.isDefined(params.defendant2) ? [parseInt(params.defendant2)] : [0],
                        defendantOwnerId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1153_73":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendant3) ? parseInt(params.defendant3) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        uservalue32: angular.isDefined(params.entityHired) ? params.entityHired : '',
                        uservalue33: angular.isDefined(params.defendantAddress) ? params.defendantAddress : '',
                        defendantOperatorId: angular.isDefined(params.defendant2) ? [parseInt(params.defendant2)] : [0],
                        defendantOwnerId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]
                    }
                    break;
                case "F1090_1":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: utils.isNotEmptyVal(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0
                    }
                    break;
                case "F1153_71":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    /* Start: Send All Defendant ids without Showing UI */
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants3) ? parseInt(params.defendants3.defendantid) : 0,
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            defendantsId.push(parseInt(currentItem.defendantid));
                        });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        defendantOperatorId: angular.isDefined(params.defendants2) ? [parseInt(params.defendants2.defendantid)] : [0],
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue33: angular.isDefined(params.defBusinessAddress) ? params.defBusinessAddress : '',
                        uservalue14: angular.isDefined(params.defPremisesCounty) ? params.defPremisesCounty : '',
                        uservalue32: angular.isDefined(params.entityHiredPerformTask) ? params.entityHiredPerformTask : '',
                    }
                    break;
                case "F1090_3":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: utils.isNotEmptyVal(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0,
                        uservalue38: angular.isDefined(params.attoContactNumber) ? params.attoContactNumber : ''
                    }
                    break;
                case "F1153_72":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    /* Start: Send All Defendant ids without Showing UI */
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants3) ? parseInt(params.defendants3.defendantid) : 0,
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            defendantsId.push(parseInt(currentItem.defendantid));
                        });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: (params.leadattorneyid != undefined) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        uservalue33: angular.isDefined(params.defBusinessAddress) ? params.defBusinessAddress : ''
                    }
                    break;
                case "F1090_2":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: utils.isNotEmptyVal(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId) : 0,
                        uservalue38: angular.isDefined(params.attoContactNumber) ? params.attoContactNumber : '',

                    }
                    break;
                case "F1153_74":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    /* Start: Send All Defendant ids without Showing UI */
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants3) ? parseInt(params.defendants3.defendantid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        defendantOperatorId: angular.isDefined(params.defendants2) ? [parseInt(params.defendants2.defendantid)] : [0],
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        uservalue33: angular.isDefined(params.defBusinessAddress) ? params.defBusinessAddress : '',
                        uservalue24: angular.isDefined(params.defPremisesCounty) ? params.defPremisesCounty : '',
                        uservalue22: angular.isDefined(params.defPremisesAddress) ? params.defPremisesAddress : '',
                        uservalue32: angular.isDefined(params.entityHiredPerformTask) ? params.entityHiredPerformTask : ''
                    }
                    break;
                case "F1153_75":
                case "F1153_76":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    /* Start: Send All Defendant ids without Showing UI */
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants3) ? parseInt(params.defendants3.defendantid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        defendantOperatorId: angular.isDefined(params.defendants2) ? [parseInt(params.defendants2.defendantid)] : [0],
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        uservalue33: angular.isDefined(params.defBusinessAddress) ? params.defBusinessAddress : '',
                        uservalue24: angular.isDefined(params.defPremisesCounty) ? params.defPremisesCounty : '',
                        uservalue22: angular.isDefined(params.defPremisesAddress) ? params.defPremisesAddress : '',
                        uservalue32: angular.isDefined(params.entityHiredPerformTask) ? params.entityHiredPerformTask : '',
                    }
                    break;
                case "F1135_127":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1135_128":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(vm.TemplateModelInfo.matterId),
                        tz: moment.tz.guess(),
                        medicalproviderid: angular.isDefined(params.hospitalproviderid) ? [parseInt(params.hospitalproviderid.contactid)] : [0],
                        medicalprovidertype: ['Local'],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]

                    }
                    break;
                case "F1153_77":
                    var captionDoc1 = 0,
                        palintiffId = 0,
                        minorPlaintiff = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    /* End: Send All  Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        defendantOperatorId: angular.isDefined(params.defendants2) ? [parseInt(params.defendants2.defendantid)] : [0],
                        uservalue18: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        uservalue21: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '',
                        uservalue23: angular.isDefined(params.defVehicleType) ? params.defVehicleType : '',
                        uservalue25: angular.isDefined(params.defVehicleRegistration) ? params.defVehicleRegistration : '',
                    }
                    break;
                case "F1153_80":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var defendantsId = [];
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        uservalue12: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue18: angular.isDefined(params.defResidenceState) ? params.defResidenceState : '',
                        uservalue25: angular.isDefined(params.defVehicleRegistration) ? params.defVehicleRegistration : ''

                    }
                    break;
                case "F1153_82":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue18: angular.isDefined(params.locationOfIncidentCounty) ? params.locationOfIncidentCounty : '',
                        uservalue23: angular.isDefined(params.defVehicleType) ? params.defVehicleType : '',
                        uservalue25: angular.isDefined(params.defVehicleRegistration) ? params.defVehicleRegistration : '',
                        uservalue21: angular.isDefined(params.defVehicleOwner2) ? params.defVehicleOwner2 : '',
                        uservalue17: angular.isDefined(params.userState) ? params.userState : '',
                        uservalue4: angular.isDefined(params.entityHired) ? params.entityHired : ''
                    }
                    break;
                case "F1153_83":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0,
                        defendantfullName, firstname1, middelname1, lastname1;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants1) ? parseInt(params.defendants1.defendantid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? (params.plantiffResidenceCounty) : '',
                        uservalue23: angular.isDefined(params.volPageName) ? params.volPageName : '',
                        uservalue21: angular.isDefined(params.locationAccident) ? params.locationAccident : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue17: angular.isDefined(params.accidentState) ? params.accidentState : '',
                        uservalue24: angular.isDefined(params.annexName) ? params.annexName : '',
                        uservalue22: angular.isDefined(params.bigappleDate) ? moment.unix(params.bigappleDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue14: angular.isDefined(params.heldDateText) ? params.heldDateText : '',
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId.id) : '',
                    }
                    break;
                case "F1153_84":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var defendantsId = [];
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantOperatorId: angular.isDefined(params.defendant2) ? [parseInt(params.defendant2)] : [0],
                        uservalue40: angular.isDefined(params.defendantAddress) ? params.defendantAddress : '',
                        uservalue39: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        uservalue25: angular.isDefined(params.defVehicleRegistration) ? params.defVehicleRegistration : '',
                        uservalue18: angular.isDefined(params.entityHired) ? params.entityHired : '',
                        uservalue21: angular.isDefined(params.locationOfIncidentCounty) ? params.locationOfIncidentCounty : '',
                        uservalue12: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue17: angular.isDefined(params.userState) ? params.userState : '',
                        uservalue23: angular.isDefined(params.defVehicleType) ? params.defVehicleType : ''
                    }
                    break;
                case "F1153_78":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    /* Start: Send All Defendant ids without Showing UI */
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    /* End: Send All  Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '',
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        defendantOwnerId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        uservalue18: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        uservalue25: angular.isDefined(params.defVehicleRegistration) ? params.defVehicleRegistration : '',
                    }
                    break;
                case "F1153_81":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0,
                        ownerDef1 = 0,
                        ownerDef2 = 0,
                        operatorDef1 = 0,
                        operatorDef2 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    angular.isDefined(params.defendants1) ? ownerDef1 = parseInt(params.defendants1.defendantid) : '';
                    angular.isDefined(params.secDefOwner) ? ownerDef2 = parseInt(params.secDefOwner.defendantid) : '';
                    angular.isDefined(params.defendants2) ? operatorDef1 = parseInt(params.defendants2.defendantid) : '';
                    angular.isDefined(params.secDefOperator) ? operatorDef2 = parseInt(params.secDefOperator.defendantid) : '';
                    var defedantsId = _.map(vm.defendants_dropdown, function (currentItem) {
                        return parseInt(currentItem.defendantid)
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantId: angular.isDefined(defedantsId) ? defedantsId : [0],
                        defendantOwnerId: [ownerDef1, ownerDef2],
                        defendantOperatorId: [operatorDef1, operatorDef2],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? (params.plantiffResidenceCounty) : '',
                        uservalue21: angular.isDefined(params.locationAccident) ? params.locationAccident : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue17: angular.isDefined(params.accidentState) ? params.accidentState : '',
                        uservalue23: angular.isDefined(params.defVehicleType) ? params.defVehicleType : '',
                        uservalue27: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '',
                        uservalue25: angular.isDefined(params.defVehicleRegistration) ? params.defVehicleRegistration : '',
                        uservalue1: angular.isDefined(params.secDefVehicleRegistration) ? params.secDefVehicleRegistration : '',
                        uservalue40: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                    }
                    break;
                case "F1153_85":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0,
                        defendantfullName, firstname1, middelname1, lastname1;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    /* Start: Send All Defendant ids without Showing UI */
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants1) ? parseInt(params.defendants1.defendantid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? (params.plantiffResidenceCounty) : '',
                        uservalue21: angular.isDefined(params.locationAccident) ? params.locationAccident : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue17: angular.isDefined(params.accidentState) ? params.accidentState : '',
                        uservalue20: angular.isDefined(params.heldDate) ? moment.unix(params.heldDate).utc().format('MMMM DD, YYYY') : '',
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId.id) : '',
                        uservalue33: angular.isDefined(params.defBusinessAddress) ? params.defBusinessAddress : '',
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        defendantOwnerId: angular.isDefined(params.secDefOwner) ? [parseInt(params.secDefOwner.defendantid)] : [0],
                    }
                    break;
                case "F1153_87":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    /* Start: Send All Defendant ids without Showing UI */
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants3) ? parseInt(params.defendants3.defendantid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue17: angular.isDefined(params.userState) ? params.userState : '',
                        uservalue18: angular.isDefined(params.locationOfIncidentCounty) ? params.locationOfIncidentCounty : '',
                        uservalue33: angular.isDefined(params.defBusinessName) ? params.defBusinessName : ''
                    }
                    break;
                case "F1153_86":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0,
                        defendantfullName, firstname1, middelname1, lastname1;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    /* Start: Send All Defendant ids without Showing UI */
                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendants3) ? parseInt(params.defendants3.defendantid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    /* End: Send All Medical Defendant ids without Showing UI */
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantId: angular.isDefined(defendantsId) ? defendantsId : [0],
                        uservalue12: angular.isDefined(params.plantiffResidenceCounty) ? (params.plantiffResidenceCounty) : '',
                        uservalue18: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '',
                        uservalue17: angular.isDefined(params.accidentState) ? params.accidentState : '',
                        uservalue14: angular.isDefined(params.heldDateText) ? params.heldDateText : '',
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId.id) : '',
                        uservalue31: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '',
                        defendantPrivateOwnerId: angular.isDefined(params.defendants1) ? [parseInt(params.defendants1.defendantid)] : [0],
                        uservalue4: angular.isDefined(params.DefendantResidencCounty) ? params.DefendantResidencCounty : '',
                    }
                    break;
                case "F1153_88":
                case "F1153_91":
                    var defendantnames = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantnames.push(currentItem.name);
                            }
                        });
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        uservalue5: angular.isDefined(defendantnames) ? defendantnames.join(', ') : '',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        uservalue36: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue37: angular.isDefined(params.serviceComplatedDate) ? moment.unix(params.serviceComplatedDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue38: angular.isDefined(params.issueJoinedDate) ? moment.unix(params.issueJoinedDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue34: angular.isDefined(params.courtCounty) ? params.courtCounty : '',
                        uservalue35: angular.isDefined(params.assignJudge) ? params.assignJudge : '',
                        uservalue39: angular.isDefined(params.calenderNumber) ? params.calenderNumber : ''

                    }
                    break;
                case "F1153_89":
                    var defendantnames = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantnames.push(currentItem.name);
                            }
                        });
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        uservalue5: angular.isDefined(defendantnames) ? defendantnames.join(', ') : '',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        uservalue12: angular.isDefined(params.userState) ? params.userState : '',
                        uservalue2: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue38: angular.isDefined(params.IndexDate) ? moment.unix(params.IndexDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue34: angular.isDefined(params.courtCounty) ? params.courtCounty : '',
                    }
                    break;
                case "F1164_27":
                case "F1164_29":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]
                    }
                    break;
                case "F1164_28":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0]
                    }
                    break;
                case "F1164_30":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue8: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM DD,YYYY') : '',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1164_31":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : undefined
                    }
                    break;
                case "F1164_32":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : undefined,
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                    }
                    break;
                case "F1153_92":
                    var captionDoc1 = 0,
                        captionDoc2 = 0,
                        captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        });
                    }
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : undefined,
                        medicalprovidertype: [type],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue5: defendantids.join(', '),
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue9: angular.isDefined(params.custodianName) ? params.custodianName : '',
                        uservalue10: angular.isDefined(params.entityName) ? params.entityName : '',
                        witnessId: angular.isDefined(params.witnessId) ? [parseInt(params.witnessId.contactid)] : [0],
                        uservalue12: angular.isDefined(params.userState) ? params.userState : '',
                        uservalue2: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue35: angular.isDefined(params.custodianCounty) ? params.custodianCounty : '',
                        uservalue36: angular.isDefined(params.custodianState) ? params.custodianState : '',
                    }
                    break;
                case "F1164_33":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceid: angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : undefined,
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                    }
                    break;
                case "F1153_93":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        });
                    }
                    var medicalProviderSelection = [];
                    var medicalProviderType = [];
                    medicalProviderSelection[0] = utils.isNotEmptyVal(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medicalProviderSelection[0] == 0 ? medicalProviderType[0] = '' : medicalProviderType[0] = 'Local';

                    if (utils.isNotEmptyVal(vm.allMedicalProviders)) {
                        _.forEach(vm.allMedicalProviders, function (currentItem) {
                            medicalProviderSelection.push(parseInt(currentItem.contactid));
                            medicalProviderType.push('Local');
                        });
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(medicalProviderSelection) ? medicalProviderSelection : [0],
                        medicalprovidertype: angular.isDefined(medicalProviderType) ? medicalProviderType : [''],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        uservalue13: angular.isDefined(params.reportDate) ? moment.unix(params.reportDate).utc().format('MMMM DD, YYYY') : '',
                        uservalue14: angular.isDefined(params.dateOfMRI) ? moment.unix(params.dateOfMRI).utc().format('MMMM DD, YYYY') : '',
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        uservalue2: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue12: angular.isDefined(params.userState) ? params.userState : '',
                        uservalue5: angular.isDefined(defendantids) ? defendantids.join(",") : ''
                    }
                    break;
                case "F1135_130":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1135_129":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]
                    }
                    break;
                case "F1135_131":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1210_1":
                case "F1210_3":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.estateAdminId) ? [parseInt(params.estateAdminId.contactid)] : [0],
                        contactType: angular.isDefined(params.estateAdminId) ? params.estateAdminId.contact_type : ''
                    }
                    break;
                case "F1210_2":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1210_4":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId) : 0,
                        uservalue19: angular.isDefined(params.hearingDate) ? moment.unix(params.hearingDate).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1210_5":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        uservalue29: angular.isDefined(params.depositionDate) ? moment.unix(params.depositionDate).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1210_6":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue6: angular.isDefined(params.ebt_Date) ? moment.unix(params.ebt_Date).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1135_132":
                    var insuranceIds = [];
                    var insurance1, insurance2;
                    insurance1 = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insurance2 = angular.isDefined(params.onlyInsuranceId2) ? parseInt(params.onlyInsuranceId2.insuranceid) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue18: angular.isDefined(params.claimDeny_Date) ? moment.unix(params.claimDeny_Date).utc().format('MMMM D, YYYY') : '',
                        uservalue8: utils.isNotEmptyVal(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '',
                        insuranceIds: [insurance1, insurance2],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1210_7":
                case "F1210_8":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.imeeventid) ? parseInt(params.imeeventid) : 0,
                        contactId: angular.isDefined(params.otherPartyPhysician) ? [parseInt(params.otherPartyPhysician.contactid)] : [0],
                        contactType: angular.isDefined(params.otherPartyPhysician) ? params.otherPartyPhysician.contact_type : ''
                    }
                    break;
                case "F1135_133":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.imeeventid) ? parseInt(params.imeeventid) : 0,
                        contactId: angular.isDefined(params.otherPartyPhysician) ? [parseInt(params.otherPartyPhysician.contactid)] : [0],
                        contactType: angular.isDefined(params.otherPartyPhysician) ? params.otherPartyPhysician.contact_type : '',
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1210_9":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue30: angular.isDefined(params.ebt_Date) ? moment.unix(params.ebt_Date).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1135_134":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : ''
                    }
                    break;
                case "F1135_136":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                        contactId: angular.isDefined(params.otherPartyPhysician) ? [parseInt(params.otherPartyPhysician.contactid)] : [0],
                        contactType: angular.isDefined(params.otherPartyPhysician) ? params.otherPartyPhysician.contact_type : '',
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1135_135":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                        contactId: angular.isDefined(params.otherPartyPhysician) ? [parseInt(params.otherPartyPhysician.contactid)] : [0],
                        contactType: angular.isDefined(params.otherPartyPhysician) ? params.otherPartyPhysician.contact_type : '',
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue38: angular.isDefined(params.defendantAttorneyTitle) ? params.defendantAttorneyTitle : ''
                    }
                    break;
                case "F1135_137":
                    // var zone = new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];
                    // tz: moment.tz.guess()
                    if (params.defendantLawFirm != undefined) {
                        var contactID = parseInt(params.defendantLawFirm.contactid);
                        var defendantContactTypes = params.defendantLawFirm.contact_type;
                    }
                    var contactId = [];
                    var contact1, contact2, contactType1, contactType2;
                    contact1 = angular.isDefined(params.otherPartyPhysician) ? parseInt(params.otherPartyPhysician.contactid) : 0;
                    contact2 = angular.isDefined(params.defendantLawFirm) ? contactID : 0;
                    contactType1 = angular.isDefined(params.otherPartyPhysician) ? params.otherPartyPhysician.contact_type : '';
                    contactType2 = angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : '';
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.imeeventid) ? parseInt(params.imeeventid) : 0,
                        contactId: [contact1, contact2],
                        contactTypes: [contactType1, contactType2],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1210_12":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : ''
                    }
                    break;
                case "F1210_13":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '',
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        uservalue31: angular.isDefined(params.depositionParties) ? params.depositionParties : '',
                        uservalue28: angular.isDefined(params.conferenceHeldDate) ? moment.unix(params.conferenceHeldDate).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1210_14":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue33: angular.isDefined(params.depositionTransEnclosure) ? moment.unix(params.depositionTransEnclosure).utc().format('MMMM D, YYYY') : '',
                        uservalue30: angular.isDefined(params.depositionHeldDate) ? moment.unix(params.depositionHeldDate).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1210_10":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue34: angular.isDefined(params.ebt_Date_Taken) ? moment.unix(params.ebt_Date_Taken).utc().format('MMMM D, YYYY') : '',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : ''
                    }
                    break;
                case "F1210_11":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue39: angular.isDefined(params.ebt_Date_Enclosure) ? moment.unix(params.ebt_Date_Enclosure).utc().format('MMMM D, YYYY') : '',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        uservalue1: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : ''
                    }
                    break;
                case "F1210_18":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue36: angular.isDefined(params.blueback_document) ? params.blueback_document : '',
                        captionId: angular.isDefined(params.captionDocumentId) ? captionDoc1 = [parseInt(params.captionDocumentId)] : [0]
                    }
                    break;
                case "F1210_25":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0]
                    }
                    break;
                case "F1214_1":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        uservalue9: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        staffId: angular.isDefined(params.staffId) ? [parseInt(params.staffId)] : [0]
                    }
                    break;
                case "F1210_15":
                    var medicalProviderSelection = [];
                    var medicalProviderType = [];
                    medicalProviderSelection[0] = utils.isNotEmptyVal(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medicalProviderSelection[0] == 0 ? medicalProviderType[0] = '' : medicalProviderType[0] = 'Local';

                    if (utils.isNotEmptyVal(vm.allMedicalProviders)) {
                        _.forEach(vm.allMedicalProviders, function (currentItem) {
                            medicalProviderSelection.push(parseInt(currentItem.contactid));
                            medicalProviderType.push('Local');
                        });
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(medicalProviderSelection) ? medicalProviderSelection : [0],
                        medicalprovidertype: angular.isDefined(medicalProviderType) ? medicalProviderType : [''],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1210_16":
                    var medicalProviderSelection = [];
                    var medicalProviderType = [];
                    medicalProviderSelection[0] = utils.isNotEmptyVal(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medicalProviderSelection[0] == 0 ? medicalProviderType[0] = '' : medicalProviderType[0] = 'Local';

                    if (utils.isNotEmptyVal(vm.allMedicalProviders)) {
                        _.forEach(vm.allMedicalProviders, function (currentItem) {
                            medicalProviderSelection.push(parseInt(currentItem.contactid));
                            medicalProviderType.push('Local');
                        });
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(medicalProviderSelection) ? medicalProviderSelection : [0],
                        medicalprovidertype: angular.isDefined(medicalProviderType) ? medicalProviderType : [''],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1210_17":
                    var medicalProviderSelection = [];
                    var medicalProviderType = [];
                    medicalProviderSelection[0] = utils.isNotEmptyVal(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medicalProviderSelection[0] == 0 ? medicalProviderType[0] = '' : medicalProviderType[0] = 'Local';

                    if (utils.isNotEmptyVal(vm.allMedicalProviders)) {
                        _.forEach(vm.allMedicalProviders, function (currentItem) {
                            medicalProviderSelection.push(parseInt(currentItem.contactid));
                            medicalProviderType.push('Local');
                        });
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(medicalProviderSelection) ? medicalProviderSelection : [0],
                        medicalprovidertype: angular.isDefined(medicalProviderType) ? medicalProviderType : [''],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1214_2":
                    var medType = "Local";
                    if (params.medicalproviderid1 && params.medicalproviderid1.contact_type) {
                        medType = params.medicalproviderid1.contact_type == "Global" ? "Global" : "Local";
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid1) ? [parseInt(params.medicalproviderid1.contactid)] : [0],
                        medicalprovidertype: [medType],
                        staffId: angular.isDefined(params.staffId) ? [parseInt(params.staffId)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1007_1":
                case "F1007_2":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        eventId: angular.isDefined(params.soleventid) ? parseInt(params.soleventid) : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0]
                    }
                    break;
                case "F1007_4":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue8: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('MMMM D, YYYY') : '',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1007_5":
                case "F1007_7":
                case "F1007_8":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0]
                    }
                    break;
                case "F1007_6":
                case "F1164_36":
                case "F1153_98":
                case "F1153_99":
                case "F1153_110":
                case "F1164_49":
                case "F1164_50":
                case "F1153_122":
                case "F1153_123":
                case "F1153_124":
                case "F1153_119":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1214_3":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        staffId: angular.isDefined(params.staffId) ? [parseInt(params.staffId)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1214_4":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        uservalue40: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0]
                    }
                    break;
                case "F1214_5":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        uservalue40: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '',
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0]
                    }
                    break;
                case "F1007_3":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        uservalue8: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1210_21":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue21: angular.isDefined(params.payeeName) ? params.payeeName : '',
                        uservalue8: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : '',
                        uservalue23: angular.isDefined(params.checkPurpose) ? params.checkPurpose : '',
                        uservalue25: angular.isDefined(params.submittedName) ? params.submittedName : '',
                        uservalue33: angular.isDefined(params.checkNumber) ? params.checkNumber : '',
                        uservalue35: angular.isDefined(params.check_Date) ? moment.unix(params.check_Date).utc().format('MMMM D, YYYY') : '',
                        uservalue32: angular.isDefined(params.request_Date) ? moment.unix(params.request_Date).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1210_22":
                    var medicalProviderSelection = [];
                    var medicalProviderType = [];
                    medicalProviderSelection[0] = utils.isNotEmptyVal(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medicalProviderSelection[0] == 0 ? medicalProviderType[0] = '' : medicalProviderType[0] = 'Local';

                    if (utils.isNotEmptyVal(vm.allMedicalProviders)) {
                        _.forEach(vm.allMedicalProviders, function (currentItem) {
                            medicalProviderSelection.push(parseInt(currentItem.contactid));
                            medicalProviderType.push('Local');
                        });
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(medicalProviderSelection) ? medicalProviderSelection : [0],
                        medicalprovidertype: angular.isDefined(medicalProviderType) ? medicalProviderType : [''],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1210_23":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];
                    var defendantid = [];

                    if (utils.isNotEmptyVal(vm.defendadefendantAttorneysIds)) {
                        _.forEach(vm.defendadefendantAttorneysIds, function (item) {
                            defendantAttorneyid.push(item.contactid);
                            defendantAttorneytypes.push(item.contact_type);
                            _.forEach(item.party_contact_id, function (currentItem) {
                                if (currentItem.party_role == "defendant") {
                                    defendantid.push(currentItem.contactid);
                                }
                            })
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(defendantid) ? defendantid : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        uservalue7: angular.isDefined(params.authorization_Date) ? moment.unix(params.authorization_Date).utc().format('MMMM D, YYYY') : ''
                    }
                    break;

                case "F1210_20":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];
                    var defendantid = [];

                    if (utils.isNotEmptyVal(vm.defendadefendantAttorneysIds)) {
                        _.forEach(vm.defendadefendantAttorneysIds, function (item) {
                            defendantAttorneyid.push(item.contactid);
                            defendantAttorneytypes.push(item.contact_type);
                            _.forEach(item.party_contact_id, function (currentItem) {
                                if (currentItem.party_role == "defendant") {
                                    defendantid.push(currentItem.contactid);
                                }
                            })
                        })
                    }

                    var captionDoc1, captionDoc2, captionDoc3;
                    captionDoc1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionDoc2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionDoc3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(defendantid) ? defendantid : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue2: angular.isDefined(params.userCounty) ? params.userCounty : '',
                        uservalue12: angular.isDefined(params.userState) ? params.userState : '',
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0]
                    }
                    break;
                case "F1210_24":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.deceasedPlaintiffs) ? [parseInt(params.deceasedPlaintiffs.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue39: angular.isDefined(params.akaName) ? params.akaName : '',
                        uservalue16: angular.isDefined(params.willDate) ? moment.unix(params.willDate).utc().format('MMMM D, YYYY') : '',
                        uservalue34: angular.isDefined(params.deathPlace) ? params.deathPlace : '',
                        uservalue12: angular.isDefined(params.decedentResidentCounty) ? params.decedentResidentCounty : '',
                        uservalue37: angular.isDefined(params.decedentCitizenship) ? params.decedentCitizenship : '',
                        uservalue41: angular.isDefined(params.petitionerName) ? params.petitionerName : '',
                        uservalue42: angular.isDefined(params.petitionerStreet) ? params.petitionerStreet : '',
                        uservalue43: angular.isDefined(params.petitionerCityStateZip) ? params.petitionerCityStateZip : '',
                        uservalue44: angular.isDefined(params.petitionerCitizenship) ? params.petitionerCitizenship : '',
                        uservalue14: angular.isDefined(params.witnessName) ? params.witnessName : ''
                    }
                    break;
                case "F1153_94":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : ''
                    }
                    break;
                case "F1153_95":
                case "F1153_108":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId) : 0
                    }
                    break;
                case "F1153_96":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0
                    }
                    break;
                case "F1153_97":
                case "F1153_101":
                case "F1153_103":
                case "F1153_104":
                case "F1153_105":
                case "F1153_106":
                case "F1153_107":
                case "F1153_113":
                case "F1153_114":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0]
                    }
                    break;
                case "F1210_27":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue34: angular.isDefined(params.dateOfLetters) ? moment.unix(params.dateOfLetters).utc().format('MMMM D, YYYY') : '',
                        uservalue30: angular.isDefined(params.typeOfLetters) ? params.typeOfLetters : '',
                        uservalue41: angular.isDefined(params.fiduciaryName) ? params.fiduciaryName : '',
                        uservalue3: angular.isDefined(params.userAddress) ? params.userAddress : '',
                        uservalue38: angular.isDefined(params.attoContactNumber) ? params.attoContactNumber : ''
                    }
                    break;
                case "F1164_34":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue8: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('MMMM D, YYYY') : '',
                        uservalue42: angular.isDefined(params.medicatedId) ? params.medicatedId : ''
                    }
                    break;
                case "F1164_35":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue8: angular.isDefined(params.accidnetDescription) ? params.accidnetDescription : '',
                        uservalue41: angular.isDefined(params.hicNumber) ? params.hicNumber : '',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0]
                    }
                    break;
                case "F1210_26":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.deceasedPlaintiffs) ? [parseInt(params.deceasedPlaintiffs.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        uservalue39: angular.isDefined(params.akaName) ? params.akaName : '',
                        uservalue41: angular.isDefined(params.petitionerName) ? params.petitionerName : '',
                        uservalue42: angular.isDefined(params.petitionerStreet) ? params.petitionerStreet : '',
                        uservalue36: angular.isDefined(params.petitionerCityStateZip) ? params.petitionerCityStateZip : '',
                        uservalue40: angular.isDefined(params.petitionerCitizenship) ? params.petitionerCitizenship : '',
                        uservalue31: angular.isDefined(params.userState) ? params.userState : '',
                        uservalue32: angular.isDefined(params.petitionerZip) ? params.petitionerZip : '',
                        uservalue33: angular.isDefined(params.petitionerContact) ? params.petitionerContact : '',
                        uservalue34: angular.isDefined(params.deathPlace) ? params.deathPlace : '',
                        uservalue27: angular.isDefined(params.decedentCitizenship) ? params.decedentCitizenship : '',
                        uservalue28: angular.isDefined(params.decedentResidentCounty) ? params.decedentResidentCounty : '',
                        uservalue3: angular.isDefined(params.userAddress) ? params.userAddress : '',
                        uservalue38: angular.isDefined(params.attoContactNumber) ? params.attoContactNumber : ''
                    }
                    break;
                case "F1164_37":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue44: angular.isDefined(params.groupNum) ? params.groupNum : '',
                        uservalue43: angular.isDefined(params.assignUserId) ? params.assignUserId : '',
                        uservalue42: angular.isDefined(params.cardHolderName) ? params.cardHolderName : '',
                        uservalue8: angular.isDefined(params.accidnetDescription) ? params.accidnetDescription : '',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0]
                    }
                    break;
                case "F1164_38":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue44: angular.isDefined(params.groupNum) ? params.groupNum : '',
                        uservalue43: angular.isDefined(params.assignUserId) ? params.assignUserId : '',
                        uservalue42: angular.isDefined(params.cardHolderName) ? params.cardHolderName : '',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0]
                    }
                    break;
                case "F1164_39":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue12: angular.isDefined(params.summonNumber) ? params.summonNumber : '',
                        uservalue44: angular.isDefined(params.hearingDate) ? moment.unix(params.hearingDate).utc().format('MMMM D, YYYY') : '',
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1164_40":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue12: angular.isDefined(params.summonNumber) ? params.summonNumber : '',
                        uservalue44: angular.isDefined(params.hearingDate) ? moment.unix(params.hearingDate).utc().format('MMMM D, YYYY') : '',
                        uservalue8: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : ''
                    }
                    break;
                case "F1153_100":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        uservalue27: angular.isDefined(params.checkAmount) ? params.checkAmount : '',
                        uservalue8: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : ''
                    }
                    break;
                case "F1164_41":
                    var hospitalSelection = [];
                    var hospitalType = [];
                    if (utils.isNotEmptyVal(vm.filterOtherPartyHospital)) {
                        _.forEach(vm.filterOtherPartyHospital, function (currentItem) {
                            hospitalSelection.push(parseInt(currentItem.contactid));
                            hospitalType.push('Local');
                        });
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        hospitalId: angular.isDefined(hospitalSelection) ? hospitalSelection : [0],
                        hospitalType: angular.isDefined(hospitalType) ? hospitalType : ['']
                    }
                    break;
                case "F1164_42":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        uservalue8: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('MMMM D, YYYY') : '',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1164_43":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DATE_OF_SERVICE: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('MMMM D, YYYY') : '{DATE_OF_SERVICE}',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2)
                    }
                    break;
                case "F1164_45":
                case "F1164_48":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1164_44":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var type = "Local";
                    if (params.plaintiffEmployerIds != undefined) {
                        type = (params.plaintiffEmployerIds.is_global == "1") ? "Global" : "Local";
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: [type],
                        BILL_DATE: angular.isDefined(params.bill_Date) ? moment.unix(params.bill_Date).utc().format('MMMM D, YYYY') : '{BILL_DATE}',
                        DATE_OF_SERVICE: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('MMMM D, YYYY') : '{DATE_OF_SERVICE}',
                        GROUP_NUMBER: angular.isDefined(params.groupNum) ? params.groupNum : '{GROUP_NUMBER}',
                        ID_NUMBER: angular.isDefined(params.assignUserId) ? params.assignUserId : '{ID_NUMBER}',
                        CARD_HOLDER_NAME: angular.isDefined(params.cardHolderName) ? params.cardHolderName : '{CARD_HOLDER_NAME}',
                    }
                    break;
                case "F1153_109":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        BASIS_OF_DENIAL: angular.isDefined(params.denialBasis) ? params.denialBasis : '{BASIS_OF_DENIAL}',
                        DENIAL_EFFECTIVE_DATE: angular.isDefined(params.denial_Date) ? moment.unix(params.denial_Date).utc().format('MMMM D, YYYY') : '{DENIAL_EFFECTIVE_DATE}'
                    }
                    break;
                case "F1153_111":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DOCUMENT_NAME: angular.isDefined(params.document_name) ? params.document_name : '{DOCUMENT_NAME}'
                    }
                    break;
                case "F1153_102":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                        uservalue8: angular.isDefined(params.JudgeName) ? params.JudgeName : '',
                        uservalue11: angular.isDefined(params.roomNumber) ? params.roomNumber : '',
                        uservalue13: angular.isDefined(params.trialDate) ? moment.unix(params.trialDate).utc().format('MMMM D, YYYY') : ''
                    }
                    break;
                case "F1153_112":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        eventId: angular.isDefined(params.eoueventId) ? parseInt(params.eoueventId) : 0
                    }
                    break;
                case "F1164_46":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        GENERAL_INFORMATION: angular.isDefined(params.generalInfo) ? params.generalInfo : '{GENERAL_INFORMATION}',
                        EDUCATION: angular.isDefined(params.educationInfo) ? params.educationInfo : '{EDUCATION}',
                        EMPLOYMENT: angular.isDefined(params.employmentInfo) ? params.employmentInfo : '{EMPLOYMENT}',
                        AFFILIATIONS: angular.isDefined(params.affiliationInfo) ? params.affiliationInfo : '{AFFILIATIONS}',
                        AWARDS: angular.isDefined(params.awards) ? params.awards : '{AWARDS}',
                        PROFESSIONAL_EXPERIENCE: angular.isDefined(params.professionalExperience) ? params.professionalExperience : '{PROFESSIONAL_EXPERIENCE}',
                        AWARDS_AND_HONORS: angular.isDefined(params.awardsHonors) ? params.awardsHonors : '{AWARDS_AND_HONORS}',
                        PROFESSIONAL_ASSOCIATION_POSITIONS: angular.isDefined(params.professionalPosition) ? params.professionalPosition : '{PROFESSIONAL_ASSOCIATION_POSITIONS}',
                        COMMUNITY_OUTREACH: angular.isDefined(params.communityOutreach) ? params.communityOutreach : '{COMMUNITY_OUTREACH}',
                        SPEAKING_ENGAGEMENTS: angular.isDefined(params.speakingEngagement) ? params.speakingEngagement : '{SPEAKING_ENGAGEMENTS}',
                        PUBLICATIONS: angular.isDefined(params.publicationInfo) ? params.publicationInfo : '{PUBLICATIONS}'
                    }
                    break;
                case "F1164_47":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0
                    }
                    break;
                case "F1153_118":
                case "F1153_115":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DATE_OF_LETTERS: angular.isDefined(params.dateOfLetters) ? moment.unix(params.dateOfLetters).utc().format('MMMM D, YYYY') : '{DATE_OF_LETTERS}'
                    }
                    break;
                case "F1153_116":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        BILL_TYPE: angular.isDefined(params.billType) ? params.billType : '{BILL_TYPE}'
                    }
                    break;
                case "F1153_117":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2)
                    }
                    break;
                case "F1153_121":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1164_1020":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        SPOUSE_NAME: angular.isDefined(params.spouse) ? params.spouse.new_contact_name : '{SPOUSE_NAME}'
                    }
                    break;
                case "F1164_1022":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2)
                    }
                    break;
                case "F1164_1023":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : '',
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        COURT_FAX: angular.isDefined(params.courtFax) ? params.courtFax : '{COURT_FAX}',
                        ARBITRATION_CANCELLATION_NAME: angular.isDefined(params.cancelArbitration) ? params.cancelArbitration : '{ARBITRATION_CANCELLATION_NAME}'
                    }
                    break;
                case "F1164_1024":
                case "F1164_1025":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        JUDGE_FULLNAME: angular.isDefined(params.judgeName) ? params.judgeName : '{JUDGE_FULLNAME}',
                        JUDGE_LASTNAME: angular.isDefined(params.judgeLastName) ? params.judgeLastName : '{JUDGE_LASTNAME}'
                    }
                    break;
                case "F1164_1026":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        JUDGE_FAX: angular.isDefined(params.judgeFax) ? params.judgeFax : '{JUDGE_FAX}',
                        JUDGE_FULLNAME: angular.isDefined(params.judgeName) ? params.judgeName : '{JUDGE_FULLNAME}',
                        JUDGE_LASTNAME: angular.isDefined(params.judgeLastName) ? params.judgeLastName : '{JUDGE_LASTNAME}'
                    }
                    break;
                case "F1164_1027":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        JUDGE_FAX: angular.isDefined(params.judgeFax) ? params.judgeFax : '{JUDGE_FAX}',
                        JUDGE_FULLNAME: angular.isDefined(params.judgeName) ? params.judgeName : '{JUDGE_FULLNAME}',
                        JUDGE_LASTNAME: angular.isDefined(params.judgeLastName) ? params.judgeLastName : '{JUDGE_LASTNAME}',
                        JUDGE_STREET: angular.isDefined(params.judgeStreet) ? params.judgeStreet : '{JUDGE_STREET}',
                        JUDGE_CITY: angular.isDefined(params.judgeCity) ? params.judgeCity : '{JUDGE_CITY}',
                        JUDGE_STATE: angular.isDefined(params.judgeState) ? params.judgeState : '{JUDGE_STATE}',
                        JUDGE_ZIP: angular.isDefined(params.judgeZip) ? params.judgeZip : '{JUDGE_ZIP}'
                    }
                    break;
                case "F1164_1028":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        CIVIL_TEAM_LEADER_FAX_NUMBER: angular.isDefined(params.civilTeamLeadFax) ? params.civilTeamLeadFax : '{CIVIL_TEAM_LEADER_FAX_NUMBER}',
                        CIVIL_TEAM_LEADER_FULLNAME: angular.isDefined(params.civilTeamLeadName) ? params.civilTeamLeadName : '{CIVIL_TEAM_LEADER_FULLNAME}',
                        CIVIL_TEAM_LEADER_LASTNAME: angular.isDefined(params.civilTeamLeadLastName) ? params.civilTeamLeadLastName : '{CIVIL_TEAM_LEADER_LASTNAME}',
                        CIVIL_TEAM_LEADER_STREET: angular.isDefined(params.civilTeamLeadStreet) ? params.civilTeamLeadStreet : '{CIVIL_TEAM_LEADER_STREET}',
                        CIVIL_TEAM_LEADER_CITY: angular.isDefined(params.civilTeamLeadCity) ? params.civilTeamLeadCity : '{CIVIL_TEAM_LEADER_CITY}',
                        CIVIL_TEAM_LEADER_STATE: angular.isDefined(params.civilTeamLeadState) ? params.civilTeamLeadState : '{CIVIL_TEAM_LEADER_STATE}',
                        CIVIL_TEAM_LEADER_ZIP: angular.isDefined(params.civilTeamLeadZip) ? params.civilTeamLeadZip : '{CIVIL_TEAM_LEADER_ZIP}',
                        DISCOVER_EXTENDED_DATE_FROM: angular.isDefined(params.from_discovery_date) ? moment.unix(params.from_discovery_date).utc().format('MMMM D, YYYY') : '{DISCOVER_EXTENDED_DATE_FROM}',
                        DISCOVER_EXTENDED_DATE_TO: angular.isDefined(params.to_discovery_date) ? moment.unix(params.to_discovery_date).utc().format('MMMM D, YYYY') : '{DISCOVER_EXTENDED_DATE_TO}',
                        CIVIL_TEAM_LEADER_TITLE: angular.isDefined(params.title) ? params.title.id : '{CIVIL_TEAM_LEADER_TITLE}'
                    }
                    break;
                case "F1164_1029":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        CIVIL_TEAM_LEADER_FULLNAME: angular.isDefined(params.civilTeamLeadName) ? params.civilTeamLeadName : '{CIVIL_TEAM_LEADER_FULLNAME}',
                        CIVIL_TEAM_LEADER_LASTNAME: angular.isDefined(params.civilTeamLeadLastName) ? params.civilTeamLeadLastName : '{CIVIL_TEAM_LEADER_LASTNAME}',
                        CIVIL_TEAM_LEADER_STREET: angular.isDefined(params.civilTeamLeadStreet) ? params.civilTeamLeadStreet : '{CIVIL_TEAM_LEADER_STREET}',
                        CIVIL_TEAM_LEADER_CITY: angular.isDefined(params.civilTeamLeadCity) ? params.civilTeamLeadCity : '{CIVIL_TEAM_LEADER_CITY}',
                        CIVIL_TEAM_LEADER_STATE: angular.isDefined(params.civilTeamLeadState) ? params.civilTeamLeadState : '{CIVIL_TEAM_LEADER_STATE}',
                        CIVIL_TEAM_LEADER_ZIP: angular.isDefined(params.civilTeamLeadZip) ? params.civilTeamLeadZip : '{CIVIL_TEAM_LEADER_ZIP}',
                        CONFERENCE_DATE: angular.isDefined(params.conferenceHeldDate) ? moment.unix(params.conferenceHeldDate).utc().format('MMMM D, YYYY') : '{CONFERENCE_DATE}',
                        CIVIL_TEAM_LEADER_TITLE: angular.isDefined(params.title) ? params.title.id : '{CIVIL_TEAM_LEADER_TITLE}'
                    }
                    break;
                case "F1164_1002":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        SUMMONS_NUMBER: utils.isEmptyVal(params.summonNumber) ? '{SUMMONS_NUMBER}' : params.summonNumber,
                        SUMMONS_CHARGE: utils.isEmptyVal(params.chargeNumber) ? '{SUMMONS_CHARGE}' : $filter('currency')(params.chargeNumber, '', 2),
                        HEARING_DATE: angular.isDefined(params.hearingDate) ? moment.unix(params.hearingDate).utc().format('MMMM D, YYYY') : '{HEARING_DATE}',
                    }
                    break;
                case "F1164_1031":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        DEPOSITION_OLD_DATE: angular.isDefined(params.depositionDate) ? moment.unix(params.depositionDate).utc().format('MMMM D, YYYY') : '{DEPOSITION_OLD_DATE}'
                    }
                    break;
                case "F1164_1033":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? moment.unix(params.treatmentDate.servicedate).utc().format('MMMM D, YYYY') + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY') : '{DATE_OF_SERVICE}',
                        MEDICAID_ID_NUMBER: angular.isDefined(params.medicatedId) ? params.medicatedId : '{MEDICAID_ID_NUMBER}',
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers3) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers3, '', 2),
                        BILL_DATE: angular.isDefined(params.bill_Date) ? moment.unix(params.bill_Date).utc().format('MMMM D, YYYY') : '{BILL_DATE}'
                    }
                    break;
                case "F1164_1034":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? moment.unix(params.treatmentDate.servicedate).utc().format('MMMM D, YYYY') + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY') : '{DATE_OF_SERVICE}',
                        HIC_NUMBER: utils.isEmptyVal(params.hicNumber) ? '{HIC_NUMBER}' : params.hicNumber,
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers3) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers3, '', 2),
                        BILL_DATE: angular.isDefined(params.bill_Date) ? moment.unix(params.bill_Date).utc().format('MMMM D, YYYY') : '{BILL_DATE}'
                    }
                    break;
                case "F1164_1030":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        SCHOOL_CONTACT_EMAILID: utils.isEmptyVal(params.mailId) ? '{SCHOOL_CONTACT_EMAILID}' : params.mailId,
                        DIRECTOR_CONTACT_TITLE: angular.isDefined(params.title) ? params.title.id : '{DIRECTOR_CONTACT_TITLE}',
                        DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_FULLNAME: angular.isDefined(params.directorName) ? params.directorName : '{DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_FULL NAME}',
                        DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_STREET: angular.isDefined(params.directorStreet) ? params.directorStreet : '{DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_STREET}',
                        DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_CITY: angular.isDefined(params.directorCity) ? params.directorCity : '{DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_CITY}',
                        DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_STATE: angular.isDefined(params.directorState) ? params.directorState : '{DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_STATE}',
                        DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_ZIP: angular.isDefined(params.directorZip) ? params.directorZip : '{DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_ZIP}',
                        DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_CONTACT_NUMBER: angular.isDefined(params.directorContact) ? params.directorContact : '{DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_CONTACT_NUMBER}',
                        DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_LASTNAME: angular.isDefined(params.directorLastName) ? params.directorLastName : '{DIRECTOR_OF_EDUCATIONAL_DEPARTMENT_LASTNAME}',
                        SCHOOL_DISTRICT: angular.isDefined(params.schoolDistrict) ? params.schoolDistrict : '{SCHOOL_DISTRICT}',
                        PLAINTIFF_GUARDIAN_NAME: angular.isDefined(params.plaintiffsGuardian) ? params.plaintiffsGuardian.new_contact_name : '{PLAINTIFF_GUARDIAN_NAME}'
                    }
                    break;
                case "F1164_1008":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.defendantInsuranceId) ? [parseInt(params.defendantInsuranceId.insuranceid)] : [0],
                        LOCATION_OF_ACCIDENT_COUNTY: utils.isEmptyVal(params.locationAccident) ? '{LOCATION_OF_ACCIDENT_COUNTY}' : params.locationAccident,
                        LOCATION_OF_ACCIDENT_CITY: utils.isEmptyVal(params.locationAccidentCity) ? '{LOCATION_OF_ACCIDENT_CITY}' : params.locationAccidentCity,
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2)
                    }
                    break;
                case "F1164_1032":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        LOCATION_OF_ACCIDENT_COUNTY: utils.isEmptyVal(params.locationAccident) ? '{LOCATION_OF_ACCIDENT_COUNTY}' : params.locationAccident,
                        LOCATION_OF_ACCIDENT_CITY: utils.isEmptyVal(params.locationAccidentCity) ? '{LOCATION_OF_ACCIDENT_CITY}' : params.locationAccidentCity,
                        AMOUNT_IN_WORDS: utils.isEmptyVal(params.amountInWords) ? '{AMOUNT_IN_WORDS}' : params.amountInWords,
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers2) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers2, '', 2)
                    }
                    break;
                case "F1153_120":
                    var contact1, contact2, type1, type2;
                    contact1 = angular.isDefined(params.otherPartyPhysician) ? parseInt(params.otherPartyPhysician.contactid) : 0;
                    contact2 = angular.isDefined(params.otherPartyPhysician2) ? parseInt(params.otherPartyPhysician2.contactid) : 0;
                    type1 = angular.isDefined(params.otherPartyPhysician) ? params.otherPartyPhysician.contact_type : '';
                    type2 = angular.isDefined(params.otherPartyPhysician2) ? params.otherPartyPhysician2.contact_type : '';
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        contactId: [contact1, contact2],
                        contactTypes: [type1, type2],
                        eventId: angular.isDefined(params.imeeventid) ? parseInt(params.imeeventid) : 0
                    }
                    break;
                case "F1077_1035":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0]
                    }
                    break;
                case "F1164_1037":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1164_1040":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber
                    }
                    break;
                case "F1164_1038":
                case "F1164_1036":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        HIC_NUMBER: utils.isEmptyVal(params.hicNumber) ? '{HIC_NUMBER}' : params.hicNumber
                    }
                    break;
                case "F1164_1039":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber
                    }
                    break;
                case "F1164_1041":
                case "F1164_1042":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        INTERROGATORIES_SERVED_DATE: angular.isDefined(params.Interrogatories_Date) ? moment.unix(params.Interrogatories_Date).utc().format('MMMM D, YYYY') : '{INTERROGATORIES_SERVED_DATE}',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber
                    }
                    break;
                case "F1164_1045":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DATE_OF_LETTERS: angular.isDefined(params.dateOfLetters) ? moment.unix(params.dateOfLetters).utc().format('MMMM D, YYYY') : '{DATE_OF_LETTERS}',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber
                    }
                    break;
                case "F1164_1043":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        MEDICAID_ID_NUMBER: angular.isDefined(params.medicatedId) ? params.medicatedId : '{MEDICAID_ID_NUMBER}',
                        HMS_NUMBER: utils.isEmptyVal(params.hmsNumber) ? '{HMS_NUMBER}' : params.hmsNumber,
                        CARD_HOLDER_NAME: angular.isDefined(params.cardHolderName) ? params.cardHolderName : '{CARD_HOLDER_NAME}'
                    }
                    break;
                case "F1164_1044":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        HIC_NUMBER: utils.isEmptyVal(params.hicNumber) ? '{HIC_NUMBER}' : params.hicNumber,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        TYPE_OF_ACCIDENT: angular.isDefined(params.accidnetDescription) ? params.accidnetDescription : '{TYPE_OF_ACCIDENT}'
                    }
                    break;
                case "F1164_1046":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        CONFERENCE_DATE: angular.isDefined(params.conferenceHeldDate) ? moment.unix(params.conferenceHeldDate).utc().format('MMMM D, YYYY') : '{CONFERENCE_DATE}',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0]
                    }
                    break;
                case "F1164_1047":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        COURT_REPORTER: utils.isEmptyVal(params.courtReporter) ? '{COURT_REPORTER}' : params.courtReporter,
                        CONTACT_NAME: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_name : '{CONTACT_NAME}'
                    }
                    break;
                case "F1164_1048":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber
                    }
                    break;
                case "F1164_1049":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        DOCUMENT_NAME: utils.isEmptyVal(params.document_name) ? '{DOCUMENT_NAME}' : params.document_name
                    }
                    break;
                case "F1164_1050":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        DATE_OF_LETTERS: angular.isDefined(params.dateOfLetters) ? moment.unix(params.dateOfLetters).utc().format('MMMM D, YYYY') : '{DATE_OF_LETTERS}'
                    }
                    break;
                case "F1164_1051":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        REPORT_DATE: angular.isDefined(params.reportDate) ? moment.unix(params.reportDate).utc().format('MMMM D, YYYY') : '{REPORT_DATE}'
                    }
                    break;
                case "F1164_1052":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber
                    }
                    break;
                case "F1164_1053":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        medicalTreatmentIds: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.medicaltreatmentid)] : [0],
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        DEPOSITION_PREPARATION_TIME: utils.isEmptyVal(params.depositionTime) ? '{DEPOSITION_PREPARATION_TIME}' : params.depositionTime,
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2)
                    }
                    break;
                case "F1164_1054":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        TITLE: angular.isDefined(params.title) ? params.title.id : '{TITLE}'
                    }
                    break;
                case "F1164_1055":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.physicianids) ? [parseInt(params.physicianids.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1164_1056":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        HIC_NUMBER: utils.isEmptyVal(params.hicNumber) ? '{HIC_NUMBER}' : params.hicNumber,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        TYPE_OF_ACCIDENT: utils.isEmptyVal(params.desc_Accident) ? '{TYPE_OF_ACCIDENT}' : params.desc_Accident,
                        DATE_OF_ACCIDENT: angular.isDefined(params.dateOfLetters) ? moment.unix(params.dateOfLetters).utc().format('MMM D, YYYY') : '{DATE_OF_ACCIDENT}',
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        DATE_OF_LETTERS: angular.isDefined(params.dateOfLetters) ? moment.unix(params.dateOfLetters).utc().format('MMM D, YYYY') : '{DATE_OF_LETTERS}'
                    }
                    break;
                case "F1164_1057":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        AUTHORIZATIONS_ADDRESSED_TO: utils.isEmptyVal(params.authorizationAddress) ? '{AUTHORIZATIONS_ADDRESSED_TO}' : params.authorizationAddress,
                        THIRD_PARTY_COPY_SERVICE: utils.isEmptyVal(params.thirdPartyCopy) ? '{THIRD_PARTY_COPY_SERVICE}' : params.thirdPartyCopy
                    }
                    break;
                case "F1164_1058":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        MERIDIAN_CASE_PRIMARY: utils.isEmptyVal(params.merdianCase) ? '{MERIDIAN_CASE_PRIMARY}' : params.merdianCase,
                        MERIDIAN_CASE_SECONDARY: utils.isEmptyVal(params.secondaryMerdianCase) ? '{MERIDIAN_CASE_SECONDARY}' : params.secondaryMerdianCase,
                        DATE_OF_LETTERS: angular.isDefined(params.dateOfLetters) ? moment.unix(params.dateOfLetters).utc().format('MMM D, YYYY') : '{DATE_OF_LETTERS}'
                    }
                    break;
                case "F1164_1059":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        RELEVANT_KNOWLEDGE: utils.isEmptyVal(params.relKnowleadge) ? '{RELEVANT_KNOWLEDGE}' : params.relKnowleadge,
                        COURT_REPORTER: utils.isEmptyVal(params.courtReporter) ? '{COURT_REPORTER}' : params.courtReporter,
                        COURT_REPORTER_VIDEOGRAPHER: utils.isEmptyVal(params.courtReporterVideographer) ? '{COURT_REPORTER_VIDEOGRAPHER}' : params.courtReporterVideographer
                    }
                    break;
                case "F1164_1060":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        CONTACT_NAME: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_name : '{CONTACT_NAME}',
                        DEFENDANT_FILE_NUMBER: utils.isEmptyVal(params.defendantFileNumber) ? '{DEFENDANT_FILE_NUMBER}' : params.defendantFileNumber,
                        COURT_REPORTER: utils.isEmptyVal(params.courtReporter) ? '{COURT_REPORTER}' : params.courtReporter,
                        COURT_REPORTER_VIDEOGRAPHER: utils.isEmptyVal(params.courtReporterVideographer) ? '{COURT_REPORTER_VIDEOGRAPHER}' : params.courtReporterVideographer
                    }
                    break;
                case "F1164_1061":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        RELEVANT_KNOWLEDGE: utils.isEmptyVal(params.relKnowleadge) ? '{RELEVANT_KNOWLEDGE}' : params.relKnowleadge,
                        COURT_REPORTER: utils.isEmptyVal(params.courtReporter) ? '{COURT_REPORTER}' : params.courtReporter,
                        COURT_REPORTER_VIDEOGRAPHER: utils.isEmptyVal(params.courtReporterVideographer) ? '{COURT_REPORTER_VIDEOGRAPHER}' : params.courtReporterVideographer,
                        CONTACT_NAME: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_name : '{CONTACT_NAME}'
                    }
                    break;
                case "F1164_1062":
                    var type1 = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type1 = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var type2 = "Local";
                    if (params.plaintiffEmployerIds != undefined) {
                        type2 = (params.plaintiffEmployerIds.is_global == "1") ? "Global" : "Local";
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: [type2],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type1],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        BILL_DATE: angular.isDefined(params.bill_Date) ? moment.unix(params.bill_Date).utc().format('MMMM D, YYYY') : '{BILL_DATE}',
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? moment.unix(params.treatmentDate.servicedate).utc().format('MMMM D, YYYY') + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY') : '{DATE_OF_SERVICE}',
                        GROUP_NUMBER: angular.isDefined(params.groupNum) ? params.groupNum : '{GROUP_NUMBER}',
                        ID_NUMBER: angular.isDefined(params.assignUserId) ? params.assignUserId : '{ID_NUMBER}',
                        CARD_HOLDER_NAME: angular.isDefined(params.cardHolderName) ? params.cardHolderName : '{CARD_HOLDER_NAME}'
                    }
                    break;
                case "F1198_1063":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0]
                    }
                    break;
                case "F1198_1064":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.defendantInsuranceId) ? [parseInt(params.defendantInsuranceId.insuranceid)] : [0]
                    }
                    break;
                case "F1198_1065":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0]
                    }
                    break;
                case "F1164_1067":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1164_1068":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.countyPlaintiff) ? params.countyPlaintiff : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0]
                    }
                    break;
                case "F1164_1066":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        SCHOOL_DISTRICT: angular.isDefined(params.schoolDistrict) ? params.schoolDistrict : '{SCHOOL_DISTRICT}'
                    }
                    break;
                case "F1164_1069":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var plaintiffEmployer1 = angular.isDefined(params.plaintiffEmployerIds) ? parseInt(params.plaintiffEmployerIds.employerid) : 0;
                    var plaintiffEmployer2 = angular.isDefined(params.plaintiffEmployerIds2) ? parseInt(params.plaintiffEmployerIds2.employerid) : 0;
                    var plaintiffEmployerType1 = angular.isDefined(params.plaintiffEmployerIds) ? params.plaintiffEmployerIds.contactid.contact_type : '';
                    var plaintiffEmployerType2 = angular.isDefined(params.plaintiffEmployerIds2) ? params.plaintiffEmployerIds2.contactid.contact_type : '';

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? moment.unix(params.treatmentDate.servicedate).utc().format('MMMM D, YYYY') + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY') : '{DATE_OF_SERVICE}',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        GROUP_NUMBER_PRIMARY: angular.isDefined(params.groupNum) ? params.groupNum : '{GROUP_NUMBER_PRIMARY}',
                        GROUP_NUMBER_SECONDARY: angular.isDefined(params.groupNum2) ? params.groupNum2 : '{GROUP_NUMBER_SECONDARY}',
                        ID_NUMBER_PRIMARY: angular.isDefined(params.idNum1) ? params.idNum1 : '{ID_NUMBER_PRIMARY}',
                        ID_NUMBER_SECONDARY: angular.isDefined(params.idNum2) ? params.idNum2 : '{ID_NUMBER_SECONDARY}',
                        CARD_HOLDER_NAME_PRIMARY: angular.isDefined(params.cardHolderName) ? params.cardHolderName : '{CARD_HOLDER_NAME_PRIMARY}',
                        CARD_HOLDER_NAME_SECONDARY: angular.isDefined(params.cardHolderName2) ? params.cardHolderName2 : '{CARD_HOLDER_NAME_SECONDARY}',
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        plaintiffEmployerId: [plaintiffEmployer1, plaintiffEmployer2],
                        plaintiffEmployerType: [plaintiffEmployerType1, plaintiffEmployerType2]

                    }
                    break;
                case "F1164_1070":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        CONTACT_COMPANY_NAME: utils.isEmptyVal(params.contactName) ? '{CONTACT_COMPANY_NAME}' : params.contactName,
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        POLICY_LIMIT_AMOUNT_IN_WORDS: utils.isEmptyVal(params.amountInWords) ? '{POLICY_LIMIT_AMOUNT_IN_WORDS}' : params.amountInWords,
                        CONTACT_NAME: angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_name : '{CONTACT_NAME}'
                    }
                    break;
                case "F1164_1071":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? moment.unix(params.treatmentDate.servicedate).utc().format('MMMM D, YYYY') + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY') : '{DATE_OF_SERVICE}',
                        BILL_DATE: angular.isDefined(params.bill_Date) ? moment.unix(params.bill_Date).utc().format('MMMM D, YYYY') : '{BILL_DATE}',
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1164_1072":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;
                case "F1164_1073":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        REPORT_DATE: angular.isDefined(params.reportDate) ? moment.unix(params.reportDate).utc().format('MMMM D, YYYY') : '{REPORT_DATE}',
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1164_1074":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        REPORT_DATE: angular.isDefined(params.reportDate) ? moment.unix(params.reportDate).utc().format('MMMM D, YYYY') : '{REPORT_DATE}',
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0],
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2)
                    }
                    break;
                case "F1164_1075":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DOCUMENT_DATE: angular.isDefined(params.documentDate) ? moment.unix(params.documentDate).utc().format('MMMM D, YYYY') : '{DOCUMENT_DATE}',
                        DOCUMENT_NAME: utils.isEmptyVal(params.blueback_document) ? '{DOCUMENT_NAME}' : params.blueback_document,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0]
                    }
                    break;
                case "F1164_1108":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DOCUMENT_DATE: angular.isDefined(params.documentDate) ? moment.unix(params.documentDate).utc().format('MMMM D, YYYY') : '{DOCUMENT_DATE}',
                        DOCUMENT_NAME: utils.isEmptyVal(params.blueback_document) ? '{DOCUMENT_NAME}' : params.blueback_document,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0]
                    }
                    break;
                case "F1164_1109":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        insuranceIds: angular.isDefined(params.defendantsAdjuster) ? [parseInt(params.defendantsAdjuster.insuranceId)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        MEDICAL_RECORD_RECEIVED_DATE: angular.isDefined(params.medicalRecordDate) ? moment.unix(params.medicalRecordDate).utc().format('MMM D, YYYY') : '{MEDICAL_RECORD_RECEIVED_DATE}'
                    }
                    break;
                case "F1164_1123":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var insuranceIds = [];
                    var insurance1, insurance2;
                    insurance1 = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insurance2 = angular.isDefined(params.onlyInsuranceId2) ? parseInt(params.onlyInsuranceId2.insuranceid) : 0;

                    var plaintiffEmployer1 = angular.isDefined(params.plaintiffEmployerIds) ? parseInt(params.plaintiffEmployerIds.employerid) : 0;
                    var plaintiffEmployer2 = angular.isDefined(params.plaintiffEmployerIds2) ? parseInt(params.plaintiffEmployerIds2.employerid) : 0;
                    var plaintiffEmployerType1 = angular.isDefined(params.plaintiffEmployerIds) ? params.plaintiffEmployerIds.contactid.contact_type : '';
                    var plaintiffEmployerType2 = angular.isDefined(params.plaintiffEmployerIds2) ? params.plaintiffEmployerIds2.contactid.contact_type : '';

                    var date1;
                    if (angular.isDefined(params.treatmentDate)) {
                        if (utils.isNotEmptyVal(params.treatmentDate.servicedate) && utils.isNotEmptyVal(params.treatmentDate.serviceenddate)) {
                            date1 = moment.unix(params.treatmentDate.servicedate).utc().format('MMMM D, YYYY') + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY');
                        } else if (utils.isNotEmptyVal(params.treatmentDate.servicedate)) {
                            date1 = moment.unix(params.treatmentDate.servicedate).utc().format('MMMM D, YYYY') + '|' + " ";
                        } else if (utils.isNotEmptyVal(params.treatmentDate.serviceenddate)) {
                            date1 = " " + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY');
                        }
                    } else {
                        date1 = '{DATE_OF_SERVICE}';
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        DATE_OF_SERVICE: date1,
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        insuranceIds: [insurance1, insurance2],
                        GROUP_NUMBER_PRIMARY: angular.isDefined(params.groupNum) ? params.groupNum : '{GROUP_NUMBER_PRIMARY}',
                        GROUP_NUMBER_SECONDARY: angular.isDefined(params.groupNum2) ? params.groupNum2 : '{GROUP_NUMBER_SECONDARY}',
                        ID_NUMBER_PRIMARY: angular.isDefined(params.idNum1) ? params.idNum1 : '{ID_NUMBER_PRIMARY}',
                        ID_NUMBER_SECONDARY: angular.isDefined(params.idNum2) ? params.idNum2 : '{ID_NUMBER_SECONDARY}',
                        CARD_HOLDER_NAME_PRIMARY: angular.isDefined(params.cardHolderName) ? params.cardHolderName : '{CARD_HOLDER_NAME_PRIMARY}',
                        CARD_HOLDER_NAME_SECONDARY: angular.isDefined(params.cardHolderName2) ? params.cardHolderName2 : '{CARD_HOLDER_NAME_SECONDARY}',
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        BILL_DATE: angular.isDefined(params.bill_Date) ? moment.unix(params.bill_Date).utc().format('MMMM D, YYYY') : '{BILL_DATE}',
                        plaintiffEmployerId: [plaintiffEmployer1, plaintiffEmployer2],
                        plaintiffEmployerType: [plaintiffEmployerType1, plaintiffEmployerType2]

                    }
                    break;
                case "F1164_1214":
                    if (params.defendantLawFirm != undefined) {
                        var contactID = [parseInt(params.defendantLawFirm.contactid)];
                        var defendantContactTypes = [params.defendantLawFirm.contact_type];
                    }
                    var contact1 = angular.isDefined(params.otherpartycontactid) ? parseInt(params.otherpartycontactid.contactid) : 0;
                    var contact2 = angular.isDefined(params.otherpartycontactid2) ? parseInt(params.otherpartycontactid2.contactid) : 0;

                    var type1 = angular.isDefined(params.otherpartycontactid) ? params.otherpartycontactid.contact_type : 0;
                    var type2 = angular.isDefined(params.otherpartycontactid2) ? params.otherpartycontactid2.contact_type : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? contactID : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? defendantContactTypes : [''],
                        contactId: [contact1, contact2],
                        contactTypes: [type1, type2],
                        HEARING_DATE: angular.isDefined(params.hearingDate) ? moment.unix(params.hearingDate).utc().format('MMMM D, YYYY') : '{HEARING_DATE}',
                        NATURAL_ARBITRATOR_NAME: angular.isDefined(params.cardHolderName) ? params.cardHolderName : '{NATURAL_ARBITRATOR_NAME}'
                    }
                    break;
                case "F1077_1293":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var date1;

                    if (angular.isDefined(params.treatmentDate)) {
                        if (utils.isNotEmptyVal(params.treatmentDate.servicestartdate) && utils.isNotEmptyVal(params.treatmentDate.serviceenddate)) {
                            date1 = moment.unix(params.treatmentDate.servicestartdate).utc().format('MMMM D, YYYY') + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY');
                        } else if (utils.isNotEmptyVal(params.treatmentDate.servicestartdate)) {
                            date1 = moment.unix(params.treatmentDate.servicestartdate).utc().format('MMMM D, YYYY') + '|' + " ";
                        } else if (utils.isNotEmptyVal(params.treatmentDate.serviceenddate)) {
                            date1 = " " + '|' + moment.unix(params.treatmentDate.serviceenddate).utc().format('MMMM D, YYYY');
                        }
                    } else {
                        date1 = '{DATE_OF_SERVICE}';
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        DATE_OF_SERVICE: date1,
                        hospitalId: angular.isDefined(params.otherpartycontactid3) ? [parseInt(params.otherpartycontactid3.contactid)] : [0],
                        hospitalType: angular.isDefined(params.otherpartycontactid3) ? [params.otherpartycontactid3.contact_type] : ["Local"],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        medicalTreatmentIds: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1226_1302":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        medicalTreatmentIds: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.medicaltreatmentid)] : [0]
                    }
                    break;
                case "F1153_1342":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: defendantsId,
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_STATE: angular.isDefined(params.accidentState) ? params.accidentState : '{LOCATION_OF_ACCIDENT_STATE}',
                        DEFENDANT_RESIDENCE_COUNTY: angular.isDefined(params.DefendantResidencCounty) ? params.DefendantResidencCounty : '{DEFENDANT_RESIDENCE_COUNTY}',
                        ACCIDENT_DESCRIPTION: angular.isDefined(params.desc_Accident) ? params.desc_Accident : '{ACCIDENT_DESCRIPTION}'
                    }
                    break;
                case "F1153_1330":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: defendantsId,
                        defendantOperatorId: angular.isDefined(params.secDefOperator) ? [parseInt(params.secDefOperator)] : [0],
                        defendantOwnerId: angular.isDefined(params.secDefOwner) ? [parseInt(params.secDefOwner)] : [0],
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        ACCIDENT_COUNTY: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '{ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT: angular.isDefined(params.locationAccident) ? params.locationAccident : '{LOCATION_OF_ACCIDENT}',
                        ENTITY_HIRED_PERFORM_TASK: angular.isDefined(params.hiredTask) ? params.hiredTask : '{ENTITY_HIRED_PERFORM_TASK}',
                        DEFENDANT_BUSINESS_COUNTY: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '{DEFENDANT_BUSINESS_COUNTY}',
                        DEFENDANT_PREMISES_COUNTY: angular.isDefined(params.defPremisesCounty) ? params.defPremisesCounty : '{DEFENDANT_PREMISES_COUNTY}',
                        DEFENDANT_BUSINESS_ADDRESS: angular.isDefined(params.defBusinessAddress) ? params.defBusinessAddress : '{DEFENDANT_BUSINESS_ADDRESS}',
                        DEFENDANT_BUSINESS_STATE: angular.isDefined(params.defBusinessState) ? params.defBusinessState : '{DEFENDANT_BUSINESS_STATE}'
                    }
                    break;
                case "F1153_1332":
                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    var captionId3 = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var defendantsId = [];
                    defendantsId[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2, captionId3],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: defendantsId,
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        DEFENDANT_BUSINESS_COUNTY: angular.isDefined(params.defBusinessCounty) ? params.defBusinessCounty : '{DEFENDANT_BUSINESS_COUNTY}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]
                    }
                    break;
                case "F1153_1369":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ACTION_DIPOSED_IN_OPEN_COURT_YES_OR_NO: angular.isDefined(params.yesNoOpt) ? params.yesNoOpt.id : '{ACTION_DIPOSED_IN_OPEN_COURT_YES_OR_NO}',
                        NOI_OR_NOT_FILED_YES_OR_NO: angular.isDefined(params.option1) ? params.option1.id : '{NOI_OR_NOT_FILED_YES_OR_NO}',
                        CODE_NUMBER: angular.isDefined(params.codeNumber) ? params.codeNumber : '{CODE_NUMBER}',
                        JUDGE_FULLNAME: angular.isDefined(params.judgeName) ? params.judgeName : '{JUDGE_FULLNAME}',
                        RETAINER_NUMBER: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{RETAINER_NUMBER}',
                        REFERRING_ATTORNEY_DIST: angular.isDefined(params.attorneyDistrict) ? params.attorneyDistrict : '{REFERRING_ATTORNEY_DIST}',
                        REFERRING_ATTORNEY_DEPT: angular.isDefined(params.attorneyDepartment) ? params.attorneyDepartment : '{REFERRING_ATTORNEY_DEPT}',
                        REFERRING_ATTORNEY_COUNTY: angular.isDefined(params.attorneyCounty) ? params.attorneyCounty : '{REFERRING_ATTORNEY_COUNTY}',
                        DATE_OF_PAYMENT_CLIENT: angular.isDefined(params.paymentToClientDate) ? moment.unix(params.paymentToClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CLIENT}',
                        DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT: angular.isDefined(params.paymentByClientDate) ? moment.unix(params.paymentByClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT}',
                        DATE_STIPULATION_OF_DISCONTINUANCE: angular.isDefined(params.stipulationDate) ? moment.unix(params.stipulationDate).utc().format('MMMM D, YYYY') : '{DATE_STIPULATION_OF_DISCONTINUANCE}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DATE_SUMMONS_SERVED}',
                        DATE_COPY_FORWARDED: angular.isDefined(params.noticeProduceDate) ? moment.unix(params.noticeProduceDate).utc().format('MMMM D, YYYY') : '{DATE_COPY_FORWARDED}',
                        DATE_OF_ORDER: angular.isDefined(params.orderDate) ? moment.unix(params.orderDate).utc().format('MMMM D, YYYY') : '{DATE_OF_ORDER}',
                        GROSS_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{GROSS_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        AMOUNT_OF_INTEREST: utils.isEmptyVal(params.amountInNumbers3) ? '{AMOUNT_OF_INTEREST}' : $filter('currency')(params.amountInNumbers3, '', 2),
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers2) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers2, '', 2),
                        AMOUNT_OF_COSTS: utils.isEmptyVal(params.amountInNumbers6) ? '{AMOUNT_OF_COSTS}' : $filter('currency')(params.amountInNumbers6, '', 2),
                        AMOUNT_RECEIVED_BY_PARTICIPATING_ATTORNEY: utils.isEmptyVal(params.amountInNumbers7) ? '{AMOUNT_RECEIVED_BY_PARTICIPATING_ATTORNEY}' : $filter('currency')(params.amountInNumbers7, '', 2),
                        NO_FAULT_FEE: utils.isEmptyVal(params.amountInNumbers4) ? '{NO_FAULT_FEE}' : $filter('currency')(params.amountInNumbers4, '', 2),
                        LEGAL_FEE: utils.isEmptyVal(params.amountInNumbers5) ? '{LEGAL_FEE}' : $filter('currency')(params.amountInNumbers5, '', 2)
                    }
                    break;
                case "F1153_1370":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ACTION_DIPOSED_IN_OPEN_COURT_YES_OR_NO: angular.isDefined(params.yesNoOpt) ? params.yesNoOpt.id : '{ACTION_DIPOSED_IN_OPEN_COURT_YES_OR_NO}',
                        NOI_OR_NOT_FILED_YES_OR_NO: angular.isDefined(params.option1) ? params.option1.id : '{NOI_OR_NOT_FILED_YES_OR_NO}',
                        SETTLED_STATUS: angular.isDefined(params.settled) ? params.settled.id : '{SETTLED_STATUS}',
                        ABANDONED_STATUS: angular.isDefined(params.abandoned) ? params.abandoned.id : '{ABANDONED_STATUS}',
                        JUDGMENT_STATUS: angular.isDefined(params.judgement) ? params.judgement.id : '{JUDGMENT_STATUS}',
                        CODE_NUMBER: angular.isDefined(params.codeNumber) ? params.codeNumber : '{CODE_NUMBER}',
                        JUDGE_FULLNAME: angular.isDefined(params.judgeName) ? params.judgeName : '{JUDGE_FULLNAME}',
                        RETAINER_NUMBER: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{RETAINER_NUMBER}',
                        REFERRING_ATTORNEY_DIST: angular.isDefined(params.attorneyDistrict) ? params.attorneyDistrict : '{REFERRING_ATTORNEY_DIST}',
                        REFERRING_ATTORNEY_DEPT: angular.isDefined(params.attorneyDepartment) ? params.attorneyDepartment : '{REFERRING_ATTORNEY_DEPT}',
                        REFERRING_ATTORNEY_COUNTY: angular.isDefined(params.attorneyCounty) ? params.attorneyCounty : '{REFERRING_ATTORNEY_COUNTY}',
                        DATE_OF_PAYMENT_CLIENT: angular.isDefined(params.paymentToClientDate) ? moment.unix(params.paymentToClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CLIENT}',
                        DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT: angular.isDefined(params.paymentByClientDate) ? moment.unix(params.paymentByClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT}',
                        DATE_STIPULATION_OF_DISCONTINUANCE: angular.isDefined(params.stipulationDate) ? moment.unix(params.stipulationDate).utc().format('MMMM D, YYYY') : '{DATE_STIPULATION_OF_DISCONTINUANCE}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DATE_SUMMONS_SERVED}',
                        DATE_COPY_FORWARDED: angular.isDefined(params.noticeProduceDate) ? moment.unix(params.noticeProduceDate).utc().format('MMMM D, YYYY') : '{DATE_COPY_FORWARDED}',
                        DATE_OF_ORDER: angular.isDefined(params.orderDate) ? moment.unix(params.orderDate).utc().format('MMMM D, YYYY') : '{DATE_OF_ORDER}',
                        GROSS_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{GROSS_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers2) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers2, '', 2),
                        ATTORNEY_FEE_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers8) ? '{ATTORNEY_FEE_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers8, '', 2),
                        EXPENSE_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers9) ? '{EXPENSE_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers9, '', 2),
                        AMOUNT_RECEIVED_BY_PARTICIPATING_ATTORNEY_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers7) ? '{AMOUNT_RECEIVED_BY_PARTICIPATING_ATTORNEY_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers7, '', 2)
                    }
                    break;
                case "F1153_1393":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ACTION_DIPOSED_IN_OPEN_COURT_YES_OR_NO: angular.isDefined(params.yesNoOpt) ? params.yesNoOpt.id : '{ACTION_DIPOSED_IN_OPEN_COURT_YES_OR_NO}',
                        NOI_OR_NOT_FILED_YES_OR_NO: angular.isDefined(params.option1) ? params.option1.id : '{NOI_OR_NOT_FILED_YES_OR_NO}',
                        SETTLED_STATUS: angular.isDefined(params.settled) ? params.settled.id : '{SETTLED_STATUS}',
                        ABANDONED_STATUS: angular.isDefined(params.abandoned) ? params.abandoned.id : '{ABANDONED_STATUS}',
                        JUDGMENT_STATUS: angular.isDefined(params.judgement) ? params.judgement.id : '{JUDGMENT_STATUS}',
                        CODE_NUMBER: angular.isDefined(params.codeNumber) ? params.codeNumber : '{CODE_NUMBER}',
                        JUDGE_FULLNAME: angular.isDefined(params.judgeName) ? params.judgeName : '{JUDGE_FULLNAME}',
                        RETAINER_NUMBER: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{RETAINER_NUMBER}',
                        DATE_OF_PAYMENT_CLIENT: angular.isDefined(params.paymentToClientDate) ? moment.unix(params.paymentToClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CLIENT}',
                        DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT: angular.isDefined(params.paymentByClientDate) ? moment.unix(params.paymentByClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT}',
                        DATE_STIPULATION_OF_DISCONTINUANCE: angular.isDefined(params.stipulationDate) ? moment.unix(params.stipulationDate).utc().format('MMMM D, YYYY') : '{DATE_STIPULATION_OF_DISCONTINUANCE}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DATE_SUMMONS_SERVED}',
                        DATE_COPY_FORWARDED: angular.isDefined(params.noticeProduceDate) ? moment.unix(params.noticeProduceDate).utc().format('MMMM D, YYYY') : '{DATE_COPY_FORWARDED}',
                        DATE_OF_ORDER: angular.isDefined(params.orderDate) ? moment.unix(params.orderDate).utc().format('MMMM D, YYYY') : '{DATE_OF_ORDER}',
                        AMOUNT_OF_INTEREST: utils.isEmptyVal(params.amountInNumbers3) ? '{AMOUNT_OF_INTEREST}' : $filter('currency')(params.amountInNumbers3, '', 2),
                        AMOUNT_OF_COSTS: utils.isEmptyVal(params.amountInNumbers6) ? '{AMOUNT_OF_COSTS}' : $filter('currency')(params.amountInNumbers6, '', 2),
                        NO_FAULT_FEE: utils.isEmptyVal(params.amountInNumbers4) ? '{NO_FAULT_FEE}' : $filter('currency')(params.amountInNumbers4, '', 2),
                        GROSS_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{GROSS_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers2) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers2, '', 2),
                        LEGAL_FEE: utils.isEmptyVal(params.amountInNumbers5) ? '{LEGAL_FEE}' : $filter('currency')(params.amountInNumbers5, '', 2),
                        AMOUNT_RECEIVED_BY_PARTICIPATING_ATTORNEY: utils.isEmptyVal(params.amountInNumbers7) ? '{AMOUNT_RECEIVED_BY_PARTICIPATING_ATTORNEY}' : $filter('currency')(params.amountInNumbers7, '', 2)
                    }
                    break;
                case "F1153_1395":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        RETAINER_NUMBER: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{RETAINER_NUMBER}',
                        DATE_COPY_FORWARDED: angular.isDefined(params.noticeProduceDate) ? moment.unix(params.noticeProduceDate).utc().format('MMMM D, YYYY') : '{DATE_COPY_FORWARDED}',
                        GROSS_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{GROSS_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        NET_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers10) ? '{NET_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers10, '', 2),
                        ATTORNEY_FEE_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers8) ? '{ATTORNEY_FEE_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers8, '', 2)
                    }
                    break;
                case "F1153_1394":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ACTION_DISPOSED_IN_OPEN_COURT_YES_OR_NO: angular.isDefined(params.yesNoOpt) ? params.yesNoOpt.id : '{ACTION_DISPOSED_IN_OPEN_COURT_YES_OR_NO}',
                        SETTLED_STATUS: angular.isDefined(params.settled) ? params.settled.id : '{SETTLED_STATUS}',
                        ABANDONED_STATUS: angular.isDefined(params.abandoned) ? params.abandoned.id : '{ABANDONED_STATUS}',
                        JUDGMENT_STATUS: angular.isDefined(params.judgement) ? params.judgement.id : '{JUDGMENT_STATUS}',
                        NOI_OR_NOT_FILED_YES_OR_NO: angular.isDefined(params.option1) ? params.option1.id : '{NOI_OR_NOT_FILED_YES_OR_NO}',
                        CODE_NUMBER: angular.isDefined(params.codeNumber) ? params.codeNumber : '{CODE_NUMBER}',
                        DATE_OF_PAYMENT_CLIENT: angular.isDefined(params.paymentToClientDate) ? moment.unix(params.paymentToClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CLIENT}',
                        DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT: angular.isDefined(params.paymentByClientDate) ? moment.unix(params.paymentByClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT}',
                        DATE_STIPULATION_OF_DISCONTINUANCE: angular.isDefined(params.stipulationDate) ? moment.unix(params.stipulationDate).utc().format('MMMM D, YYYY') : '{DATE_STIPULATION_OF_DISCONTINUANCE}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DATE_SUMMONS_SERVED}',
                        DATE_COPY_FORWARDED: angular.isDefined(params.noticeProduceDate) ? moment.unix(params.noticeProduceDate).utc().format('MMMM D, YYYY') : '{DATE_COPY_FORWARDED}',
                        GROSS_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{GROSS_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        AMOUNT_OF_INTEREST: utils.isEmptyVal(params.amountInNumbers3) ? '{AMOUNT_OF_INTEREST}' : $filter('currency')(params.amountInNumbers3, '', 2),
                        AMOUNT_OF_COSTS: utils.isEmptyVal(params.amountInNumbers6) ? '{AMOUNT_OF_COSTS}' : $filter('currency')(params.amountInNumbers6, '', 2),
                        NO_FAULT_FEE: utils.isEmptyVal(params.amountInNumbers4) ? '{NO_FAULT_FEE}' : $filter('currency')(params.amountInNumbers4, '', 2),
                        LEGAL_FEE: utils.isEmptyVal(params.amountInNumbers5) ? '{LEGAL_FEE}' : $filter('currency')(params.amountInNumbers5, '', 2),
                        NET_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers10) ? '{NET_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers10, '', 2)
                    }
                    break;
                case "F1164_1281":
                case "F1164_1282":
                case "F1164_1283":
                case "F1164_1284":
                    var contactIds = [];
                    var contactType = [];
                    _.forEach(vm.allMatterContacts, function (currentItem) {
                        contactIds.push(parseInt(currentItem.contactid));
                        contactType.push(currentItem.contact_type);
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        contactId: contactIds,
                        contactTypes: contactType
                    }
                    break;
                case "F1164_1285":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        PLAINTIFF_ID: angular.isDefined(params.mailId) ? params.mailId : '{PLAINTIFF_ID}'
                    }
                    break;
                case "F1153_1344":
                    var defendantids1 = [];
                    var defendantids2 = [];
                    var defendantAttorneyID = [];
                    var defendantAttorneyTYPE = [];
                    if (params.defendantLawFirm != undefined) {
                        var contactID1 = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;
                        var defendantContactTypes1 = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : '';
                        defendantAttorneyID.push(contactID1);
                        defendantAttorneyTYPE.push(defendantContactTypes1);
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    if (params.defendantLawFirm1 != undefined) {
                        var contactID2 = angular.isDefined(params.defendantLawFirm1) ? parseInt(params.defendantLawFirm1.contactid) : 0;
                        var defendantContactTypes2 = angular.isDefined(params.defendantLawFirm1) ? params.defendantLawFirm1.contact_type : '';
                        defendantAttorneyID.push(contactID2);
                        defendantAttorneyTYPE.push(defendantContactTypes2);
                        _.forEach(params.defendantLawFirm1.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids2.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: utils.isNotEmptyVal(defendantAttorneyID) ? defendantAttorneyID : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defendantAttorneyTYPE) ? defendantAttorneyTYPE : [''],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        DEFENDANT_NAME_SECONDARY: utils.isNotEmptyVal(defendantids2) ? defendantids2.join(', ') : '{DEFENDANT_NAME_SECONDARY}',
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        CALENDAR_NO: angular.isDefined(params.calenderNumber) ? params.calenderNumber : '{CALENDAR_NO}',
                        COURT_COUNTY: angular.isDefined(params.courtCounty) ? params.courtCounty : '{COURT_COUNTY}',
                        ASSIGNED_JUDGE: angular.isDefined(params.assignJudge) ? params.assignJudge : '{ASSIGNED_JUDGE}',
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers2) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers2, '', 2),
                        DEFENDANT_LAW_FIRM_NAME: angular.isDefined(params.custodianName) ? params.custodianName : '{DEFENDANT_LAW_FIRM_NAME}',
                        DATE_SC_SERVED: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DATE_SC_SERVED}',
                        DATE_SERVICE_COMPLETED: angular.isDefined(params.serviceComplatedDate) ? moment.unix(params.serviceComplatedDate).utc().format('MMMM D, YYYY') : '{DATE_SERVICE_COMPLETED}',
                        DATE_ISSUE_JOINED: angular.isDefined(params.issueJoinedDate) ? moment.unix(params.issueJoinedDate).utc().format('MMMM D, YYYY') : '{DATE_ISSUE_JOINED}'
                    }
                    break;
                case "F1153_1343":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        CALENDAR_NUMBER: angular.isDefined(params.calenderNumber) ? params.calenderNumber : '{CALENDAR_NUMBER}',
                        JUDGE_FULLNAME: angular.isDefined(params.assignJudge) ? params.assignJudge : '{JUDGE_FULLNAME}',
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers2) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers2, '', 2),
                        DEFENDANT_LAW_FIRM_NAME: angular.isDefined(params.custodianName) ? params.custodianName : '{DEFENDANT_LAW_FIRM_NAME}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DATE_SUMMONS_SERVED}',
                        DATE_SERVICE_COMPLETED: angular.isDefined(params.serviceComplatedDate) ? moment.unix(params.serviceComplatedDate).utc().format('MMMM D, YYYY') : '{DATE_SERVICE_COMPLETED}',
                        DATE_ISSUE_JOINED: angular.isDefined(params.issueJoinedDate) ? moment.unix(params.issueJoinedDate).utc().format('MMMM D, YYYY') : '{DATE_ISSUE_JOINED}'
                    }
                    break;
                case "F1153_1338":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    var treatmentId = [];
                    treatmentId[0] = angular.isDefined(params.parentObjPhysicianproviderid) ? parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid) : 0;
                    _.forEach(vm.associateMedicalContactsForNotEmptyPhysician, function (currentItem) {
                        treatmentId.push(parseInt(currentItem.medicaltreatmentid));
                    });

                    var medicalId = [];
                    var medicalType = [];
                    _.forEach(vm.uniqueAllMedicalProviders, function (currentItem) {
                        medicalId.push(parseInt(currentItem.contactid));
                        medicalType.push("Local");
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalTreatmentIds: treatmentId,
                        hospitalId: medicalId,
                        hospitalType: medicalType,
                        DAYS_LOST: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{DAYS_LOST}',
                        PHOTOGRAPH_NUMBER: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{PHOTOGRAPH_NUMBER}',
                        COMBINED_DEMAND_DATE: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM D, YYYY') : '{COMBINED_DEMAND_DATE}'
                    }
                    break;
                case "F1153_1340":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        COURT_COUNTY: angular.isDefined(params.courtCounty) ? params.courtCounty : '{COURT_COUNTY}',
                        USER_RESIDENCE_STATE: angular.isDefined(params.userState) ? params.userState : '{USER_RESIDENCE_STATE}',
                        USER_RESIDENCE_COUNTY: angular.isDefined(params.userCounty) ? params.userCounty : '{USER_RESIDENCE_COUNTY}',
                        PARTY_ROLE: angular.isDefined(params.checkPurpose) ? params.checkPurpose : '{PARTY_ROLE}',
                        DATE_INDEX_ISSUED: angular.isDefined(params.IndexDate) ? moment.unix(params.IndexDate).utc().format('MMMM D, YYYY') : '{DATE_INDEX_ISSUED}',
                        DATE_SC_SERVED: angular.isDefined(params.serviceComplatedDate) ? moment.unix(params.serviceComplatedDate).utc().format('MMMM D, YYYY') : '{DATE_SC_SERVED}',
                        DATE_SC_FILED: angular.isDefined(params.reportDate) ? moment.unix(params.reportDate).utc().format('MMMM D, YYYY') : '{DATE_SC_FILED}'
                    }
                    break;
                case "F1153_1345":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    var treatmentId = [];
                    treatmentId[0] = angular.isDefined(params.parentObjPhysicianproviderid) ? parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid) : 0;
                    _.forEach(vm.associateMedicalContactsForNotEmptyPhysician, function (currentItem) {
                        treatmentId.push(parseInt(currentItem.medicaltreatmentid));
                    });

                    var medicalId = [];
                    var medicalType = [];
                    _.forEach(vm.uniqueAllMedicalProviders, function (currentItem) {
                        medicalId.push(parseInt(currentItem.contactid));
                        medicalType.push("Local");
                    });

                    var captionId1 = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    var captionId2 = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionId1, captionId2],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalTreatmentIds: treatmentId,
                        hospitalId: medicalId,
                        hospitalType: medicalType,
                        MEMBER_ID_NUMBER: angular.isDefined(params.witnessId2) ? params.witnessId2 : '{MEMBER_ID_NUMBER}',
                        COMBINED_DEMAND_DATE: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM D, YYYY') : '{COMBINED_DEMAND_DATE}'
                    }
                    break;
                case "F1238_5":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.medicalproviderid) ? params.medicalproviderid.startEndDate : '{DATE_OF_SERVICE}',
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0]
                    }
                    break;
                case "F1275_8":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.medicalproviderid) ? params.medicalproviderid.startEndDate : '{DATE_OF_SERVICE}',
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : ["Local"]
                    }
                    break;
                case "F1275_7":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.medicalproviderid) ? params.medicalproviderid.startEndDate : '{DATE_OF_SERVICE}',
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : ["Local"]
                    }
                    break;
                case "F1009_6":
                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0]

                    }
                    break;
                case "F1275_14":
                    var insurance = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    var insurance1 = angular.isDefined(params.onlyInsuranceId1) ? parseInt(params.onlyInsuranceId1.insuranceid) : 0;
                    var insurance2 = angular.isDefined(params.onlyInsuranceId2) ? parseInt(params.onlyInsuranceId2.insuranceid) : 0;
                    var defInsurance = angular.isDefined(params.defendantInsuranceId) ? parseInt(params.defendantInsuranceId.insuranceid) : 0;
                    var defInsurance1 = angular.isDefined(params.defendantInsuranceId1) ? parseInt(params.defendantInsuranceId1.insuranceid) : 0;
                    var insuranceId = [defInsurance, defInsurance1, insurance, insurance1, insurance2];
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.soleventid) ? parseInt(params.soleventid) : 0,
                        insuranceIds: insuranceId
                    }
                    break;
                case "F1256_33":
                    var plaintiffs = [];
                    var defendantsId = [];
                    plaintiffs[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    if (params.plaintiffs != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffs.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: plaintiffs,
                        defendantId: defendantsId,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        SECTION_NO: angular.isDefined(params.hicNumber) ? params.hicNumber : '{SECTION_NO}',
                        PARISH_NAME: angular.isDefined(params.fiduciaryName) ? params.fiduciaryName : '{PARISH_NAME}',
                        STATE_NAME: angular.isDefined(params.medicatedId) ? params.medicatedId : '{STATE_NAME}',
                        DIVISION: angular.isDefined(params.typeOfLetters) ? params.typeOfLetters : '{DIVISION}',
                        DEADLINE_TO_PROVIDE_PLAINTIFFS_EXPERT_REPORTS: angular.isDefined(params.issueJoinedDate) ? moment.unix(params.issueJoinedDate).utc().format('MMMM D, YYYY') : '{DEADLINE_TO_PROVIDE_PLAINTIFFS_EXPERT_REPORTS}',
                        DEADLINE_TO_PROVIDE_DEFENSE_EXPERT_REPORTS: angular.isDefined(params.paymentToClientDate) ? moment.unix(params.paymentToClientDate).utc().format('MMMM D, YYYY') : '{DEADLINE_TO_PROVIDE_DEFENSE_EXPERT_REPORTS}',
                        DEADLINE_TO_EXCHANGE_REBUTTAL_EXPERT_REPORTS: angular.isDefined(params.paymentByClientDate) ? moment.unix(params.paymentByClientDate).utc().format('MMMM D, YYYY') : '{DEADLINE_TO_EXCHANGE_REBUTTAL_EXPERT_REPORTS}',
                        DISCOVERY_CUTOFF_AND_PRE_TRIAL_INSERTS_EXCHANGE_DEADLINE: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DISCOVERY_CUTOFF_AND_PRE_TRIAL_INSERTS_EXCHANGE_DEADLINE}',
                        DEADLINE_TO_FILE_PRE_TRIAL_ORDER: angular.isDefined(params.stipulationDate) ? moment.unix(params.stipulationDate).utc().format('MMMM D, YYYY') : '{DEADLINE_TO_FILE_PRE_TRIAL_ORDER}'
                    }
                    break;
                case "F1256_44":
                    var plaintiffs = [];
                    var defendantsId = [];
                    plaintiffs[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    if (params.plaintiffs != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffs.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: plaintiffs,
                        defendantId: defendantsId,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        SECTION_NO: angular.isDefined(params.hicNumber) ? params.hicNumber : '{SECTION_NO}',
                        PARISH_NAME: angular.isDefined(params.fiduciaryName) ? params.fiduciaryName : '{PARISH_NAME}',
                        STATE_NAME: angular.isDefined(params.medicatedId) ? params.medicatedId : '{STATE_NAME}',
                        DIVISION: angular.isDefined(params.typeOfLetters) ? params.typeOfLetters : '{DIVISION}',
                        LOCATION: angular.isDefined(params.locationAccident) ? params.locationAccident : '{LOCATION}',
                        JUDGE_FULLNAME: angular.isDefined(params.judgeName) ? params.judgeName : '{JUDGE_FULLNAME}',
                        STATUS_CONFERENCE_DATE: angular.isDefined(params.conferenceHeldDate) ? moment.unix(params.conferenceHeldDate).utc().format('Do') + " DAY OF " + moment.unix(params.conferenceHeldDate).utc().format('MMMM') + " " + moment.unix(params.conferenceHeldDate).utc().format('YYYY') : '{STATUS_CONFERENCE_DATE}',
                        ORDER_DATE: angular.isDefined(params.orderDate) ? moment.unix(params.orderDate).utc().format('Do') + " DAY OF " + moment.unix(params.orderDate).utc().format('MMMM') + " " + moment.unix(params.orderDate).utc().format('YYYY') : '{ORDER_DATE}'
                    }
                    break;
                case "F1256_45":
                    var plaintiffs = [];
                    var defendantsId = [];
                    plaintiffs[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    defendantsId[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    if (params.plaintiffs != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffs.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendantsId.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: plaintiffs,
                        defendantId: defendantsId,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        SECTION_NO: angular.isDefined(params.hicNumber) ? params.hicNumber : '{SECTION_NO}',
                        PARISH_NAME: angular.isDefined(params.fiduciaryName) ? params.fiduciaryName : '{PARISH_NAME}',
                        STATE_NAME: angular.isDefined(params.medicatedId) ? params.medicatedId : '{STATE_NAME}',
                        DIVISION: angular.isDefined(params.typeOfLetters) ? params.typeOfLetters : '{DIVISION}',
                        LOCATION: angular.isDefined(params.locationAccident) ? params.locationAccident : '{LOCATION}',
                        JUDGE_FULLNAME: angular.isDefined(params.judgeName) ? params.judgeName : '{JUDGE_FULLNAME}',
                        DEFENDANT_LAW_FIRM_NAME: angular.isDefined(params.defendantLawFirm1) ? params.defendantLawFirm1 : '{DEFENDANT_LAW_FIRM_NAME}',
                        AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2),
                        BAR_NUMBER: angular.isDefined(params.barNumber) ? params.barNumber : '{BAR_NUMBER}',
                        ALL_DAUBERT_MOTIONS_HEARD_TIME: angular.isDefined(params.daubertMotion) ? params.daubertMotion : '{ALL_DAUBERT_MOTIONS_HEARD_TIME}',
                        ALL_DISPOSITIVE_MOTIONS_HEARD_TIME: angular.isDefined(params.dispositiveMotion) ? params.dispositiveMotion : '{ALL_DISPOSITIVE_MOTIONS_HEARD_TIME}',
                        DISCOVERY_PROPOUNDED_DAYS: angular.isDefined(params.discoveryPropound) ? params.discoveryPropound : '{DISCOVERY_PROPOUNDED_DAYS}',
                        DISCOVERY_COMPLETED_DAYS: angular.isDefined(params.daysLost) ? params.daysLost : '{DISCOVERY_COMPLETED_DAYS}',
                        PROPOSED_JURY_CHARGES_SUBMITTED_DAYS: angular.isDefined(params.juryCharges) ? params.juryCharges : '{PROPOSED_JURY_CHARGES_SUBMITTED_DAYS}',
                        MOTIONS_IN_LIMINE_SUBMITTED_DAYS: angular.isDefined(params.motionLimine) ? params.motionLimine : '{MOTIONS_IN_LIMINE_SUBMITTED_DAYS}',
                        JURY_BOND_AMOUNT_POSTED_DAYS: angular.isDefined(params.juryBond) ? params.juryBond : '{JURY_BOND_AMOUNT_POSTED_DAYS}',
                        TRIAL_TIME: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '{TRIAL_TIME}',
                        ORDER_DATE: angular.isDefined(params.orderDate) ? moment.unix(params.orderDate).utc().format('Do') + " DAY OF " + moment.unix(params.orderDate).utc().format('MMMM') + " " + moment.unix(params.orderDate).utc().format('YYYY') : '{ORDER_DATE}',
                        ALL_AMENDMENTS_TO_PLEADINGS_FILED_DATE: angular.isDefined(params.amendmentsDate) ? moment.unix(params.amendmentsDate).utc().format('MMMM D, YYYY') : '{ALL_AMENDMENTS_TO_PLEADINGS_FILED_DATE}',
                        ALL_THIRD_PARTY_DEMANDS_FILED_DATE: angular.isDefined(params.thirdPartyDate) ? moment.unix(params.thirdPartyDate).utc().format('MMMM D, YYYY') : '{ALL_THIRD_PARTY_DEMANDS_FILED_DATE}',
                        PLAINTIFFS_LIST_OF_WITNESSES_FILED_DATE: angular.isDefined(params.plaintiffWitnessDate) ? moment.unix(params.plaintiffWitnessDate).utc().format('MMMM D, YYYY') : '{PLAINTIFFS_LIST_OF_WITNESSES_FILED_DATE}',
                        PLAINTIFFS_EXPERT_REPROTS_DELIVER_DATE: angular.isDefined(params.expertDate) ? moment.unix(params.expertDate).utc().format('MMMM D, YYYY') : '{PLAINTIFFS_EXPERT_REPROTS_DELIVER_DATE}',
                        PLAINTIFFS_LIST_OF_EXHIBITS_FILED_DATE: angular.isDefined(params.exhibitsDate) ? moment.unix(params.exhibitsDate).utc().format('MMMM D, YYYY') : '{PLAINTIFFS_LIST_OF_EXHIBITS_FILED_DATE}',
                        DEFENDANTS_LIST_OF_WITNESSES_FILED_DATE: angular.isDefined(params.defendantWitnessDate) ? moment.unix(params.defendantWitnessDate).utc().format('MMMM D, YYYY') : '{DEFENDANTS_LIST_OF_WITNESSES_FILED_DATE}',
                        DEFENDANTS_LIST_OF_EXHIBITS_FILED_DATE: angular.isDefined(params.defendantExhibitsDate) ? moment.unix(params.defendantExhibitsDate).utc().format('MMMM D, YYYY') : '{DEFENDANTS_LIST_OF_EXHIBITS_FILED_DATE}',
                        DEFENDANTS_EXPERT_REPROTS_DELIVER_DATE: angular.isDefined(params.defendantExpertDate) ? moment.unix(params.defendantExpertDate).utc().format('MMMM D, YYYY') : '{DEFENDANTS_EXPERT_REPROTS_DELIVER_DATE}',
                        DISCOVERY_COMPLETED_DATE: angular.isDefined(params.discoveryComplpetedDate) ? moment.unix(params.discoveryComplpetedDate).utc().format('MMMM D, YYYY') : '{DISCOVERY_COMPLETED_DATE}',
                        DISCOVERY_PROPOUNDED_DATE: angular.isDefined(params.discoveryPropoundDate) ? moment.unix(params.discoveryPropoundDate).utc().format('MMMM D, YYYY') : '{DISCOVERY_PROPOUNDED_DATE}',
                        ALL_DISPOSITIVE_MOTIONS_AND_DILATORY_AND_DECLINATORY_FILED_DATE: angular.isDefined(params.allDilatoryDate) ? moment.unix(params.allDilatoryDate).utc().format('MMMM D, YYYY') : '{ALL_DISPOSITIVE_MOTIONS_AND_DILATORY_AND_DECLINATORY_FILED_DATE}',
                        ALL_DISPOSITIVE_MOTIONS_HEARD_DATE: angular.isDefined(params.allDispositiveMotionDate) ? moment.unix(params.allDispositiveMotionDate).utc().format('MMMM D, YYYY') : '{ALL_DISPOSITIVE_MOTIONS_HEARD_DATE}',
                        ALL_DAUBERT_MOTIONS_FILED_DATE: angular.isDefined(params.allDaubertDate) ? moment.unix(params.allDaubertDate).utc().format('MMMM D, YYYY') : '{ALL_DAUBERT_MOTIONS_FILED_DATE}',
                        ALL_DAUBERT_MOTIONS_HEARD_DATE: angular.isDefined(params.daubertMotionHeardDate) ? moment.unix(params.daubertMotionHeardDate).utc().format('MMMM D, YYYY') : '{ALL_DAUBERT_MOTIONS_HEARD_DATE}',
                        PROPOSED_JURY_CHARGES_SUBMITTED_DATE: angular.isDefined(params.juryChargeDate) ? moment.unix(params.juryChargeDate).utc().format('MMMM D, YYYY') : '{PROPOSED_JURY_CHARGES_SUBMITTED_DATE}',
                        MOTIONS_IN_LIMINE_SUBMITTED_DATE: angular.isDefined(params.motionLimineDate) ? moment.unix(params.motionLimineDate).utc().format('MMMM D, YYYY') : '{MOTIONS_IN_LIMINE_SUBMITTED_DATE}',
                        ALL_MOTIONS_IN_LIMINE_HEARD_DATE: angular.isDefined(params.motionLimineHeardDate) ? moment.unix(params.motionLimineHeardDate).utc().format('MMMM D, YYYY') : '{ALL_MOTIONS_IN_LIMINE_HEARD_DATE}',
                        JURY_BOND_AMOUNT_POSTED_DATE: angular.isDefined(params.bondAmountDate) ? moment.unix(params.bondAmountDate).utc().format('MMMM D, YYYY') : '{JURY_BOND_AMOUNT_POSTED_DATE}',
                        TRIAL_DATE: angular.isDefined(params.trialDate) ? moment.unix(params.trialDate).utc().format('MMMM D, YYYY') : '{TRIAL_DATE}'
                    }
                    break;
                case "F1328_4":
                    var bill_id = 0;
                    if (params.medicalproviderid) {
                        if (params.medicalproviderid.medicalbillid) {
                            bill_id = params.medicalproviderid.medicalbillid;
                        }
                    }
                    var type1 = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type1 = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.contact_type != undefined) {
                            type2 = (params.medicalproviderid1.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var id1 = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.providerid.contactid) : 0;
                    var id2 = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.providerid.contactid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalBillId: utils.isNotEmptyVal(bill_id) ? [parseInt(bill_id)] : [bill_id],
                        medicalproviderid: [id1, id2],
                        medicalprovidertype: [type1, type2],
                        DATE_OF_SERVICE: angular.isDefined(params.medicalTreatmentDates) ? params.medicalTreatmentDates.startEndDate1 : '{DATE_OF_SERVICE}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '{LOCATION_OF_ACCIDENT_COUNTY}'
                    }
                    break;
                case "F1328_9":
                    var type = "Local";
                    var bill_id = 0;
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    if (params.medicalproviderid) {
                        if (params.medicalproviderid.medicalbillid) {
                            bill_id = params.medicalproviderid.medicalbillid;
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalBillId: utils.isNotEmptyVal(bill_id) ? [parseInt(bill_id)] : [bill_id],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.medicalTreatmentDates) ? params.medicalTreatmentDates.startEndDate1 : '{DATE_OF_SERVICE}'
                    }
                    break;
                case "F1_59":
                    var defendantid1 = 0;
                    var defendantid2 = 0;
                    defendantid1 = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner.defendantid) : 0;
                    defendantid2 = angular.isDefined(params.secDefOperator) ? parseInt(params.secDefOperator.defendantid) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: [defendantid1, defendantid2],
                        DEFENDANT_COUNTY_1: angular.isDefined(params.countyName) ? params.countyName : '{DEFENDANT_COUNTY_1}',
                        DEFENDANT_COUNTY_2: angular.isDefined(params.locationOfCounty) ? params.locationOfCounty : '{DEFENDANT_COUNTY_2}',
                        PLAINTIFF_VEHICLE_NAME: angular.isDefined(params.plaintiffVehicleType) ? params.plaintiffVehicleType : '{PLAINTIFF_VEHICLE_NAME}',
                        PLAINTIFF_LICENSE_STATE: angular.isDefined(params.plantiffResidenceState) ? params.plantiffResidenceState : '{PLAINTIFF_LICENSE_STATE}',
                        PLAINTIFF_LICENSE_NUMBER: angular.isDefined(params.plaintiffLicenseNumber) ? params.plaintiffLicenseNumber : '{PLAINTIFF_LICENSE_NUMBER}',
                        DEFENDANT_VEHICLE_NAME: angular.isDefined(params.defVehicleOwner) ? params.defVehicleOwner : '{DEFENDANT_VEHICLE_NAME}',
                        DEFENDANT_LICENSE_STATE: angular.isDefined(params.defVehicleState) ? params.defVehicleState : '{DEFENDANT_LICENSE_STATE}',
                        DEFENDANT_LICENSE_NUMBER: angular.isDefined(params.defVehicleNumber) ? params.defVehicleNumber : '{DEFENDANT_LICENSE_NUMBER}',
                        DEFENDANT_VEHICLE_NAME_2: angular.isDefined(params.defVehicleOwner2) ? params.defVehicleOwner2 : '{DEFENDANT_VEHICLE_NAME_2}',
                        DEFENDANT_LICENSE_STATE_2: angular.isDefined(params.defVehicleState2) ? params.defVehicleState2 : '{DEFENDANT_LICENSE_STATE_2}',
                        DEFENDANT_LICENSE_NUMBER_2: angular.isDefined(params.defVehicleNumber2) ? params.defVehicleNumber2 : '{DEFENDANT_LICENSE_NUMBER_2}',
                        TIME_OF_INCIDENT: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '{TIME_OF_INCIDENT}',
                        BASED_ON_VENUE: utils.isEmptyVal(params.baseonvenue) ? "{BASED_ON_VENUE}" : params.baseonvenue,
                        PLAINTIFF_OR_DEFENDANT_ADDRESS_OR_LOCATION: (params.plaintiffordefendantaddress == "Blank" || params.plaintiffordefendantaddress == '' || utils.isEmptyVal(params.plaintiffordefendantaddress)) ? "{PLAINTIFF_OR_DEFENDANT_ADDRESS_OR_LOCATION}" : params.plaintiffordefendantaddress
                    }
                    break;
                case "F1300_3":
                    var bill_id1 = 0;
                    if (params.medicalproviderid) {
                        if (params.medicalproviderid.medicalbillid) {
                            bill_id1 = parseInt(params.medicalproviderid.medicalbillid);
                        }
                    }
                    var bill_id2 = 0;
                    if (params.medicalproviderid1) {
                        if (params.medicalproviderid1.medicalbillid) {
                            bill_id2 = parseInt(params.medicalproviderid1.medicalbillid);
                        }
                    }
                    var type1 = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type1 = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.contact_type != undefined) {
                            type2 = (params.medicalproviderid1.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var id1 = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    var id2 = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.contactid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalBillId: [bill_id1, bill_id2],
                        medicalBillType: [type1, type2],
                        medicalproviderid: [id1, id2],
                        medicalprovidertype: [type1, type2],
                        AMOUNT_OF_COSTS: angular.isDefined(params.amountInNumbers3) ? params.amountInNumbers3 : '{AMOUNT_OF_COSTS}',
                        SETTLEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : '{SETTLEMENT_AMOUNT_IN_NUMBERS}',
                        ATTORNEY_FEE_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? params.amountInNumbers2 : '{ATTORNEY_FEE_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1300_8":
                    var plaintiffs = [];
                    var defendants = [];
                    plaintiffs[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    if (params.plaintiffs != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffs.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        defendants.push(parseInt(currentItem.defendantid));
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: plaintiffs,
                        defendantId: defendants,
                        JUDGE_FULLNAME: angular.isDefined(params.assignJudge) ? params.assignJudge : '{JUDGE_FULLNAME}',
                        COURT_DEPARTMENT_NAME: angular.isDefined(params.courtReporter) ? params.courtReporter : '{COURT_DEPARTMENT_NAME}',
                        MATTER_COURT_BRANCH_NAME: angular.isDefined(params.courtCounty) ? params.courtCounty : '{MATTER_COURT_BRANCH_NAME}'
                    }
                    break;
                case "F1300_9":
                    var plaintiffs = [];
                    var defendantBlock = [];
                    var witnessBlock = [];
                    var treatmentidBlock = [];
                    var billidBlock = [];
                    var billType = [];
                    plaintiffs[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;

                    _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                        if (currentItem.plaintiffid != null) {
                            plaintiffs.push(parseInt(currentItem.plaintiffid));
                        }
                    })

                    defendantBlock[0] = angular.isDefined(params.leftTxtOne) ? parseInt(params.leftTxtOne) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null || currentItem.defendantid != '') {
                            defendantBlock.push(parseInt(currentItem.defendantid));
                        }
                    })
                    _.forEach(vm.allWitness, function (currentItem) {
                        if (currentItem.contactid != null) {
                            witnessBlock.push(parseInt(currentItem.contactid));
                        }
                    })
                    _.forEach(vm.medicalBillInfoList, function (currentItem) {
                        if (currentItem.medicalbillid != null) {
                            billidBlock.push(parseInt(currentItem.medicalbillid));
                        }

                        if (currentItem.is_global == 0) {
                            billType.push('Local')
                        } else {
                            billType.push('Global');
                        }
                    })
                    _.forEach(vm.allMedicalProvidersList, function (currentItem) {
                        if (currentItem.medicaltreatmentid != null) {
                            treatmentidBlock.push(parseInt(currentItem.medicaltreatmentid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffs) ? plaintiffs : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0],
                        witnessId: utils.isNotEmptyVal(witnessBlock) ? witnessBlock : [0],
                        medicalTreatmentIds: utils.isNotEmptyVal(treatmentidBlock) ? treatmentidBlock : [0],
                        medicalBillId: utils.isNotEmptyVal(billidBlock) ? billidBlock : [0],
                        medicalBillType: utils.isNotEmptyVal(billType) ? billType : ['Local'],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        JUDGE_FULLNAME: angular.isDefined(params.assignJudge) ? params.assignJudge : '{JUDGE_FULLNAME}',
                        COURT_DEPARTMENT_NAME: angular.isDefined(params.courtReporter) ? params.courtReporter : '{COURT_DEPARTMENT_NAME}',
                        MATTER_COURT_BRANCH_NAME: angular.isDefined(params.courtCounty) ? params.courtCounty : '{MATTER_COURT_BRANCH_NAME}',
                        DRIVER_LICENSE_NUMBER: angular.isDefined(params.driverLicenseNumber) ? params.driverLicenseNumber : '{DRIVER_LICENSE_NUMBER}',
                        PLAINTIFF_VEHICLE_TYPE: angular.isDefined(params.plaintiffVehicleType) ? params.plaintiffVehicleType : '{PLAINTIFF_VEHICLE_TYPE}',
                        LOSS_OF_EARNINGS_INFORMATION: angular.isDefined(params.lostIncome) ? params.lostIncome : '{LOSS_OF_EARNINGS_INFORMATION}',
                        DESCRIPTION_OF_VEHICLE: angular.isDefined(params.vehicleInfo) ? params.vehicleInfo : '{DESCRIPTION_OF_VEHICLE}',
                        PHOTOGRAPH_AND_VIDEO_INFORMATION: angular.isDefined(params.courtReporterVideographer) ? params.courtReporterVideographer : '{PHOTOGRAPH_AND_VIDEO_INFORMATION}',
                        POLICE_REPORT_INFORMATION: angular.isDefined(params.policeAccidentInfo) ? params.policeAccidentInfo : '{POLICE_REPORT_INFORMATION}',
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '{ACCIDENT_TIME}',
                        PLAINTIFF_VEHICLE_INFORMATION: angular.isDefined(params.plaintiffVehicleMake) ? params.plaintiffVehicleMake : '{PLAINTIFF_VEHICLE_INFORMATION}',
                        DEFENDENT_VEHICLE_INFORMATION: angular.isDefined(params.defendentVehicleType) ? params.defendentVehicleType : '{DEFENDENT_VEHICLE_INFORMATION}',
                        DAMAGE_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? params.amountInNumbers4 : '{DAMAGE_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_11":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    var type = "Local";
                    var medType = [];
                    var medId = [];
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = [type];
                    _.forEach(vm.medicalProvidersFromBillAndInfo, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    var treatmentId = [];
                    var treatmentType = [];
                    _.forEach(vm.physiciansFromMedicalInfoAndOtherParties, function (currentItem) {
                        treatmentId.push(parseInt(currentItem.contactid));
                        if (currentItem.contact_type) {
                            treatmentType.push(currentItem.contact_type);
                        } else {
                            treatmentType.push('Local');
                        }
                    });

                    var hospitalIds = [];
                    var hospitalType = [];
                    _.forEach(vm.otherPartytHospital, function (currentItem) {
                        hospitalIds.push(parseInt(currentItem.contactid));
                        hospitalType.push(currentItem.contact_type);
                    });

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        captionId: captionIds,
                        contactId: utils.isEmptyVal(treatmentId) ? [0] : treatmentId,
                        contactTypes: utils.isEmptyVal(treatmentType) ? [''] : treatmentType,
                        hospitalId: utils.isEmptyVal(hospitalIds) ? [0] : hospitalIds,
                        hospitalType: utils.isEmptyVal(hospitalType) ? [0] : hospitalType,
                        defendantId: angular.isDefined(params.secDefOwner) ? [parseInt(params.secDefOwner)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '{ACCIDENT_TIME}',
                        BED_CONFINEMENT: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{BED_CONFINEMENT}',
                        LOCATION_OF_ACCIDENT_ADDRESS: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{LOCATION_OF_ACCIDENT_ADDRESS}',
                        BED_CONFINEMENT_AFTER_SURGERY: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{BED_CONFINEMENT_AFTER_SURGERY}',
                        CONFINEMENT_TO_MEDICAL_CENTER: angular.isDefined(params.leftTxtThree) ? params.leftTxtThree : '{CONFINEMENT_TO_MEDICAL_CENTER}',
                        MEDICAL_EXPENSES_REIMBURSED_BY: angular.isDefined(params.leftTxtFour) ? params.leftTxtFour : '{MEDICAL_EXPENSES_REIMBURSED_BY}',
                        CLAIM_NUMBER_OF_MEDICAL_EXPENSES_REIMBURSED_BY: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{CLAIM_NUMBER_OF_MEDICAL_EXPENSES_REIMBURSED_BY}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{DEFENDANT_FILE_NUMBER}',
                        FUTURE_MEDICAL_EXPENSE_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : '{FUTURE_MEDICAL_EXPENSE_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? params.amountInNumbers2 : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? params.amountInNumbers3 : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}',
                        RADIOLOGICAL_SERVICES_AND_DIAGNOSTIC_TESTS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? params.amountInNumbers4 : '{RADIOLOGICAL_SERVICES_AND_DIAGNOSTIC_TESTS_AMOUNT_IN_NUMBERS}',
                        MISCELLANEOUS_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers5) ? params.amountInNumbers5 : '{MISCELLANEOUS_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_14":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    var type1 = "Local";
                    var medType = [];
                    var medId = [];
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type1 = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type1;
                    _.forEach(vm.medicalProvidersFromBillAndInfo, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.secDefOwner) ? [parseInt(params.secDefOwner)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        captionId: captionIds,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DATE_OF_SERVICE: angular.isDefined(params.medicalTreatmentDates) ? params.medicalTreatmentDates : "{DATE_OF_SERVICE}",
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        COLLATERAL_SOURCE_NAME: angular.isDefined(params.contactName) ? params.contactName : '{COLLATERAL_SOURCE_NAME}',
                        COLLATERAL_SOURCE_ADDRESS: angular.isDefined(params.userAddress) ? params.userAddress : '{COLLATERAL_SOURCE_ADDRESS}',
                        CLAIM_NUMBER_OF_COLLATERAL_SOURCE: angular.isDefined(params.defendantClaimNumber) ? params.defendantClaimNumber : '{CLAIM_NUMBER_OF_COLLATERAL_SOURCE}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? params.amountInNumbers2 : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? params.amountInNumbers3 : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}',
                        MEDICAL_SUPPLIES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? params.amountInNumbers6 : '{MEDICAL_SUPPLIES_AMOUNT_IN_NUMBERS}',
                        XRAY_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers7) ? params.amountInNumbers7 : '{XRAY_EXPENSES_AMOUNT_IN_NUMBERS}',
                        NURSE_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers8) ? params.amountInNumbers8 : '{NURSE_SERVICES_AMOUNT_IN_NUMBERS}',
                        LOSS_OF_EARNINGS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers9) ? params.amountInNumbers9 : '{LOSS_OF_EARNINGS_AMOUNT_IN_NUMBERS}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers10) ? params.amountInNumbers10 : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1135_1293":
                    var plaintiffs = [];
                    var defendantBlock = [];

                    _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                        if (currentItem.plaintiffid != null) {
                            plaintiffs.push(parseInt(currentItem.plaintiffid));
                        }
                    })

                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantBlock.push(parseInt(currentItem.defendantid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffs) ? plaintiffs : [0],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0]
                    }
                    break;
                case "F1135_1292":
                    var defendantBlock = [];

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        DATE_MOTION_SERVED: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM D, YYYY') : '{DATE_MOTION_SERVED}',
                        TYPE_OF_MOTION: angular.isDefined(params.motionLimine) ? params.motionLimine : '{TYPE_OF_MOTION}'
                    }
                    break;
                case "F1135_1291":
                    var plaintiffs = [];
                    var defendantBlock = [];

                    _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                        if (currentItem.plaintiffid != null) {
                            plaintiffs.push(parseInt(currentItem.plaintiffid));
                        }
                    })

                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantBlock.push(parseInt(currentItem.defendantid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffs) ? plaintiffs : [0],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0]
                    }
                    break;
                case "F1118_23":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;


                    var plaintiff = [];
                    plaintiff[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    plaintiff[1] = angular.isDefined(params.plaintiffMulti1) ? parseInt(params.plaintiffMulti1.plaintiffid) : 0;
                    plaintiff[2] = angular.isDefined(params.plaintiffMulti2) ? parseInt(params.plaintiffMulti2.plaintiffid) : 0;
                    plaintiff[3] = angular.isDefined(params.plaintiffMulti3) ? parseInt(params.plaintiffMulti3.plaintiffid) : 0;

                    var defendants = [];
                    defendants[0] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;
                    defendants[1] = angular.isDefined(params.secDefOperator) ? parseInt(params.secDefOperator) : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    var type1 = "Local";
                    var type2 = "Local";
                    var medType = [];
                    var medId = [];
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type1 = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type2 = (params.medicalproviderid1.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type1;
                    medId[1] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.contactid) : 0;
                    medType[1] = type2;
                    _.forEach(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: plaintiff,
                        defendantId: defendants,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '{ACCIDENT_TIME}',
                        CLAIM_NUMBER_OF_COLLATERAL_SOURCE: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{CLAIM_NUMBER_OF_COLLATERAL_SOURCE}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.leftTxtThree) ? params.leftTxtThree : '{DEFENDANT_FILE_NUMBER}',
                        COLLATERAL_SOURCE_NAME: angular.isDefined(params.leftTxtFour) ? params.leftTxtFour : '{COLLATERAL_SOURCE_NAME}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? params.locationAccident : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        MEDICAL_SURGICAL_DENTAL_SERVICES_AMOUNT_IN_NUMBERS_PRIMARY: angular.isDefined(params.amountInNumbers) ? params.amountInNumbers : '{MEDICAL_SURGICAL_DENTAL_SERVICES_AMOUNT_IN_NUMBERS_PRIMARY}',
                        MEDICAL_SURGICAL_DENTAL_SERVICES_AMOUNT_IN_NUMBERS_SECONDARY: angular.isDefined(params.amountInNumbers2) ? params.amountInNumbers2 : '{MEDICAL_SURGICAL_DENTAL_SERVICES_AMOUNT_IN_NUMBERS_SECONDARY}',
                        MEDICAL_SURGICAL_DENTAL_SERVICES_AMOUNT_IN_NUMBERS_TERNARY: angular.isDefined(params.amountInNumbers3) ? params.amountInNumbers3 : '{MEDICAL_SURGICAL_DENTAL_SERVICES_AMOUNT_IN_NUMBERS_TERNARY}',
                        MEDICAL_SURGICAL_DENTAL_SERVICES_AMOUNT_IN_NUMBERS_QUATERNARY: angular.isDefined(params.amountInNumbers4) ? params.amountInNumbers4 : '{MEDICAL_SURGICAL_DENTAL_SERVICES_AMOUNT_IN_NUMBERS_QUATERNARY}',
                        HOSPITAL_SERVICES_AMOUNT_IN_NUMBERS_PRIMARY: angular.isDefined(params.amountInNumbers5) ? params.amountInNumbers5 : '{HOSPITAL_SERVICES_AMOUNT_IN_NUMBERS_PRIMARY}',
                        HOSPITAL_SERVICES_AMOUNT_IN_NUMBERS_SECONDARY: angular.isDefined(params.amountInNumbers6) ? params.amountInNumbers6 : '{HOSPITAL_SERVICES_AMOUNT_IN_NUMBERS_SECONDARY}',
                        HOSPITAL_SERVICES_AMOUNT_IN_NUMBERS_TERNARY: angular.isDefined(params.amountInNumbers7) ? params.amountInNumbers7 : '{HOSPITAL_SERVICES_AMOUNT_IN_NUMBERS_TERNARY}',
                        HOSPITAL_SERVICES_AMOUNT_IN_NUMBERS_QUATERNARY: angular.isDefined(params.amountInNumbers8) ? params.amountInNumbers8 : '{HOSPITAL_SERVICES_AMOUNT_IN_NUMBERS_QUATERNARY}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS_PRIMARY: angular.isDefined(params.amountInNumbers9) ? params.amountInNumbers9 : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS_PRIMARY}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS_SECONDARY: angular.isDefined(params.amountInNumbers10) ? params.amountInNumbers10 : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS_SECONDARY}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS_TERNARY: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS_TERNARY}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS_QUATERNARY: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS_QUATERNARY}'
                    }
                    break;
                case "F1118_19":
                    var eventMulti = [];
                    eventMulti[0] = angular.isDefined(params.imeeventid) ? parseInt(params.imeeventid) : 0;
                    eventMulti[1] = angular.isDefined(params.othereventid) ? parseInt(params.othereventid) : 0;

                    var otherParty_phy_id = [];
                    var otherParty_phy_type = [];
                    otherParty_phy_id[0] = angular.isDefined(params.otherPartyPhysician) ? parseInt(params.otherPartyPhysician.contactid) : 0;
                    otherParty_phy_id[1] = angular.isDefined(params.otherPartyPhysician2) ? parseInt(params.otherPartyPhysician2.contactid) : 0;

                    otherParty_phy_type[0] = angular.isDefined(params.otherPartyPhysician) ? params.otherPartyPhysician.contact_type : 'Local';
                    otherParty_phy_type[1] = angular.isDefined(params.otherPartyPhysician2) ? params.otherPartyPhysician2.contact_type : 'Local';

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventIds: eventMulti,
                        contactId: otherParty_phy_id,
                        contactTypes: otherParty_phy_type,
                        OTHER_PARTY_PHYSICIAN_SPECIALITY_PRIMARY: utils.isEmptyVal(params.rightTxtOne) ? '{OTHER_PARTY_PHYSICIAN_SPECIALITY_PRIMARY}' : params.rightTxtOne,
                        OTHER_PARTY_PHYSICIAN_SPECIALITY_SECONDARY: utils.isEmptyVal(params.rightTxtTwo) ? '{OTHER_PARTY_PHYSICIAN_SPECIALITY_SECONDARY}' : params.rightTxtTwo
                    }
                    break;
                case "F1118_24":
                case "F1429_66":
                    var type = "Local";
                    if (params.physicianproviderid && params.physicianproviderid.contact_type) {
                        type = params.physicianproviderid.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        contactId: angular.isDefined(params.physicianproviderid) ? [parseInt(params.physicianproviderid.contactid)] : [0],
                        contactTypes: [type]
                    }
                    break;
                case "F1118_25":
                    var id1;
                    if (params.insuranceproviderid && params.insuranceproviderid.type == "Insurance Provider") {
                        id1 = params.insuranceproviderid.insuranceid ? parseInt(params.insuranceproviderid.insuranceid) : 0;
                    }
                    var type = "Local";
                    type = angular.isDefined(params.insuranceproviderid) ? params.insuranceproviderid.contact_type : "Local";
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.insuranceproviderid) ? [parseInt(params.insuranceproviderid.contactid)] : [0],
                        contactTypes: [type],
                        insuranceIds: utils.isNotEmptyVal(id1) ? [id1] : [0]
                    }
                    break;
                case "F1118_28":
                    var type = "Local";
                    if (params.physicianproviderid && params.physicianproviderid.contact_type) {
                        type = params.physicianproviderid.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.physicianproviderid) ? [parseInt(params.physicianproviderid.contactid)] : [0],
                        contactTypes: [type]
                    }
                    break;
                case "F1118_30":
                case "F1429_72":
                    var id1;
                    if (params.insuranceproviderid && params.insuranceproviderid.type == "Insurance Provider") {
                        id1 = params.insuranceproviderid.insuranceid ? parseInt(params.insuranceproviderid.insuranceid) : 0;
                    }
                    var type = "Local";
                    type = angular.isDefined(params.insuranceproviderid) ? params.insuranceproviderid.contact_type : "Local";
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.insuranceproviderid) ? [parseInt(params.insuranceproviderid.contactid)] : [0],
                        contactTypes: [type],
                        insuranceIds: utils.isNotEmptyVal(id1) ? [id1] : [0]
                    }
                    break;
                case "F1118_31":
                    var id1;
                    if (params.insuranceproviderid && params.insuranceproviderid.type == "Insurance Provider") {
                        id1 = params.insuranceproviderid.insuranceid ? parseInt(params.insuranceproviderid.insuranceid) : 0;
                    }
                    var type = "Local";
                    type = angular.isDefined(params.insuranceproviderid) ? params.insuranceproviderid.contact_type : "Local";
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.insuranceproviderid) ? [parseInt(params.insuranceproviderid.contactid)] : [0],
                        contactTypes: [type],
                        insuranceIds: utils.isNotEmptyVal(id1) ? [id1] : [0]
                    }
                    break;
                case "F1118_32":
                    var firmId;
                    if (utils.isNotEmptyVal(vm.userInfo)) {
                        firmId = vm.userInfo[0].firm_id;
                    }
                    var id = [];
                    id[0] = angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : 0;
                    id[1] = angular.isDefined(params.attorneyid1) ? parseInt(params.attorneyid1) : 0;
                    var paraIds = []
                    paraIds[0] = angular.isDefined(params.paralegalid) ? parseInt(params.paralegalid) : 0;
                    paraIds[1] = angular.isDefined(params.secondparalegalid) ? parseInt(params.secondparalegalid) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: utils.isNotEmptyVal(id) ? id : [0],
                        paralegalId: utils.isNotEmptyVal(paraIds) ? paraIds : [0],
                        fid: utils.isNotEmptyVal(firmId) ? parseInt(firmId) : 0
                    }
                    break;
                case "F1118_33":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;
                    defendantIds[2] = angular.isDefined(params.secDefOperator) ? parseInt(params.secDefOperator) : 0;

                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.onlyInsuranceId2) ? parseInt(params.onlyInsuranceId2.insuranceid) : 0;

                    var type = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: defendantIds,
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        insuranceIds: insuranceId,
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        DAMAGE_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? (params.amountInNumbers) : '{DAMAGE_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        XRAY_MRI_AND_CTSCAN_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? (params.amountInNumbers4) : '{XRAY_MRI_AND_CTSCAN_EXPENSES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_34":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS_PRIMARY: angular.isDefined(params.leftTxtOne) ? (params.leftTxtOne) : '{NUMBER_OF_DAYS_WEEKS_MONTHS_PRIMARY}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS_SECONDARY: angular.isDefined(params.leftTxtTwo) ? (params.leftTxtTwo) : '{NUMBER_OF_DAYS_WEEKS_MONTHS_SECONDARY}',
                        TAX_RETURNS_YEAR_PRIMARY: angular.isDefined(params.leftTxtThree) ? (params.leftTxtThree) : '{TAX_RETURNS_YEAR_PRIMARY}',
                        TAX_RETURNS_YEAR_SECONDARY: angular.isDefined(params.leftTxtFour) ? (params.leftTxtFour) : '{TAX_RETURNS_YEAR_SECONDARY}',
                        TAX_RETURNS_YEAR_TERNARY: angular.isDefined(params.leftTxtFive) ? (params.leftTxtFive) : '{TAX_RETURNS_YEAR_TERNARY}',
                        LOSS_OF_EARNINGS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers5) ? (params.amountInNumbers5) : '{LOSS_OF_EARNINGS_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        XRAY_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? (params.amountInNumbers6) : '{XRAY_EXPENSES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_35":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;

                    var medType = [];
                    var medId = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    if (params.medicalproviderid2 != undefined) {
                        if (params.medicalproviderid2.contact_type != undefined) {
                            type1 = (params.medicalproviderid2.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var medId = [];
                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;

                    medId[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0;
                    medType[1] = type1;

                    _.forEach(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        } else {
                            medId.push(0);
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: defendantIds,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_STREET: angular.isDefined(params.petitionerStreet) ? (params.petitionerStreet) : '{LOCATION_OF_ACCIDENT_STREET}',
                        SURGERY: angular.isDefined(params.rightTxtOne) ? (params.rightTxtOne) : '{SURGERY}',
                        DAYS_TREATED_IN_HOSPITAL: angular.isDefined(params.rightTxtTwo) ? (params.rightTxtTwo) : '{DAYS_TREATED_IN_HOSPITAL}',
                        DAYS_TREATED_IN_SURGICAL_CENTER: angular.isDefined(params.rightTxtThree) ? (params.rightTxtThree) : '{DAYS_TREATED_IN_SURGICAL_CENTER}',
                        DAYS_CONFINED_TO_BED: angular.isDefined(params.rightTxtFour) ? (params.rightTxtFour) : '{DAYS_CONFINED_TO_BED}',
                        DAYS_CONFINED_TO_HOME: angular.isDefined(params.rightTxtFive) ? (params.rightTxtFive) : '{DAYS_CONFINED_TO_HOME}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS_PRIMARY: angular.isDefined(params.leftTxtOne) ? (params.leftTxtOne) : '{NUMBER_OF_DAYS_WEEKS_MONTHS_PRIMARY}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS_SECONDARY: angular.isDefined(params.leftTxtTwo) ? (params.leftTxtTwo) : '{NUMBER_OF_DAYS_WEEKS_MONTHS_SECONDARY}',
                        DAMAGE_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? (params.amountInNumbers) : '{DAMAGE_AMOUNT_IN_NUMBERS}',
                        MEDICAL_SUPPLIES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers8) ? (params.amountInNumbers8) : '{MEDICAL_SUPPLIES_AMOUNT_IN_NUMBERS}',
                        NURSE_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers9) ? (params.amountInNumbers9) : '{NURSE_SERVICES_AMOUNT_IN_NUMBERS}',
                        CHIROPRACTORS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers10) ? (params.amountInNumbers10) : '{CHIROPRACTORS_AMOUNT_IN_NUMBERS}',
                        PHYSIOTHERAPISTS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers11) ? (params.amountInNumbers11) : '{PHYSIOTHERAPISTS_AMOUNT_IN_NUMBERS}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers12) ? (params.amountInNumbers12) : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}',
                        TOTAL_AMOUNT_LOST: angular.isDefined(params.amountInNumbers7) ? (params.amountInNumbers7) : '{TOTAL_AMOUNT_LOST}',
                        LOSS_OF_EARNINGS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers5) ? (params.amountInNumbers5) : '{LOSS_OF_EARNINGS_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        XRAY_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? (params.amountInNumbers6) : '{XRAY_EXPENSES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}',
                        DATE_ADMITTED_TO_THE_HOSPITAL: angular.isDefined(params.hospital_admitted_date) ? moment.unix(params.hospital_admitted_date).utc().format('MMMM D, YYYY') : '{DATE_ADMITTED_TO_THE_HOSPITAL}',
                        DATE_ADMITTED_FOR_TREATMENT: angular.isDefined(params.treatment_admitted_date) ? moment.unix(params.treatment_admitted_date).utc().format('MMMM D, YYYY') : '{DATE_ADMITTED_FOR_TREATMENT}'
                    }
                    break;
                case "F1118_36":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;

                    var type = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type1 = params.medicalproviderid2.contact_type == "Global" ? "Global" : "Local";
                    }

                    var medId = [];
                    var medType = [];
                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;
                    medId[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0;
                    medType[1] = type1;

                    _.forEach(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        } else {
                            medId.push(0);
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: defendantIds,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS_PRIMARY: angular.isDefined(params.leftTxtOne) ? (params.leftTxtOne) : '{NUMBER_OF_DAYS_WEEKS_MONTHS_PRIMARY}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS_SECONDARY: angular.isDefined(params.leftTxtTwo) ? (params.leftTxtTwo) : '{NUMBER_OF_DAYS_WEEKS_MONTHS_SECONDARY}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS_TERNARY: angular.isDefined(params.leftTxtThree) ? (params.leftTxtThree) : '{NUMBER_OF_DAYS_WEEKS_MONTHS_TERNARY}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS_QUATERNARY: angular.isDefined(params.leftTxtFour) ? (params.leftTxtFour) : '{NUMBER_OF_DAYS_WEEKS_MONTHS_QUATERNARY}',
                        BODY_PART_PRIMARY: angular.isDefined(params.leftTxtFive) ? (params.leftTxtFive) : '{BODY_PART_PRIMARY}',
                        BODY_PART_SECONDARY: angular.isDefined(params.rightTxtOne) ? (params.rightTxtOne) : '{BODY_PART_SECONDARY}',
                        DAYS_TREATED_IN_HOSPITAL: angular.isDefined(params.rightTxtTwo) ? (params.rightTxtTwo) : '{DAYS_TREATED_IN_HOSPITAL}',
                        DEFENDANT_FILE_NUMBER_PRIMARY: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER_PRIMARY}',
                        DEFENDANT_FILE_NUMBER_SECONDARY: angular.isDefined(params.photographNumber) ? (params.photographNumber) : '{DEFENDANT_FILE_NUMBER_SECONDARY}',
                        TOTAL_DAYS_TREATED: angular.isDefined(params.rightTxtThree) ? (params.rightTxtThree) : '{TOTAL_DAYS_TREATED}',
                        MEDICAL_SUPPLIES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers8) ? (params.amountInNumbers8) : '{MEDICAL_SUPPLIES_AMOUNT_IN_NUMBERS}',
                        NURSE_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers9) ? (params.amountInNumbers9) : '{NURSE_SERVICES_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        XRAY_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? (params.amountInNumbers6) : '{XRAY_EXPENSES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}',
                        DATE_ADMITTED_TO_THE_HOSPITAL: angular.isDefined(params.hospital_admitted_date) ? moment.unix(params.hospital_admitted_date).utc().format('MMMM D, YYYY') : '{DATE_ADMITTED_TO_THE_HOSPITAL}',
                        DATE_ADMITTED_FOR_TREATMENT: angular.isDefined(params.treatment_admitted_date) ? moment.unix(params.treatment_admitted_date).utc().format('MMMM D, YYYY') : '{DATE_ADMITTED_FOR_TREATMENT}',
                        DEFENDANT_DEMAND_DATE: angular.isDefined(params.Interrogatories_Date) ? moment.unix(params.Interrogatories_Date).utc().format('MMMM D, YYYY') : '{DEFENDANT_DEMAND_DATE}'
                    }
                    break;
                case "F1118_37":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    var medType = [];
                    var medId = [];

                    _.forEach(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        } else {
                            medId.push(0);
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        MEDICAL_SUPPLIES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers8) ? (params.amountInNumbers8) : '{MEDICAL_SUPPLIES_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers12) ? (params.amountInNumbers12) : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_38":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var medType = [];
                    var medId = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid2 && params.medicalproviderid2.contact_type) {
                        type1 = params.medicalproviderid2.contact_type == "Global" ? "Global" : "Local";
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;
                    medId[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0;
                    medType[1] = type1;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        XRAY_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? (params.amountInNumbers6) : '{XRAY_EXPENSES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}'
                    }
                    break;
                case "F1118_39":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;
                    captionIds[8] = angular.isDefined(params.captionDocumentId8) ? parseInt(params.captionDocumentId8) : 0;

                    var medType = [];
                    var medId = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid2 && params.medicalproviderid2.contact_type) {
                        type1 = params.medicalproviderid2.contact_type == "Global" ? "Global" : "Local";
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;
                    medId[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0;
                    medType[1] = type1;
                    _.forEach(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        } else {
                            medId.push(0);
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        DATE_OF_SURGERY: angular.isDefined(params.medicalTreatmentDates) ? params.medicalTreatmentDates.startEndDate1 : '{DATE_OF_SURGERY}',
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        PHYSICIANS_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers11) ? (params.amountInNumbers11) : '{PHYSICIANS_EXPENSES_AMOUNT_IN_NUMBERS}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers12) ? (params.amountInNumbers12) : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        DEFENDANT_DEMAND_DATE: angular.isDefined(params.Interrogatories_Date) ? moment.unix(params.Interrogatories_Date).utc().format('MMMM D, YYYY') : '{DEFENDANT_DEMAND_DATE}'
                    }
                    break;
                case "F1118_40":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        DATE_OF_SURGERY: angular.isDefined(params.medicalTreatmentDates) ? params.medicalTreatmentDates.startEndDate1 : '{DATE_OF_SURGERY}',
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '{ACCIDENT_TIME}',
                        DAYS_CONFINED_TO_HOSPITAL: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '{DAYS_CONFINED_TO_HOSPITAL}',
                        DAYS_TREATED_IN_SURGICAL_CENTER: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '{DAYS_TREATED_IN_SURGICAL_CENTER}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? params.locationAccident : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '{DEFENDANT_FILE_NUMBER}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? params.amountInNumbers2 : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        LOSS_OF_EARNINGS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers5) ? params.amountInNumbers5 : '{LOSS_OF_EARNINGS_AMOUNT_IN_NUMBERS}',
                        XRAY_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? params.amountInNumbers6 : '{XRAY_EXPENSES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? params.amountInNumbers3 : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_41":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    var medType = [];
                    var medId = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid2 && params.medicalproviderid2.contact_type) {
                        type1 = params.medicalproviderid2.contact_type == "Global" ? "Global" : "Local";
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;
                    medId[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0;
                    medType[1] = type1;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        DAYS_TREATED_IN_HOSPITAL: angular.isDefined(params.rightTxtTwo) ? (params.rightTxtTwo) : '{DAYS_TREATED_IN_HOSPITAL}',
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        DAYS_CONFINED_TO_BED: angular.isDefined(params.rightTxtSix) ? (params.rightTxtSix) : '{DAYS_CONFINED_TO_BED}',
                        DAYS_TREATED_IN_SURGICAL_CENTER: angular.isDefined(params.rightTxtFive) ? (params.rightTxtFive) : '{DAYS_TREATED_IN_SURGICAL_CENTER}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers12) ? (params.amountInNumbers12) : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}',
                        DATE_ADMITTED_TO_THE_HOSPITAL: angular.isDefined(params.hospital_admitted_date) ? moment.unix(params.hospital_admitted_date).utc().format('MMMM D, YYYY') : '{DATE_ADMITTED_TO_THE_HOSPITAL}',
                        DATE_ADMITTED_FOR_TREATMENT: angular.isDefined(params.treatment_admitted_date) ? moment.unix(params.treatment_admitted_date).utc().format('MMMM D, YYYY') : '{DATE_ADMITTED_FOR_TREATMENT}'
                    }
                    break;
                case "F1118_42":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: defendantIds,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers12) ? (params.amountInNumbers12) : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_43":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;
                    captionIds[8] = angular.isDefined(params.captionDocumentId8) ? parseInt(params.captionDocumentId8) : 0;

                    var medType = [];
                    var medId = [];

                    _.forEach(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        } else {
                            medId.push(0);
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        DAYS_CONFINED_TO_BED: angular.isDefined(params.rightTxtSix) ? (params.rightTxtSix) : '{DAYS_CONFINED_TO_BED}',
                        NUMBER_OF_DAYS_WEEKS_MONTHS: angular.isDefined(params.leftTxtOne) ? (params.leftTxtOne) : '{NUMBER_OF_DAYS_WEEKS_MONTHS}',
                        DAYS_CONFINED_TO_HOME: angular.isDefined(params.houseTime) ? (params.houseTime) : '{DAYS_CONFINED_TO_HOME}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        XRAY_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? (params.amountInNumbers6) : '{XRAY_EXPENSES_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_44":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    var medType = [];
                    var medId = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid2 && params.medicalproviderid2.contact_type) {
                        type1 = params.medicalproviderid2.contact_type == "Global" ? "Global" : "Local";
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;
                    medId[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0;
                    medType[1] = type1;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        DATE_OF_SURGERY: angular.isDefined(params.medicalTreatmentDates) ? params.medicalTreatmentDates.startEndDate1 : '{DATE_OF_SURGERY}',
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        DAYS_CONFINED_TO_BED: angular.isDefined(params.rightTxtSix) ? (params.rightTxtSix) : '{DAYS_CONFINED_TO_BED}',
                        DAYS_AFTER_SURGERY: angular.isDefined(params.rightTxtSeven) ? (params.rightTxtSeven) : '{DAYS_AFTER_SURGERY}',
                        SURGERY: angular.isDefined(params.entityName) ? params.entityName : '{SURGERY}',
                        DAYS_CONFINED_TO_HOME: angular.isDefined(params.houseTime) ? (params.houseTime) : '{DAYS_CONFINED_TO_HOME}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers12) ? (params.amountInNumbers12) : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;

                case "F1118_45":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;

                    var medType = [];
                    var medId = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid2 && params.medicalproviderid2.contact_type) {
                        type1 = params.medicalproviderid2.contact_type == "Global" ? "Global" : "Local";
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;
                    medId[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0;
                    medType[1] = type1;

                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: defendantIds,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        DATE_OF_SURGERY: angular.isDefined(params.medicalTreatmentDates) ? params.medicalTreatmentDates.startEndDate1 : '{DATE_OF_SURGERY}',
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        PLACE_OF_TREATMENT: angular.isDefined(params.rightTxtEight) ? (params.rightTxtEight) : '{PLACE_OF_TREATMENT}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers12) ? (params.amountInNumbers12) : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1118_46":
                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;
                    captionIds[2] = angular.isDefined(params.captionDocumentId2) ? parseInt(params.captionDocumentId2) : 0;
                    captionIds[3] = angular.isDefined(params.captionDocumentId3) ? parseInt(params.captionDocumentId3) : 0;
                    captionIds[4] = angular.isDefined(params.captionDocumentId4) ? parseInt(params.captionDocumentId4) : 0;
                    captionIds[5] = angular.isDefined(params.captionDocumentId5) ? parseInt(params.captionDocumentId5) : 0;
                    captionIds[6] = angular.isDefined(params.captionDocumentId6) ? parseInt(params.captionDocumentId6) : 0;
                    captionIds[7] = angular.isDefined(params.captionDocumentId7) ? parseInt(params.captionDocumentId7) : 0;

                    var medType = [];
                    var medId = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid2 && params.medicalproviderid2.contact_type) {
                        type1 = params.medicalproviderid2.contact_type == "Global" ? "Global" : "Local";
                    }

                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;
                    medId[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.contactid) : 0;
                    medType[1] = type1;
                    _.forEach(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (currentItem) {
                        if (currentItem.contactid != undefined) {
                            medId.push(parseInt(currentItem.contactid));
                        } else {
                            medId.push(0);
                        }
                        if (currentItem.contact_type != undefined) {
                            medType.push(currentItem.contact_type);
                        } else {
                            medType.push('Local');
                        }
                    });

                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: captionIds,
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: defendantIds,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        medicalproviderid: medId,
                        medicalprovidertype: medType,
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        DATE_OF_SURGERY: angular.isDefined(params.medicalTreatmentDates) ? params.medicalTreatmentDates.startEndDate1 : '{DATE_OF_SURGERY}',
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? (params.timeOfAccident) : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? (params.countyName) : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? (params.locationAccident) : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? (params.defendantFileNumber) : '{DEFENDANT_FILE_NUMBER}',
                        OTHER_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers12) ? (params.amountInNumbers12) : '{OTHER_EXPENSES_AMOUNT_IN_NUMBERS}',
                        PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? (params.amountInNumbers2) : '{PHYSICIAN_SERVICES_AMOUNT_IN_NUMBERS}',
                        HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers3) ? (params.amountInNumbers3) : '{HOSPITAL_EXPENSES_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1209_2":
                    var medType = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        medType = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [medType],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}'
                    }
                    break;
                case "F1118_47":
                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;
                    defendantIds[2] = angular.isDefined(params.secDefOperator) ? parseInt(params.secDefOperator) : 0;
                    defendantIds[3] = angular.isDefined(params.defendantId4) ? parseInt(params.defendantId4) : 0;

                    var captionIds = [];
                    captionIds[0] = angular.isDefined(params.captionDocumentId) ? parseInt(params.captionDocumentId) : 0;
                    captionIds[1] = angular.isDefined(params.captionDocumentId1) ? parseInt(params.captionDocumentId1) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: defendantIds,
                        captionId: captionIds,
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? params.countyName : '{LOCATION_OF_ACCIDENT_COUNTY}'

                    }
                    break;
                case "F1074_17":
                    var type = "Local";
                    if (params.physicianproviderid && params.physicianproviderid.contact_type) {
                        type = params.physicianproviderid.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        contactId: angular.isDefined(params.physicianproviderid) ? [parseInt(params.physicianproviderid.contactid)] : [0],
                        contactTypes: [type]
                    }
                    break;
                case "F1074_18":
                case "F1429_67":
                    var id1;
                    if (params.insuranceproviderid && params.insuranceproviderid.type == "Insurance Provider") {
                        id1 = params.insuranceproviderid.insuranceid ? parseInt(params.insuranceproviderid.insuranceid) : 0;
                    }
                    var type = "Local";
                    type = angular.isDefined(params.insuranceproviderid) ? params.insuranceproviderid.contact_type : "Local";
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.insuranceproviderid) ? [parseInt(params.insuranceproviderid.contactid)] : [0],
                        contactTypes: [type],
                        insuranceIds: utils.isNotEmptyVal(id1) ? [id1] : [0]
                    }
                    break;
                case "F1074_21":
                case "F1429_70":
                    var type = "Local";
                    if (params.physicianproviderid && params.physicianproviderid.contact_type) {
                        type = params.physicianproviderid.contact_type;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.physicianproviderid) ? [parseInt(params.physicianproviderid.contactid)] : [0],
                        contactTypes: [type]
                    }
                    break;
                case "F1074_23":
                    var id1;
                    if (params.insuranceproviderid && params.insuranceproviderid.type == "Insurance Provider") {
                        id1 = params.insuranceproviderid.insuranceid ? parseInt(params.insuranceproviderid.insuranceid) : 0;
                    }
                    var type = "Local";
                    type = angular.isDefined(params.insuranceproviderid) ? params.insuranceproviderid.contact_type : "Local";
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.insuranceproviderid) ? [parseInt(params.insuranceproviderid.contactid)] : [0],
                        contactTypes: [type],
                        insuranceIds: utils.isNotEmptyVal(id1) ? [id1] : [0]
                    }
                    break;
                case "F1074_24":
                    var id1;
                    if (params.insuranceproviderid && params.insuranceproviderid.type == "Insurance Provider") {
                        id1 = params.insuranceproviderid.insuranceid ? parseInt(params.insuranceproviderid.insuranceid) : 0;
                    }
                    var type = "Local";
                    type = angular.isDefined(params.insuranceproviderid) ? params.insuranceproviderid.contact_type : "Local";
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.insuranceproviderid) ? [parseInt(params.insuranceproviderid.contactid)] : [0],
                        contactTypes: [type],
                        insuranceIds: utils.isNotEmptyVal(id1) ? [id1] : [0]
                    }
                    break;
                case "F1074_25":
                    var firmId;
                    if (utils.isNotEmptyVal(vm.userInfo)) {
                        firmId = vm.userInfo[0].firm_id;
                    }
                    var id = [];
                    id[0] = angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : 0;
                    id[1] = angular.isDefined(params.attorneyid1) ? parseInt(params.attorneyid1) : 0;
                    var paraIds = []
                    paraIds[0] = angular.isDefined(params.paralegalid) ? parseInt(params.paralegalid) : 0;
                    paraIds[1] = angular.isDefined(params.secondparalegalid) ? parseInt(params.secondparalegalid) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: utils.isNotEmptyVal(id) ? id : [0],
                        paralegalId: utils.isNotEmptyVal(paraIds) ? paraIds : [0],
                        fid: utils.isNotEmptyVal(firmId) ? parseInt(firmId) : 0
                    }
                    break;
                case "F1153_1400":
                case "F1429_73":
                    var id1;
                    if (params.insuranceproviderid && params.insuranceproviderid.type == "Insurance Provider") {
                        id1 = params.insuranceproviderid.insuranceid ? parseInt(params.insuranceproviderid.insuranceid) : 0;
                    }
                    var type = "Local";
                    type = angular.isDefined(params.insuranceproviderid) ? params.insuranceproviderid.contact_type : "Local";
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.insuranceproviderid) ? [parseInt(params.insuranceproviderid.contactid)] : [0],
                        contactTypes: [type],
                        insuranceIds: utils.isNotEmptyVal(id1) ? [id1] : [0]
                    }
                    break;
                case "F1153_1401":
                case "F1429_74":
                    var firmId;
                    if (utils.isNotEmptyVal(vm.userInfo)) {
                        firmId = vm.userInfo[0].firm_id;
                    }
                    var id = [];
                    id[0] = angular.isDefined(params.leadattorneyid) ? parseInt(params.leadattorneyid) : 0;
                    id[1] = angular.isDefined(params.attorneyid1) ? parseInt(params.attorneyid1) : 0;
                    var paraIds = []
                    paraIds[0] = angular.isDefined(params.paralegalid) ? parseInt(params.paralegalid) : 0;
                    paraIds[1] = angular.isDefined(params.secondparalegalid) ? parseInt(params.secondparalegalid) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: utils.isNotEmptyVal(id) ? id : [0],
                        paralegalId: utils.isNotEmptyVal(paraIds) ? paraIds : [0],
                        fid: utils.isNotEmptyVal(firmId) ? parseInt(firmId) : 0
                    }
                    break;
                case "F1423_9":
                    var expenseIds = [];
                    _.forEach(vm.expenseIds, function (currentItem) {
                        if (currentItem.expense_id) {
                            expenseIds.push(parseInt(currentItem.expense_id));
                        } else {
                            expenseIds.push(0);
                        }
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        expenseid: utils.isNotEmptyVal(expenseIds) ? expenseIds : [0]
                    }
                    break;
                case "F1423_8":
                    var defendantBlock = [];
                    defendantBlock[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantBlock.push(parseInt(currentItem.defendantid));
                        }
                    })

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0],
                        SPOUSE_NAME: angular.isDefined(params.spouse) ? params.spouse.new_contact_name : '{SPOUSE_NAME}',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        captionId: angular.isDefined(params.captionDocumentId8) ? [parseInt(params.captionDocumentId8)] : [0],
                        ACCIDENT_TIME: angular.isDefined(params.timeOfAccident) ? params.timeOfAccident : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.countyName) ? params.countyName : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? params.locationAccident : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                        PLAINTIFF_VEHICLE_SPEED: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{PLAINTIFF_VEHICLE_SPEED}',
                        DEFENDANT_VEHICLE_SPEED: angular.isDefined(params.leftTxtThree) ? params.leftTxtThree : '{DEFENDANT_VEHICLE_SPEED}',
                        PLAINTIFF_VEHICLE_INFORMATION: angular.isDefined(params.leftTxtFour) ? params.leftTxtFour : '{PLAINTIFF_VEHICLE_INFORMATION}',
                        DEFENDENT_VEHICLE_INFORMATION: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{DEFENDENT_VEHICLE_INFORMATION}',
                        DAYS_CONFINED_TO_BED: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{DAYS_CONFINED_TO_BED}',
                        DAYS_CONFINED_TO_HOME: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{DAYS_CONFINED_TO_HOME}',
                        PERIOD_OF_DAYS_LOST: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{PERIOD_OF_DAYS_LOST}',
                        SALARY_LOST_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? (params.amountInNumbers) : '{SALARY_LOST_AMOUNT_IN_NUMBERS}',
                        DATE_EMPLOYEE_NOT_WORKED_TO: angular.isDefined(params.treatment_admitted_date) ? moment.unix(params.treatment_admitted_date).utc().format('MMMM D, YYYY') : '{DATE_EMPLOYEE_NOT_WORKED_TO}',
                    }
                    break;
                case "F1244_23":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1244_24":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1244_25":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1244_26":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;
                case "F1427_1":
                    var plaintffArray = [];
                    _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                        if (currentItem.plaintiffid != null) {
                            plaintffArray.push(parseInt(currentItem.plaintiffid));
                        } else {
                            plaintffArray.push(0);
                        }
                    })
                    var defendantArray = [];
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantArray.push(parseInt(currentItem.defendantid));
                        } else {
                            defendantArray.push(0);
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintffArray) ? plaintffArray : [0],
                        defendantId: utils.isNotEmptyVal(defendantArray) ? defendantArray : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        AFFIDAVIT_TITLE: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '{AFFIDAVIT_TITLE}'
                    }
                    break;
                case "F1427_3":
                    var plaintffArray = [];
                    _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                        if (currentItem.plaintiffid != null) {
                            plaintffArray.push(parseInt(currentItem.plaintiffid));
                        } else {
                            plaintffArray.push(0);
                        }
                    })
                    var defendantArray = [];
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantArray.push(parseInt(currentItem.defendantid));
                        } else {
                            defendantArray.push(0);
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintffArray) ? plaintffArray : [0],
                        defendantId: utils.isNotEmptyVal(defendantArray) ? defendantArray : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]
                    }
                    break;
                case "F1427_4":
                    var plaintffArray = [];
                    _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                        if (currentItem.plaintiffid != null) {
                            plaintffArray.push(parseInt(currentItem.plaintiffid));
                        } else {
                            plaintffArray.push(0);
                        }
                    })
                    var defendantArray = [];
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantArray.push(parseInt(currentItem.defendantid));
                        } else {
                            defendantArray.push(0);
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintffArray) ? plaintffArray : [0],
                        defendantId: utils.isNotEmptyVal(defendantArray) ? defendantArray : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]
                    }
                    break;
                case "F1320_1":
                    //Total expense amount + Attorney fee amount $filter('currency')(params.amountInNumbers, '', 2),
                    var expenseAmount = 0;
                    _.forEach(vm.expenseProviders, function (currentItem) {
                        if (currentItem.expense_amount != null) {
                            expenseAmount = expenseAmount + parseFloat(currentItem.expense_amount);
                        }
                    })
                    expenseAmount = utils.isNotEmptyVal(expenseAmount) ? expenseAmount : 0;

                    //Plaintiff recovery amount for selected plaintiff
                    var settlement_amount = 0;
                    _.forEach(vm.settlementInfo, function (data) {
                        if (angular.isDefined(params.plaintiff) && utils.isNotEmptyVal(params.plaintiff.plaintiffid) && data.plaintiff_id == params.plaintiff.plaintiffid) {
                            settlement_amount = parseFloat(data.negotiation_amount);
                        }
                    })
                    settlement_amount = $filter('currency')(settlement_amount, '', 2);

                    // Negotiation IDS and Insrance IDS
                    var insuranceId = [];
                    var negotiation_id = [];

                    insuranceId[0] = angular.isDefined(params.plaintiffInsuranceIds) ? parseInt(params.plaintiffInsuranceIds.insurance_id) : 0;
                    insuranceId[1] = angular.isDefined(params.plaintiffInsuranceIdsPIP) ? parseInt(params.plaintiffInsuranceIdsPIP.insurance_id) : 0;
                    insuranceId[2] = angular.isDefined(params.plaintiffInsuranceIdsUIM) ? parseInt(params.plaintiffInsuranceIdsUIM.insurance_id) : 0;

                    negotiation_id[0] = angular.isDefined(params.plaintiffInsuranceIds) ? parseInt(params.plaintiffInsuranceIds.negotiation_id) : 0;
                    negotiation_id[1] = angular.isDefined(params.plaintiffInsuranceIdsPIP) ? parseInt(params.plaintiffInsuranceIdsPIP.negotiation_id) : 0;
                    negotiation_id[2] = angular.isDefined(params.plaintiffInsuranceIdsUIM) ? parseInt(params.plaintiffInsuranceIdsUIM.negotiation_id) : 0;

                    //Total Recovery amount
                    var totalRecoveryAmount = 0;
                    var recovery_amount = 0;
                    if (angular.isDefined(params.plaintiffInsuranceIds) && utils.isNotEmptyVal(params.plaintiffInsuranceIds.settlement_calculators)) {
                        _.forEach(params.plaintiffInsuranceIds.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                totalRecoveryAmount += data.attorney_recovery;
                                recovery_amount += data.settlement_amount;
                            }
                        });
                    }

                    if (angular.isDefined(params.plaintiffInsuranceIdsPIP) && utils.isNotEmptyVal(params.plaintiffInsuranceIdsPIP.settlement_calculators)) {
                        _.forEach(params.plaintiffInsuranceIdsPIP.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                totalRecoveryAmount += data.attorney_recovery;
                                recovery_amount += data.settlement_amount;
                            }
                        });
                    }

                    if (angular.isDefined(params.plaintiffInsuranceIdsUIM) && utils.isNotEmptyVal(params.plaintiffInsuranceIdsUIM.settlement_calculators)) {
                        _.forEach(params.plaintiffInsuranceIdsUIM.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                totalRecoveryAmount += data.attorney_recovery;
                                recovery_amount += data.settlement_amount;
                            }
                        });
                    }

                    var totalExpenseAmount = totalRecoveryAmount + expenseAmount;

                    totalExpenseAmount = $filter('currency')(totalExpenseAmount, '', 2);
                    totalRecoveryAmount = $filter('currency')(totalRecoveryAmount, '', 2);
                    recovery_amount = $filter('currency')(recovery_amount, '', 2);


                    //Bill id associated to matter
                    var billidBlock = [];
                    var billType = [];
                    _.forEach(vm.medicalBillListWOProvider, function (currentItem) {
                        if (currentItem.medicalbillid != null) {
                            billidBlock.push(parseInt(currentItem.medicalbillid));
                        }

                        if (currentItem.is_global && currentItem.is_global == 0) {
                            billType.push('Local')
                        } else {
                            billType.push('Global');
                        }
                    })

                    //Expense id associated to matter
                    var expenseIds = [];
                    _.forEach(vm.expenseIds, function (currentItem) {
                        if (currentItem.expense_id) {
                            expenseIds.push(parseInt(currentItem.expense_id));
                        }
                    });

                    var LiensIds = [];
                    //Liens id associated to matter
                    _.forEach(vm.matterLiens.liens, function (data) {
                        if (data.lienid) {
                            LiensIds.push(parseInt(data.lienid));
                        }
                    });

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        negotiationId: utils.isNotEmptyVal(negotiation_id) ? negotiation_id : [0],
                        medicalBillId: utils.isNotEmptyVal(billidBlock) ? billidBlock : [0],
                        medicalBillType: utils.isNotEmptyVal(billType) ? billType : ['Local'],
                        expenseid: utils.isNotEmptyVal(expenseIds) ? expenseIds : [0],
                        lienholderids: utils.isNotEmptyVal(LiensIds) ? LiensIds : [0],
                        TOTAL_RECOVERY_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(recovery_amount) ? recovery_amount : '{TOTAL_RECOVERY_AMOUNT_IN_NUMBERS}',
                        ATTORNEY_FEE_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(totalRecoveryAmount) ? totalRecoveryAmount : '{ATTORNEY_FEE_AMOUNT_IN_NUMBERS}',
                        TOTAL_ATTORNEY_FEES_AND_EXPENSES: utils.isNotEmptyVal(totalExpenseAmount) ? totalExpenseAmount : '{TOTAL_ATTORNEY_FEES_AND_EXPENSES}',
                        PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(settlement_amount) ? settlement_amount : '{PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1429_27":
                    var plaintiffIdBlock = [];
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffIdBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffIdBlock) ? plaintiffIdBlock : [0]
                    }
                    break;
                case "F1427_5":
                    var plaintiffIdBlock = [];
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffIdBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    var defendantArray = [];
                    defendantArray[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantArray.push(parseInt(currentItem.defendantid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffIdBlock) ? plaintiffIdBlock : [0],
                        defendantId: utils.isNotEmptyVal(defendantArray) ? defendantArray : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        FACTS: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{FACTS}',
                        DEFENDANT_RESIDENCE_COUNTY: angular.isDefined(params.countyName) ? params.countyName : '{DEFENDANT_RESIDENCE_COUNTY}',
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}'
                    }
                    break;
                case "F1427_6":
                    var plaintiffIdBlock = [];
                    plaintiffIdBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffIdBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    var defendantArray = [];
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantArray.push(parseInt(currentItem.defendantid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffIdBlock) ? plaintiffIdBlock : [0],
                        defendantId: utils.isNotEmptyVal(defendantArray) ? defendantArray : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        FACTS: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{FACTS}',
                        DANGEROUS_CONDITION: angular.isDefined(params.leftTxtThree) ? params.leftTxtThree : '{DANGEROUS_CONDITION}',
                        DEFENDANT_BUSINESS_COUNTY: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{DEFENDANT_BUSINESS_COUNTY}',
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}'
                    }
                    break;
                case "F1427_7":
                    var plaintiffIdBlock = [];
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffIdBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    var defendantArray = [];
                    defendantArray[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantArray.push(parseInt(currentItem.defendantid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffIdBlock) ? plaintiffIdBlock : [0],
                        defendantId: utils.isNotEmptyVal(defendantArray) ? defendantArray : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.accidentCounty) ? params.accidentCounty : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        DEFENDANT_RESIDENCE_COUNTY: angular.isDefined(params.countyName) ? params.countyName : '{DEFENDANT_RESIDENCE_COUNTY}',
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.plantiffResidenceCounty) ? params.plantiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}'
                    }
                    break;
                case "F1427_11":
                    var plaintiffIdBlock = [];
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffIdBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffIdBlock) ? plaintiffIdBlock : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0]
                    }
                    break;
                case "F1427_12":
                    var plaintiffIdBlock = [];
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffIdBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? (params.amountInNumbers) : '{AMOUNT_IN_NUMBERS}',
                        AMOUNT_IN_WORDS: angular.isDefined(params.amountInWords) ? (params.amountInWords) : '{AMOUNT_IN_WORDS}',
                        plaintiffId: utils.isNotEmptyVal(plaintiffIdBlock) ? plaintiffIdBlock : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}'
                    }
                    break;
                case "F1427_20":
                    var medType = [];
                    var medId = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid1 && params.medicalproviderid1.contact_type) {
                        type1 = params.medicalproviderid1.contact_type == "Global" ? "Global" : "Local";
                    }
                    medId[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medType[0] = type;
                    medId[1] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.contactid) : 0;
                    medType[1] = type1;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        medicalproviderid: utils.isNotEmptyVal(medId) ? medId : [0],
                        medicalprovidertype: utils.isNotEmptyVal(medType) ? medType : ["Local"],
                        POLICE_REPORT_NUMBER: angular.isDefined(params.leftTxtFour) ? params.leftTxtFour : '{POLICE_REPORT_NUMBER}',
                        APPRAISAL_FROM: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{APPRAISAL_FROM}',
                        AUTOBODY_REPAIR_ESTIMATE_DATE: angular.isDefined(params.orderDate) ? moment.unix(params.orderDate).utc().format('MMMM D, YYYY') : '{AUTOBODY_REPAIR_ESTIMATE_DATE}',
                        APPRAISAL_DATE: angular.isDefined(params.medicalRecordDate) ? moment.unix(params.medicalRecordDate).utc().format('MMMM D, YYYY') : '{APPRAISAL_DATE}'
                    }
                    break;
                case "F1238_8":
                    var plaintiffBlock = [];
                    var defendantBlock = [];
                    plaintiffBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantBlock.push(parseInt(currentItem.defendantid));
                        }
                    })
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0],
                        insuranceIds: angular.isDefined(params.defendantInsuranceId) ? [parseInt(params.defendantInsuranceId.insuranceid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        YES_OR_NO: angular.isDefined(params.yesNoOpt) ? params.yesNoOpt.id : '{YES_OR_NO}',
                        REFERRING_ATTORNEY_RETAINER_NUMBER: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{REFERRING_ATTORNEY_RETAINER_NUMBER}',
                        JUDGE_FULLNAME: angular.isDefined(params.JudgeName) ? params.JudgeName : '{JUDGE_FULLNAME}',
                        JUDICIAL_DISTRICT_COURT: angular.isDefined(params.schoolDistrict) ? params.schoolDistrict : '{JUDICIAL_DISTRICT_COURT}',
                        COURT_DEPARTMENT_NAME: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{COURT_DEPARTMENT_NAME}',
                        REFERRING_ATTORNEY_DIST: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{REFERRING_ATTORNEY_DIST}',
                        REFERRING_ATTORNEY_DEPT: angular.isDefined(params.leftTxtThree) ? params.leftTxtThree : '{REFERRING_ATTORNEY_DEPT}',
                        REFERRING_ATTORNEY_COUNTY: angular.isDefined(params.leftTxtFour) ? params.leftTxtFour : '{REFERRING_ATTORNEY_COUNTY}',
                        ATTORNEY_LAW_FIRM_ADDRESS: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{ATTORNEY_LAW_FIRM_ADDRESS}',
                        ATTORNEY_LAW_FIRM_CITY: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{ATTORNEY_LAW_FIRM_CITY}',
                        DATE_OF_ORDER: angular.isDefined(params.orderDate) ? moment.unix(params.orderDate).utc().format('MMMM D, YYYY') : '{DATE_OF_ORDER}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DATE_SUMMONS_SERVED}',
                        DATE_STIPULATION_OF_DISCONTINUANCE: angular.isDefined(params.bondAmountDate) ? moment.unix(params.bondAmountDate).utc().format('MMMM D, YYYY') : '{DATE_STIPULATION_OF_DISCONTINUANCE}',
                        DATE_STIPULATION_OF_DISCONTINUANCE_FILED_WITH_THE_COURT_CLERK: angular.isDefined(params.juryChargeDate) ? moment.unix(params.juryChargeDate).utc().format('MMMM D, YYYY') : '{DATE_STIPULATION_OF_DISCONTINUANCE_FILED_WITH_THE_COURT_CLERK}',
                        DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT: angular.isDefined(params.bill_Date) ? moment.unix(params.bill_Date).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT}',
                        DATE_OF_PAYMENT_CLIENT: angular.isDefined(params.medicalRecordDate) ? moment.unix(params.medicalRecordDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CLIENT}',
                        DATE_COPY_FORWARDED: angular.isDefined(params.documentDate) ? moment.unix(params.documentDate).utc().format('MMMM D, YYYY') : '{DATE_COPY_FORWARDED}',
                        SETTLEMENT_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(params.amountInNumbers) ? params.amountInNumbers : '{SETTLEMENT_AMOUNT_IN_NUMBERS}',
                        NET_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(params.amountInNumbers2) ? params.amountInNumbers2 : '{NET_AMOUNT_IN_NUMBERS}',
                        LEGAL_FEE: utils.isNotEmptyVal(params.amountInNumbers3) ? params.amountInNumbers3 : '{LEGAL_FEE}',
                        EXPENSE_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(params.amountInNumbers4) ? params.amountInNumbers4 : '{EXPENSE_AMOUNT_IN_NUMBERS}',
                        AMOUNT_RECEIVED_BY_PARTICIPATING_ATTORNEY_IN_NUMBERS: utils.isNotEmptyVal(params.amountInNumbers5) ? params.amountInNumbers5 : '{AMOUNT_RECEIVED_BY_PARTICIPATING_ATTORNEY_IN_NUMBERS}'
                    }
                    break;
                case "F1427_42":
                    var medProviderIds = [];
                    medProviderIds[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medProviderIds[1] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.contactid) : 0;

                    var medProviderTypes = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid1 && params.medicalproviderid1.contact_type) {
                        type1 = params.medicalproviderid1.contact_type == "Global" ? "Global" : "Local";
                    }
                    medProviderTypes[0] = type;
                    medProviderTypes[1] = type1;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: utils.isNotEmptyVal(medProviderIds) ? medProviderIds : [0],
                        medicalprovidertype: utils.isNotEmptyVal(medProviderTypes) ? medProviderTypes : ["Local"],
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        CAD_REPORT_NUMBER: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{CAD_REPORT_NUMBER}',
                        POLICE_OFFICER_NAME_PRIMARY: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{POLICE_OFFICER_NAME_PRIMARY}',
                        POLICE_OFFICER_NAME_SECONDARY: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{POLICE_OFFICER_NAME_SECONDARY}',
                        POLICE_OFFICER_NUMBER_PRIMARY: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '{POLICE_OFFICER_NUMBER_PRIMARY}',
                        POLICE_OFFICER_NUMBER_SECONDARY: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '{POLICE_OFFICER_NUMBER_SECONDARY}',
                        MEDICAL_PROVIDER_TYPE: angular.isDefined(params.rightTxtSix) ? params.rightTxtSix : '{MEDICAL_PROVIDER_TYPE}',
                        POLICE_DEPARTMENT: angular.isDefined(params.rightTxtSeven) ? params.rightTxtSeven : '{POLICE_DEPARTMENT}',
                        POLICE_DEPARTMENT_ADDRESS: angular.isDefined(params.rightTxtEight) ? params.rightTxtEight : '{POLICE_DEPARTMENT_ADDRESS}',
                        POLICE_DEPARTMENT_CONTACT_NUMBER: angular.isDefined(params.guardianType) ? params.guardianType : '{POLICE_DEPARTMENT_CONTACT_NUMBER}'
                    }
                    break;
                case "F1427_43":
                    var plaintiffBlock = [];
                    var defendantBlock = [];
                    plaintiffBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    _.forEach(vm.defendants_dropdown, function (currentItem) {
                        if (currentItem.defendantid != null) {
                            defendantBlock.push(parseInt(currentItem.defendantid));
                        }
                    })
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    var medProviderIds = [];
                    medProviderIds[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    medProviderIds[1] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.contactid) : 0;

                    var medProviderTypes = [];
                    var type = "Local";
                    var type1 = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        type = params.medicalproviderid.contact_type == "Global" ? "Global" : "Local";
                    }
                    if (params.medicalproviderid1 && params.medicalproviderid1.contact_type) {
                        type1 = params.medicalproviderid1.contact_type == "Global" ? "Global" : "Local";
                    }
                    medProviderTypes[0] = type;
                    medProviderTypes[1] = type1;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        medicalproviderid: utils.isNotEmptyVal(medProviderIds) ? medProviderIds : [0],
                        medicalprovidertype: utils.isNotEmptyVal(medProviderTypes) ? medProviderTypes : ["Local"],
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        CAD_REPORT_NUMBER: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{CAD_REPORT_NUMBER}',
                        POLICE_OFFICER_NAME_PRIMARY: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{POLICE_OFFICER_NAME_PRIMARY}',
                        POLICE_OFFICER_NAME_SECONDARY: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{POLICE_OFFICER_NAME_SECONDARY}',
                        POLICE_OFFICER_NUMBER_PRIMARY: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '{POLICE_OFFICER_NUMBER_PRIMARY}',
                        POLICE_OFFICER_NUMBER_SECONDARY: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '{POLICE_OFFICER_NUMBER_SECONDARY}',
                        MEDICAL_PROVIDER_TYPE: angular.isDefined(params.rightTxtSix) ? params.rightTxtSix : '{MEDICAL_PROVIDER_TYPE}',
                        POLICE_DEPARTMENT: angular.isDefined(params.rightTxtSeven) ? params.rightTxtSeven : '{POLICE_DEPARTMENT}',
                        POLICE_DEPARTMENT_ADDRESS: angular.isDefined(params.rightTxtEight) ? params.rightTxtEight : '{POLICE_DEPARTMENT_ADDRESS}',
                        POLICE_DEPARTMENT_CONTACT_NUMBER: angular.isDefined(params.guardianType) ? params.guardianType : '{POLICE_DEPARTMENT_CONTACT_NUMBER}',
                        TIER: angular.isDefined(params.plantiffGuardianCounty) ? params.plantiffGuardianCounty : '{TIER}',
                        JUDGE_FULLNAME: angular.isDefined(params.incidentDescription) ? params.incidentDescription : '{JUDGE_FULLNAME}',
                        TYPE_OF_ACCIDENT: angular.isDefined(params.otherDriverName) ? params.otherDriverName : '{TYPE_OF_ACCIDENT}',
                        SETTLEMENT_CONFERENCE_MONTH: angular.isDefined(params.driverLicenseNumber) ? params.driverLicenseNumber : '{SETTLEMENT_CONFERENCE_MONTH}',
                        SETTLEMENT_CONFERENCE_OR_PRIVATE_MEDIATION_DATE: angular.isDefined(params.documentDate) ? moment.unix(params.documentDate).utc().format('MMMM D, YYYY') : '{SETTLEMENT_CONFERENCE_OR_PRIVATE_MEDIATION_DATE}'
                    }
                    break;
                case "F1427_48":
                    var plaintiffid = [];
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];
                    var defendantid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    if (utils.isNotEmptyVal(vm.plaintiff_dropdown)) {
                        _.forEach(vm.plaintiff_dropdown, function (data) {
                            if (angular.isDefined(data.plaintiffid)) {
                                plaintiffid.push(parseInt(data.plaintiffid));
                            }
                        })
                    }
                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantid.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffid) ? plaintiffid : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(defendantid) ? defendantid : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        JUDGE_FULLNAME: angular.isDefined(params.incidentDescription) ? params.incidentDescription : '{JUDGE_FULLNAME}',
                        PERSON_TO_BE_EXAMINED: angular.isDefined(params.summonNumber) ? params.summonNumber : '{PERSON_TO_BE_EXAMINED}'
                    }
                    break;
                case "F1427_49":
                    var insuranceBlock = [];
                    insuranceBlock[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;

                    _.forEach(vm.insuranceAdjusorInsured, function (data) {
                        if (angular.isDefined(data.insuranceid)) {
                            insuranceBlock.push(parseInt(data.insuranceid));
                        }
                    })

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        insuranceIds: utils.isNotEmptyVal(insuranceBlock) ? insuranceBlock : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        VEHICLE_INFORMATION: angular.isDefined(params.defVehicleType) ? params.defVehicleType : '{VEHICLE_INFORMATION}',
                        PLAINTIFF_VEHICLE_OWNERS_NAME: angular.isDefined(params.signerName) ? params.signerName : '{PLAINTIFF_VEHICLE_OWNERS_NAME}',
                        POLICY_LIMIT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? params.amountInNumbers6 : '{POLICY_LIMIT_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1427_55":
                case "F1427_56":
                case "F1427_57":
                case "F1427_61":
                    var insuranceObj;
                    if (params.plaintiffInsuranceIds && params.plaintiffInsuranceIds.insurance_id) {
                        var id = params.plaintiffInsuranceIds.insurance_id;
                        insuranceObj = insuranceContactFetch(id);
                    }
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(insuranceObj) && utils.isNotEmptyVal(insuranceObj.insuranceprovider_address.faxnumber)) ? insuranceObj.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(insuranceObj) && utils.isNotEmptyVal(insuranceObj.insuranceprovider_address.email)) ? insuranceObj.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        insuranceIds: angular.isDefined(params.plaintiffInsuranceIds) ? [params.plaintiffInsuranceIds.insurance_id] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        negotiationId: angular.isDefined(params.plaintiffInsuranceIds) ? [params.plaintiffInsuranceIds.negotiation_id] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.title) ? params.title : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"

                    }
                    break;
                case "F1427_58":
                case "F1427_59":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.title) ? params.title : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_60":
                    var type1 = "Local";
                    var type2 = "Local";
                    var id1, id2;
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type1 = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.contact_type != undefined) {
                            type2 = (params.medicalproviderid1.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var ids = [];
                    ids[0] = angular.isDefined(params.medicalproviderid) ? parseInt(params.medicalproviderid.contactid) : 0;
                    ids[1] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.contactid) : 0;

                    var insuranceObj;
                    if (params.plaintiffInsuranceIds && params.plaintiffInsuranceIds.insurance_id) {
                        var id = params.plaintiffInsuranceIds.insurance_id;
                        var insuranceObj = insuranceContactFetch(id);
                    }
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(insuranceObj) && utils.isNotEmptyVal(insuranceObj.insuranceprovider_address.faxnumber)) ? insuranceObj.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(insuranceObj) && utils.isNotEmptyVal(insuranceObj.insuranceprovider_address.email)) ? insuranceObj.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        medicalproviderid: utils.isNotEmptyVal(ids) ? ids : [0],
                        medicalprovidertype: [type1, type2],
                        insuranceIds: angular.isDefined(params.plaintiffInsuranceIds) ? [params.plaintiffInsuranceIds.insurance_id] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        negotiationId: angular.isDefined(params.plaintiffInsuranceIds) ? [params.plaintiffInsuranceIds.negotiation_id] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.title) ? params.title : '{ASSIGNED_ATTORNEYS_TITLE}',
                        UNINSURED_CITED_FOR: angular.isDefined(params.rightTxttwo) ? params.rightTxttwo : '{UNINSURED_CITED_FOR}',
                        DISBURSEMENT_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(params.amountInNumbers6) ? $filter('currency')(params.amountInNumbers6, '', 2) : '{DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE: angular.isDefined(params.expertDate) ? moment.unix(params.expertDate).utc().format('MMMM D, YYYY') : '{TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;
                case "F1320_17":
                    var billId, type;
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: utils.isNotEmptyVal(type) ? type : ['Local'],
                        medicalBillId: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.medicalbillid)] : [0],
                        medicalBillType: ['Local']
                    }
                    break;
                case "F1320_18":
                    //Bill id associated to matter
                    var billidBlock = [];
                    var billType = [];
                    _.forEach(vm.medicalBillListWOProvider, function (currentItem) {
                        if (currentItem.medicalbillid != null) {
                            billidBlock.push(parseInt(currentItem.medicalbillid));
                        }

                        if (currentItem.is_global && currentItem.is_global == 0) {
                            billType.push('Local')
                        } else {
                            billType.push('Global');
                        }
                    })

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalBillId: utils.isNotEmptyVal(billidBlock) ? billidBlock : [0],
                        medicalBillType: utils.isNotEmptyVal(billType) ? billType : ['Local']
                    }
                    break;
                case "F1320_25":
                    //Bill id associated to matter
                    var billidBlock = [];
                    var billType = [];
                    _.forEach(vm.medicalBillListWOProvider, function (currentItem) {
                        if (currentItem.medicalbillid != null) {
                            billidBlock.push(parseInt(currentItem.medicalbillid));
                        }

                        if (currentItem.is_global && currentItem.is_global == 0) {
                            billType.push('Local')
                        } else {
                            billType.push('Global');
                        }
                    })

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalBillId: utils.isNotEmptyVal(billidBlock) ? billidBlock : [0],
                        medicalBillType: utils.isNotEmptyVal(billType) ? billType : ['Local']
                    }
                    break;
                case "F1447_13":
                    var defendantAttorneyid = [];
                    var defendantAttorneytypes = [];
                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId8) ? [parseInt(params.captionDocumentId8)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : ['']
                    }
                    break;
                case "F1447_3":

                    var insuranceId = [];

                    insuranceId[0] = angular.isDefined(params.plaintiffInsuranceIds) ? parseInt(params.plaintiffInsuranceIds.insurance_id) : 0;

                    //Total Recovery amount
                    var totalRecoveryAmount = 0;
                    if (angular.isDefined(params.plaintiffInsuranceIds) && utils.isNotEmptyVal(params.plaintiffInsuranceIds.settlement_calculators)) {
                        _.forEach(params.plaintiffInsuranceIds.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                totalRecoveryAmount += data.attorney_recovery;
                            }
                        });
                    }
                    totalRecoveryAmount = $filter('currency')(totalRecoveryAmount, '', 2);
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        ATTORNEY_FEE_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(totalRecoveryAmount) ? totalRecoveryAmount : '{ATTORNEY_FEE_AMOUNT_IN_NUMBERS}',
                        CHECK_AMOUNT: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{CHECK_AMOUNT}'
                    }
                    break;
                case "F1447_14":
                    var type;
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.providerid.contact_type != undefined) {
                            type = (params.medicalproviderid.providerid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var bill_id;
                    if (params.medicalproviderid && params.medicalproviderid.hasOwnProperty('medicalbillid')) {
                        bill_id = parseInt(params.medicalproviderid.medicalbillid)
                    } else {
                        bill_id = 0;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: utils.isNotEmptyVal(type) ? type : ['Local'],
                        medicalBillId: utils.isNotEmptyVal(bill_id) ? [bill_id] : [0],
                        medicalBillType: ['Local'],
                        OFFER_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers7) ? params.amountInNumbers7 : '{OFFER_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1447_19":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }

                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: utils.isNotEmptyVal(defendantIds) ? defendantIds : [0],
                        DEFENDANT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '{DEFENDANT_AMOUNT_IN_NUMBERS}',
                        DEFENDANT_AMOUNT_IN_NUMBERS2: angular.isDefined(params.amountInNumbers3) ? $filter('currency')(params.amountInNumbers3, '', 2) : '{DEFENDANT_AMOUNT_IN_NUMBERS2}',
                        TOTAL_AMOUNT_OF_JOINT_PROPOSAL_IN_WORDS: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{TOTAL_AMOUNT_OF_JOINT_PROPOSAL_IN_WORDS}',
                        TOTAL_AMOUNT_OF_JOINT_PROPOSAL_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? $filter('currency')(params.amountInNumbers2, '', 2) : '{TOTAL_AMOUNT_OF_JOINT_PROPOSAL_IN_NUMBERS}'
                    }
                    break;
                case "F1447_20":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        SUMMONS_AND_COMPLAINT_FILED_DATE: angular.isDefined(params.bondAmountDate) ? moment.unix(params.bondAmountDate).utc().format('MMMM D, YYYY') : '{SUMMONS_AND_COMPLAINT_FILED_DATE}',
                        TRIAL_DATE: angular.isDefined(params.trialDate) ? moment.unix(params.trialDate).utc().format('Do') + " DAY OF " + moment.unix(params.trialDate).utc().format('MMMM') + " " + moment.unix(params.trialDate).utc().format('YYYY') : '{TRIAL_DATE}'
                    }
                    break;
                case "F1447_21":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        REASON_FOR_HEARING: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '{REASON_FOR_HEARING}',
                        JUDGE_FULLNAME: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{JUDGE_FULLNAME}',
                        ROOM_NUMBER: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{ROOM_NUMBER}'
                    }
                    break;
                case "F1447_22":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        MEDIATOR_NAME: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '{MEDIATOR_NAME}',
                        MEDIATOR_CONTACT_NUMBER: angular.isDefined(params.rightTxtSix) ? params.rightTxtSix : '{MEDIATOR_CONTACT_NUMBER}'
                    }
                    break;
                case "F1447_23":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1447_24":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    defendantAttorneyid[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;
                    defendantAttorneytypes[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : '';

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }

                    var defendantIds = [];
                    defendantIds[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;
                    defendantIds[1] = angular.isDefined(params.secDefOwner) ? parseInt(params.secDefOwner) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: utils.isNotEmptyVal(defendantIds) ? defendantIds : [0],
                        DATE_OF_PFS: angular.isDefined(params.Interrogatories_Date) ? moment.unix(params.Interrogatories_Date).utc().format('MMMM D, YYYY') : '{DATE_OF_PFS}'
                    }
                    break;
                case "F1447_25":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    defendantAttorneyid[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;
                    defendantAttorneytypes[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : '';

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        PROPOSAL_FOR_SETTLEMENT_SERVED_DATE: angular.isDefined(params.dateOfLetters) ? moment.unix(params.dateOfLetters).utc().format('MMMM D, YYYY') : '{PROPOSAL_FOR_SETTLEMENT_SERVED_DATE}'
                    }
                    break;
                case "F1447_26":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        ADA_LANGUAGE: angular.isDefined(params.rightTxtSeven) ? params.rightTxtSeven : '{ADA_LANGUAGE}',
                        COURT_REPORTER_NAME: angular.isDefined(params.rightTxtEight) ? params.rightTxtEight : '{COURT_REPORTER_NAME}'
                    }
                    break;
                case "F1447_28":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0]
                    }
                    break;
                case "F1447_29":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        PURPOSE_OF_DOCUMENT: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{PURPOSE_OF_DOCUMENT}'
                    }
                    break;
                case "F1447_30":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];

                    defendantAttorneyid[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;
                    defendantAttorneytypes[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : '';

                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        VERIFIED_ANSWER_DATE: angular.isDefined(params.bill_Date) ? moment.unix(params.bill_Date).utc().format('Do') + " DAY OF " + moment.unix(params.bill_Date).utc().format('MMMM') + " " + moment.unix(params.bill_Date).utc().format('YYYY') : '{VERIFIED_ANSWER_DATE}'
                    }
                    break;
                case "F1447_33":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];
                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        DOCUMENT_NAME: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{DOCUMENT_NAME}'
                    }
                    break;
                case "F1447_34":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];
                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        AMOUNT_IN_WORDS: angular.isDefined(params.leftTxtThree) ? params.leftTxtThree : '{AMOUNT_IN_WORDS}',
                        AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? $filter('currency')(params.amountInNumbers4, '', 2) : '{AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1447_35":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];
                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        ANSWER_AND_AFFIRMATIVE_DEFENSES_FILED_DATE: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM D, YYYY') : '{ANSWER_AND_AFFIRMATIVE_DEFENSES_FILED_DATE}'
                    }
                    break;
                case "F1447_36":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];
                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        LIST_OF_PARTIES: angular.isDefined(params.leftTxtFour) ? params.leftTxtFour : '{LIST_OF_PARTIES}',
                        NOTICE_OF_PRODUCTION_FILED_DATE: angular.isDefined(params.noticeDate) ? moment.unix(params.noticeDate).utc().format('MMMM D, YYYY') : '{NOTICE_OF_PRODUCTION_FILED_DATE}'
                    }
                    break;
                case "F1447_38":
                    var defendantAttorneytypes = [];
                    var defendantAttorneyid = [];
                    if (utils.isNotEmptyVal(vm.defendantAttorneyids)) {
                        _.forEach(vm.defendantAttorneyids, function (item) {
                            defendantAttorneyid.push(parseInt(item.contactid));
                            defendantAttorneytypes.push(item.contact_type);
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(defendantAttorneyid) ? defendantAttorneyid : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : ['']
                    }
                    break;
                case "F1447_41":
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.onlyInsuranceId2) ? parseInt(params.onlyInsuranceId2.insuranceid) : 0;
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: insuranceId
                    }
                    break;
                case "F1447_49":
                case "F1447_50":
                    var type;
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.providerid.contact_type != undefined) {
                            type = (params.medicalproviderid.providerid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var bill_id;
                    if (params.medicalproviderid && params.medicalproviderid.hasOwnProperty('medicalbillid')) {
                        bill_id = parseInt(params.medicalproviderid.medicalbillid)
                    } else {
                        bill_id = 0;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: utils.isNotEmptyVal(type) ? type : ['Local'],
                        medicalBillId: utils.isNotEmptyVal(bill_id) ? [bill_id] : [0],
                        medicalBillType: ['Local'],
                        FINAL_JUDGMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers2) ? $filter('currency')(params.amountInNumbers2, '', 2) : '{FINAL_JUDGMENT_AMOUNT_IN_NUMBERS}',
                        PFS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '{PFS_AMOUNT_IN_NUMBERS}',
                        AMOUNT_OF_RECOMMENDED_INSURANCE: angular.isDefined(params.amountInNumbers3) ? $filter('currency')(params.amountInNumbers3, '', 2) : '{AMOUNT_OF_RECOMMENDED_INSURANCE}',
                        DEADLINE_DATE: angular.isDefined(params.denial_Date) ? moment.unix(params.denial_Date).utc().format('MMMM D, YYYY') : '{DEADLINE_DATE}',
                        DATE_OF_PFS: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PFS}'
                    }
                    break;
                case "F1447_55":
                    var type;
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.providerid.contact_type != undefined) {
                            type = (params.medicalproviderid.providerid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var bill_id;
                    if (params.medicalproviderid && params.medicalproviderid.hasOwnProperty('medicalbillid')) {
                        bill_id = parseInt(params.medicalproviderid.medicalbillid)
                    } else {
                        bill_id = 0;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: utils.isNotEmptyVal(type) ? type : ['Local'],
                        medicalBillId: utils.isNotEmptyVal(bill_id) ? [bill_id] : [0],
                        medicalBillType: ['Local'],
                        PIP_PAID_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? $filter('currency')(params.amountInNumbers4, '', 2) : '{PIP_PAID_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1447_52":
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.onlyInsuranceId1) ? parseInt(params.onlyInsuranceId1.insuranceid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        DUE_DATE: angular.isDefined(params.custom_date) ? moment.unix(params.custom_date).utc().format('MMMM D, YYYY') : '{DUE_DATE}',
                        SETTLEMENT_OFFER_AMOUNT_IN_NUMBERS: angular.isDefined(params.plaintiffInsuranceIds) ? $filter('currency')(params.plaintiffInsuranceIds.offered_amount, '', 2) : '{SETTLEMENT_OFFER_AMOUNT_IN_NUMBERS}'
                    }
                    break;
                case "F1447_48":
                    var LiensIds = [];
                    //Liens id associated to matter
                    _.forEach(vm.matterLiens.liens, function (data) {
                        if (data.lienid) {
                            LiensIds.push(parseInt(data.lienid));
                        }
                    });

                    //Expense id associated to matter
                    var expenseIds = [];
                    _.forEach(vm.expenseIds, function (currentItem) {
                        if (currentItem.expense_id) {
                            expenseIds.push(parseInt(currentItem.expense_id));
                        }
                    });

                    var attorneyFee = 0;
                    if (utils.isNotEmptyVal(params.negotiationIds) && utils.isNotEmptyVal(params.negotiationIds.settlement_calculators)) {
                        _.forEach(params.negotiationIds.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                attorneyFee = data.attorney_recovery;
                            } else {
                                attorneyFee = 0;
                            }
                        })
                    }

                    var plaintffRecovery = 0;
                    if (utils.isNotEmptyVal(vm.plaintiffInsuranceProviders)) {
                        _.forEach(vm.plaintiffInsuranceProviders, function (data) {
                            if (utils.isNotEmptyVal(data.settlement_calculators)) {
                                _.forEach(data.settlement_calculators, function (data1) {
                                    if (data1.is_final_settlement == 1) {
                                        plaintffRecovery += data1.client_recovery;
                                    }
                                })
                            }
                        })
                    }

                    var billids = [];
                    var billType = [];
                    _.forEach(vm.medicalBillListWOProvider, function (data) {
                        if (utils.isNotEmptyVal(data.medicalbillid)) {
                            billids.push(parseInt(data.medicalbillid));
                            billType.push('Local');
                        }
                    })

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        lienholderids: utils.isNotEmptyVal(LiensIds) ? LiensIds : [0],
                        medicalBillId: utils.isNotEmptyVal(billids) ? billids : [0],
                        medicalBillType: utils.isNotEmptyVal(billType) ? billType : ['Local'],
                        expenseid: utils.isNotEmptyVal(expenseIds) ? expenseIds : [0],
                        LESS_LITIGATION_LOAN: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{LESS_LITIGATION_LOAN}',
                        FINAL_DISBURSEMENT: angular.isDefined(params.stipulationDate) ? moment.unix(params.stipulationDate).utc().format('MMMM D, YYYY') : '{FINAL_DISBURSEMENT}',
                        ATTORNEY_FEE_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(attorneyFee) ? $filter('currency')(attorneyFee, '', 2) : 0,
                        PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(plaintffRecovery) ? $filter('currency')(plaintffRecovery, '', 2) : 0,
                        FINAL_DISBURSEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? $filter('currency')(params.amountInNumbers6, '', 2) : '{FINAL_DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        LESS_LITIGATION_LOAN_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers5) ? $filter('currency')(params.amountInNumbers5, '', 2) : '{LESS_LITIGATION_LOAN_AMOUNT_IN_NUMBERS}'

                    }
                    break;
                case "F1447_56":
                    var LiensIds = [];
                    //Liens id associated to matter
                    _.forEach(vm.matterLiens.liens, function (data) {
                        if (data.lienid) {
                            LiensIds.push(parseInt(data.lienid));
                        }
                    });

                    //Expense id associated to matter
                    var expenseIds = [];
                    _.forEach(vm.expenseIds, function (currentItem) {
                        if (currentItem.expense_id) {
                            expenseIds.push(parseInt(currentItem.expense_id));
                        }
                    });

                    var attorneyFee = 0;
                    if (utils.isNotEmptyVal(params.negotiationIds) && utils.isNotEmptyVal(params.negotiationIds.settlement_calculators)) {
                        _.forEach(params.negotiationIds.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                attorneyFee = data.attorney_recovery;
                            } else {
                                attorneyFee = 0;
                            }
                        })
                    }

                    var plaintffRecovery = 0;
                    if (utils.isNotEmptyVal(vm.plaintiffInsuranceProviders)) {
                        _.forEach(vm.plaintiffInsuranceProviders, function (data) {
                            if (utils.isNotEmptyVal(data.settlement_calculators)) {
                                _.forEach(data.settlement_calculators, function (data1) {
                                    if (data1.is_final_settlement == 1) {
                                        plaintffRecovery += data1.client_recovery;
                                    }
                                })
                            }
                        })
                    }

                    var billids = [];
                    var billType = [];
                    _.forEach(vm.medicalBillListWOProvider, function (data) {
                        if (utils.isNotEmptyVal(data.medicalbillid)) {
                            billids.push(parseInt(data.medicalbillid));
                            billType.push('Local');
                        }
                    })

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        lienholderids: utils.isNotEmptyVal(LiensIds) ? LiensIds : [0],
                        medicalBillId: utils.isNotEmptyVal(billids) ? billids : [0],
                        medicalBillType: utils.isNotEmptyVal(billType) ? billType : ['Local'],
                        expenseid: utils.isNotEmptyVal(expenseIds) ? expenseIds : [0],
                        FINAL_DISBURSEMENT: angular.isDefined(params.stipulationDate) ? moment.unix(params.stipulationDate).utc().format('MMMM D, YYYY') : '{FINAL_DISBURSEMENT}',
                        ATTORNEY_FEE_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(attorneyFee) ? $filter('currency')(attorneyFee, '', 2) : 0,
                        PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(plaintffRecovery) ? $filter('currency')(plaintffRecovery, '', 2) : 0,
                        FINAL_DISBURSEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers6) ? $filter('currency')(params.amountInNumbers6, '', 2) : '{FINAL_DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        LESS_LITIGATION_LOAN: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{LESS_LITIGATION_LOAN}',
                        LESS_LITIGATION_LOAN_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers5) ? $filter('currency')(params.amountInNumbers5, '', 2) : '{LESS_LITIGATION_LOAN_AMOUNT_IN_NUMBERS}',
                        INTERIM_DISBURSEMENT_TO_CLIENT_WITHHELD_FUNDS_PENDING_REDUCTIONS: angular.isDefined(params.paymentByClientDate) ? moment.unix(params.paymentByClientDate).utc().format('MMMM D, YYYY') : '{INTERIM_DISBURSEMENT_TO_CLIENT_WITHHELD_FUNDS_PENDING_REDUCTIONS}',
                        INTERIM_DISBURSEMENT_TO_CLIENT_WITHHELD_FUNDS_PENDING_REDUCTIONS_AMOUNT: angular.isDefined(params.amountInNumbers8) ? $filter('currency')(params.amountInNumbers8, '', 2) : '{INTERIM_DISBURSEMENT_TO_CLIENT_WITHHELD_FUNDS_PENDING_REDUCTIONS_AMOUNT}',
                        INTERIM_DISBURSEMENT_TO_CLIENT_AMOUNT: angular.isDefined(params.amountInNumbers7) ? $filter('currency')(params.amountInNumbers7, '', 2) : '{INTERIM_DISBURSEMENT_TO_CLIENT_AMOUNT}',
                        INTERIM_DISBURSEMENT_TO_CLIENT: angular.isDefined(params.issueJoinedDate) ? moment.unix(params.issueJoinedDate).utc().format('MMMM D, YYYY') : '{INTERIM_DISBURSEMENT_TO_CLIENT}'
                    }
                    break;
                case "F1309_8":
                    var plaintffRecovery = 0;
                    if (utils.isNotEmptyVal(vm.plaintiffInsuranceProviders)) {
                        _.forEach(vm.plaintiffInsuranceProviders, function (data) {
                            if (utils.isNotEmptyVal(data.settlement_calculators)) {
                                _.forEach(data.settlement_calculators, function (data1) {
                                    if (data1.is_final_settlement == 1) {
                                        plaintffRecovery += data1.client_recovery;
                                    }
                                })
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(plaintffRecovery) ? $filter('currency')(plaintffRecovery, '', 2) : 0,
                        CHECK_AMOUNT: angular.isDefined(params.amountInNumbers9) ? $filter('currency')(params.amountInNumbers9, '', 2) : '{CHECK_AMOUNT}',
                        CHECK_NUMBERS: angular.isDefined(params.barNumber) ? params.barNumber : '{CHECK_NUMBERS}'
                    }
                    break;
                case "F1238_9":
                    var insuranceId = [];
                    var witnessIds = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.onlyInsuranceId2) ? parseInt(params.onlyInsuranceId2.insuranceid) : 0;
                    insuranceId[2] = angular.isDefined(params.defendantInsuranceId) ? parseInt(params.defendantInsuranceId.insuranceid) : 0;
                    witnessIds[0] = utils.isEmptyVal(params.witnessName) ? 0 : parseInt(params.witnessName.contactid);
                    witnessIds[1] = utils.isEmptyVal(params.witnessName1) ? 0 : parseInt(params.witnessName1.contactid);

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        witnessId: utils.isNotEmptyVal(witnessIds) ? witnessIds : [0],
                        ACCIDENT_TIME: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{ACCIDENT_TIME}',
                        LOCATION_OF_ACCIDENT_CITY: angular.isDefined(params.leftTxtThree) ? params.leftTxtThree : '{LOCATION_OF_ACCIDENT_CITY}',
                        LOCATION_OF_ACCIDENT_STATE: angular.isDefined(params.leftTxtFour) ? params.leftTxtFour : '{LOCATION_OF_ACCIDENT_STATE}',
                        PLAINTIFF_VEHICLE_INFORMATION: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{PLAINTIFF_VEHICLE_INFORMATION}',
                        DEFENDENT_VEHICLE_INFORMATION: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{DEFENDENT_VEHICLE_INFORMATION}',
                        PLAINTIFF_VEHICLE_REGISTRATION_NUMBER_1: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{PLAINTIFF_VEHICLE_REGISTRATION_NUMBER_1}',
                        PLAINTIFF_VEHICLE_REGISTRATION_NUMBER_2: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{PLAINTIFF_VEHICLE_REGISTRATION_NUMBER_2}',
                        DEFENDANT_VEHICLE_REGISTRATION_NUMBER: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '{DEFENDANT_VEHICLE_REGISTRATION_NUMBER}',
                        POLICE_PRECINCT: angular.isDefined(params.rightTxtFive) ? params.rightTxtFive : '{POLICE_PRECINCT}',
                        ACCIDENT_DESCRIPTION: angular.isDefined(params.rightTxtSix) ? params.rightTxtSix : '{ACCIDENT_DESCRIPTION}',
                        DRIVER_LICENSE_NUMBER: angular.isDefined(params.rightTxtSeven) ? params.rightTxtSeven : '{DRIVER_LICENSE_NUMBER}',
                        REASON_FOR_DELAY: angular.isDefined(params.rightTxtNine) ? params.rightTxtNine : '{REASON_FOR_DELAY}',
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.rightTxtEight) ? params.rightTxtEight : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        NF_INSURANCE_POLICY_END_DATE: angular.isDefined(params.depositionDate) ? moment.unix(params.depositionDate).utc().format('MMMM D, YYYY') : '{NF_INSURANCE_POLICY_END_DATE}',
                        POLICY_START_DATE: angular.isDefined(params.ebt_Date) ? moment.unix(params.ebt_Date).utc().format('MMMM D, YYYY') : '{POLICY_START_DATE}',
                        POLICY_END_DATE: angular.isDefined(params.claimDeny_Date) ? moment.unix(params.claimDeny_Date).utc().format('MMMM D, YYYY') : '{POLICY_END_DATE}',
                        DEFENDANT_POLICY_END_DATE: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('MMMM D, YYYY') : '{DEFENDANT_POLICY_END_DATE}'
                    }
                    break;
                case "F1427_28":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;
                case "F1309_39":
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.onlyInsuranceId2) ? parseInt(params.onlyInsuranceId2.insuranceid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0]
                    }
                    break;
                case "F1309_33":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        mediatorId: angular.isDefined(params.mediators) ? [parseInt(params.mediators.contactid)] : [0],
                        mediatorType: angular.isDefined(params.mediators) ? [params.mediators.contact_type] : [''],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0
                    }
                    break;
                case "F1427_69":
                    var type;
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.providerid.contact_type != undefined) {
                            type = (params.medicalproviderid.providerid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: utils.isNotEmptyVal(type) ? type : ['Local'],
                        SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS: angular.isDefined(params.negotiationIds) ? $filter('currency')(params.negotiationIds.demanded_amount, '', 2) : '{SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS}',
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        DISBURSEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '{DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;
                case "F1427_70":
                    var type1 = "Local";
                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.is_global != undefined) {
                            type1 = (params.medicalproviderid1.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    if (params.medicalproviderid2 != undefined) {
                        if (params.medicalproviderid2.is_global != undefined) {
                            type2 = (params.medicalproviderid2.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    var ids = [];
                    ids[0] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.providerid.contactid) : 0;
                    ids[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.providerid.contactid) : 0;
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.defendantInsuranceId) ? parseInt(params.defendantInsuranceId.insuranceid) : 0;
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        medicalproviderid: utils.isNotEmptyVal(ids) ? ids : [0],
                        medicalprovidertype: [type1, type2],
                        SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS: angular.isDefined(params.negotiationIds) ? $filter('currency')(params.negotiationIds.demanded_amount, '', 2) : '{SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS}',
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        DEFENDANT_POLICY_LIMIT: angular.isDefined(params.leftTxtOne) ? params.leftTxtOne : '{DEFENDANT_POLICY_LIMIT}',
                        UNINSURED_CITED_FOR: angular.isDefined(params.barNumber) ? params.barNumber : '{UNINSURED_CITED_FOR}',
                        DISBURSEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '{DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;
                case "F1427_71":
                    var type1 = "Local";
                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.is_global != undefined) {
                            type1 = (params.medicalproviderid1.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    if (params.medicalproviderid2 != undefined) {
                        if (params.medicalproviderid2.is_global != undefined) {
                            type2 = (params.medicalproviderid2.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    var ids = [];
                    ids[0] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.providerid.contactid) : 0;
                    ids[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.providerid.contactid) : 0;
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.defendantInsuranceId) ? parseInt(params.defendantInsuranceId.insuranceid) : 0;
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        medicalproviderid: utils.isNotEmptyVal(ids) ? ids : [0],
                        medicalprovidertype: [type1, type2],
                        SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS: angular.isDefined(params.negotiationIds) ? $filter('currency')(params.negotiationIds.demanded_amount, '', 2) : '{SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS}',
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        UNINSURED_CITED_FOR: angular.isDefined(params.barNumber) ? params.barNumber : '{UNINSURED_CITED_FOR}',
                        DISBURSEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '{DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;
                case "F1427_72":
                    var type1 = "Local";
                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.is_global != undefined) {
                            type1 = (params.medicalproviderid1.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    if (params.medicalproviderid2 != undefined) {
                        if (params.medicalproviderid2.is_global != undefined) {
                            type2 = (params.medicalproviderid2.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    var ids = [];
                    ids[0] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.providerid.contactid) : 0;
                    ids[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.providerid.contactid) : 0;
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalproviderid: utils.isNotEmptyVal(ids) ? ids : [0],
                        medicalprovidertype: [type1, type2],
                        SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS: angular.isDefined(params.negotiationIds) ? $filter('currency')(params.negotiationIds.demanded_amount, '', 2) : '{SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS}',
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        UNINSURED_CITED_FOR: angular.isDefined(params.barNumber) ? params.barNumber : '{UNINSURED_CITED_FOR}',
                        DISBURSEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '{DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;
                case "F1427_73":
                    var type1 = "Local";
                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.is_global != undefined) {
                            type1 = (params.medicalproviderid1.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    if (params.medicalproviderid2 != undefined) {
                        if (params.medicalproviderid2.is_global != undefined) {
                            type2 = (params.medicalproviderid2.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    var ids = [];
                    ids[0] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.providerid.contactid) : 0;
                    ids[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.providerid.contactid) : 0;

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant1) ? [parseInt(params.defendant1)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalproviderid: utils.isNotEmptyVal(ids) ? ids : [0],
                        medicalprovidertype: [type1, type2],
                        SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS: angular.isDefined(params.negotiationIds) ? $filter('currency')(params.negotiationIds.demanded_amount, '', 2) : '{SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS}',
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        ACCIDENT_TIME: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{ACCIDENT_TIME}',
                        DISBURSEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '{DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;
                case "F1427_74":
                    var type1 = "Local";
                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.is_global != undefined) {
                            type1 = (params.medicalproviderid1.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    if (params.medicalproviderid2 != undefined) {
                        if (params.medicalproviderid2.is_global != undefined) {
                            type2 = (params.medicalproviderid2.is_global == "1") ? "Global" : "Local";
                        }
                    }
                    var ids = [];
                    ids[0] = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.providerid.contactid) : 0;
                    ids[1] = angular.isDefined(params.medicalproviderid2) ? parseInt(params.medicalproviderid2.providerid.contactid) : 0;

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalproviderid: utils.isNotEmptyVal(ids) ? ids : [0],
                        medicalprovidertype: [type1, type2],
                        SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS: angular.isDefined(params.negotiationIds) ? $filter('currency')(params.negotiationIds.demanded_amount, '', 2) : '{SETTLEMENT_DEMAND_AMOUNT_IN_NUMBERS}',
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        DISBURSEMENT_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers) ? $filter('currency')(params.amountInNumbers, '', 2) : '{DISBURSEMENT_AMOUNT_IN_NUMBERS}',
                        TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE: angular.isDefined(params.summonServeDate) ? moment.unix(params.summonServeDate).utc().format('MMMM D, YYYY') : '{TWO_WEEKS_AFTER_SENDING_OUT_DEMAND_DATE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"

                    }
                    break;

                case "F1427_34":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_35":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_29":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_22":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_47":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_46":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_50":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        SETTLEMENT_OFFER_AMOUNT_IN_NUMBERS: angular.isDefined(params.plaintiffInsuranceIds) ? $filter('currency')(params.plaintiffInsuranceIds.offered_amount, '', 2) : '{SETTLEMENT_OFFER_AMOUNT_IN_NUMBERS}'

                    }
                    break;

                case "F1427_44":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        SETTLEMENT_OFFER_AMOUNT_IN_NUMBERS: angular.isDefined(params.plaintiffInsuranceIds) ? $filter('currency')(params.plaintiffInsuranceIds.offered_amount, '', 2) : '{SETTLEMENT_OFFER_AMOUNT_IN_NUMBERS}',
                        CHECK_AMOUNT: angular.isDefined(params.amountInNumbers9) ? params.amountInNumbers9 : '{CHECK_AMOUNT}'
                    }
                    break;
                case "F1427_23":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_30":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var plaintiffBlock = [];
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_31":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_32":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_38":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.defendantInsuranceId) ? parseInt(params.defendantInsuranceId.insuranceid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_39":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.defendantInsuranceId) ? parseInt(params.defendantInsuranceId.insuranceid) : 0;
                    var plaintiffBlock = [];
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_51":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.defendantInsuranceId) ? parseInt(params.defendantInsuranceId.insuranceid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_52":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var plaintiffBlock = [];
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_53":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1427_54":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var insuranceId = [];
                    insuranceId[0] = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceId[1] = angular.isDefined(params.defendantInsuranceId) ? parseInt(params.defendantInsuranceId.insuranceid) : 0;
                    var plaintiffBlock = [];
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: utils.isNotEmptyVal(insuranceId) ? insuranceId : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;
                case "F1429_95":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant1) ? [parseInt(params.defendant1)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                    }
                    break;
                case "F1429_102":
                    var plaintiffBlock = [];
                    plaintiffBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;

                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : ["Local"],
                        CONTACT_TITLE: angular.isDefined(params.title) ? params.title.id : '{CONTACT_TITLE}'
                    }
                    break;

                case "F1427_75":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid1) && utils.isNotEmptyVal(params.medicalproviderid1.providerid.faxnumber)) ? params.medicalproviderid1.providerid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid1) && utils.isNotEmptyVal(params.medicalproviderid1.providerid.emailid)) ? params.medicalproviderid1.providerid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.contact_type != undefined) {
                            type2 = (params.medicalproviderid1.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var id1 = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.providerid.contactid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: [id1],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        medicalprovidertype: [type2]
                    }
                    break;

                case "F1427_76":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid1) && utils.isNotEmptyVal(params.medicalproviderid1.providerid.faxnumber)) ? params.medicalproviderid1.providerid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid1) && utils.isNotEmptyVal(params.medicalproviderid1.providerid.emailid)) ? params.medicalproviderid1.providerid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    var type2 = "Local";
                    if (params.medicalproviderid1 != undefined) {
                        if (params.medicalproviderid1.contact_type != undefined) {
                            type2 = (params.medicalproviderid1.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var id1 = angular.isDefined(params.medicalproviderid1) ? parseInt(params.medicalproviderid1.providerid.contactid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: [id1],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        medicalprovidertype: [type2]
                    }
                    break;

                case "F1488_3":
                    var mBillType = [];
                    var mBillId = [];

                    _.forEach(vm.medicalBillInfoList, function (currentItem) {
                        if (currentItem.medicalbillid != undefined) {
                            mBillId.push(parseInt(currentItem.medicalbillid));
                        }
                        if (currentItem.is_global == 0) {
                            mBillType.push('Local');
                        } else {
                            mBillType.push('Global');
                        }
                    });
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        medicalBillId: utils.isNotEmptyVal(mBillId) ? mBillId : [0],
                        medicalBillType: utils.isNotEmptyVal(mBillType) ? mBillType : ['Local']
                    }
                    break;

                case "F1488_4":
                    var mBillType = [];
                    var mBillId = [];

                    _.forEach(vm.medicalBillInfoList, function (currentItem) {
                        if (currentItem.medicalbillid != undefined) {
                            mBillId.push(parseInt(currentItem.medicalbillid));
                        }
                        if (currentItem.is_global == 0) {
                            mBillType.push('Local');
                        } else {
                            mBillType.push('Global');
                        }
                    });
                    var defendant_Id = [];
                    defendant_Id[0] = angular.isDefined(params.defendant1) ? parseInt(params.defendant1) : 0;
                    defendant_Id[1] = angular.isDefined(params.defendant2) ? parseInt(params.defendant2) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: utils.isNotEmptyVal(defendant_Id) ? defendant_Id : [0],
                        medicalBillId: mBillId,
                        medicalBillType: mBillType,
                        PLAINTIFF_VEHICLE_TYPE: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{PLAINTIFF_VEHICLE_TYPE}',
                        DEFENDANT_VEHICLE_TYPE: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{DEFENDANT_VEHICLE_TYPE}',
                        ACCIDENT_DESCRIPTION: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{ACCIDENT_DESCRIPTION}'
                    }
                    break;

                case "F1427_8":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        counselAttorneyId: angular.isDefined(params.coCounsel) ? [parseInt(params.coCounsel.contactid)] : [0],
                        counselAttorneyType: angular.isDefined(params.coCounsel) ? [params.coCounsel.contact_type] : ['Local'],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_15":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_16":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        counselAttorneyId: angular.isDefined(params.coCounsel) ? [parseInt(params.coCounsel.contactid)] : [0],
                        counselAttorneyType: angular.isDefined(params.coCounsel) ? [params.coCounsel.contact_type] : ['Local'],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_33":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        counselAttorneyId: angular.isDefined(params.coCounsel) ? [parseInt(params.coCounsel.contactid)] : [0],
                        counselAttorneyType: angular.isDefined(params.coCounsel) ? [params.coCounsel.contact_type] : ['Local'],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_17":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        counselAttorneyId: angular.isDefined(params.coCounsel) ? [parseInt(params.coCounsel.contactid)] : [0],
                        counselAttorneyType: angular.isDefined(params.coCounsel) ? [params.coCounsel.contact_type] : ['Local'],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1427_18":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        eventId: angular.isDefined(params.soleventid) ? parseInt(params.soleventid) : 0
                    }
                    break;

                case "F1427_19":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        eventId: angular.isDefined(params.soleventid) ? parseInt(params.soleventid) : 0
                    }
                    break;

                case "F1427_62":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1427_63":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        counselAttorneyId: angular.isDefined(params.coCounsel) ? [parseInt(params.coCounsel.contactid)] : [0],
                        counselAttorneyType: angular.isDefined(params.coCounsel) ? [params.coCounsel.contact_type] : ['Local'],
                    }
                    break;

                case "F1427_64":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1427_65":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        counselAttorneyId: angular.isDefined(params.coCounsel) ? [parseInt(params.coCounsel.contactid)] : [0],
                        counselAttorneyType: angular.isDefined(params.coCounsel) ? [params.coCounsel.contact_type] : ['Local'],
                    }
                    break;

                case "F1427_66":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        counselAttorneyId: angular.isDefined(params.coCounsel) ? [parseInt(params.coCounsel.contactid)] : [0],
                        counselAttorneyType: angular.isDefined(params.coCounsel) ? [params.coCounsel.contact_type] : ['Local'],
                    }
                    break;

                case "F1427_67":
                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ASSIGNED_ATTORNEYS_TITLE: angular.isDefined(params.retainerNumber) ? params.retainerNumber : '{ASSIGNED_ATTORNEYS_TITLE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        counselAttorneyId: angular.isDefined(params.coCounsel) ? [parseInt(params.coCounsel.contactid)] : [0],
                        counselAttorneyType: angular.isDefined(params.coCounsel) ? [params.coCounsel.contact_type] : ['Local'],
                    }
                    break;

                case "F1488_5":
                    var plaintff_Id = [];
                    var mBillType_1 = [];
                    var mBillId_1 = [];
                    var mBillType_2 = [];
                    var mBillId_2 = [];
                    var bill_amount_1 = 0;
                    var bill_amount_2 = 0;
                    var mBillIds = [];
                    var mBilltypes = [];

                    plaintff_Id[0] = angular.isDefined(params.plaintiff2) ? parseInt(params.plaintiff2.plaintiffid) : 0;
                    plaintff_Id[1] = angular.isDefined(params.plaintiff3) ? parseInt(params.plaintiff3.plaintiffid) : 0;

                    _.forEach(vm.medicalBillInfoList, function (currentItem) {
                        // Condition for Plaintiff 1
                        if (plaintff_Id[0] != 0) {
                            if (currentItem.plaintiffid.plaintiffid == plaintff_Id[0]) {
                                mBillId_1.push(parseInt(currentItem.medicalbillid));
                                if (currentItem.is_global == 0) {
                                    mBillType_1.push('Local');
                                } else {
                                    mBillType_1.push('Global');
                                }
                                bill_amount_1 = utils.isNotEmptyVal(currentItem.totalamount) ? bill_amount_1 + parseFloat(currentItem.totalamount) : bill_amount_1;
                            }
                        } else {
                            mBillId_1 = [0];
                            mBillType_1 = ['Local'];
                        }
                        // Condition for Plaintiff 2
                        if (plaintff_Id[1] != 0) {
                            if (currentItem.plaintiffid.plaintiffid == plaintff_Id[1]) {
                                mBillId_2.push(parseInt(currentItem.medicalbillid));
                                if (currentItem.is_global == 0) {
                                    mBillType_2.push('Local');
                                } else {
                                    mBillType_2.push('Global');
                                }
                                bill_amount_2 = utils.isNotEmptyVal(currentItem.totalamount) ? bill_amount_2 + parseFloat(currentItem.totalamount) : bill_amount_2;

                            }
                        } else {
                            mBillId_2 = [0];
                            mBillType_2 = ['Local'];
                        }
                    });

                    mBillId_1 = utils.isNotEmptyVal(mBillId_1) ? mBillId_1 : [0];
                    mBillId_2 = utils.isNotEmptyVal(mBillId_2) ? mBillId_2 : [0];

                    mBillType_1 = utils.isNotEmptyVal(mBillType_1) ? mBillType_1 : ['Local'];
                    mBillType_2 = utils.isNotEmptyVal(mBillType_2) ? mBillType_2 : ['Local'];

                    mBillIds = [mBillId_1, mBillId_2];
                    mBilltypes = [mBillType_1, mBillType_2];

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintff_Id) ? plaintff_Id : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        medicalBillIds: utils.isNotEmptyVal(mBillIds) ? mBillIds : [0],
                        medicalBillTypes: utils.isNotEmptyVal(mBilltypes) ? mBilltypes : ['Local'],
                        TOTAL_MEDICAL_BILL_AMOUNT_1: utils.isNotEmptyVal(bill_amount_1) ? $filter('currency')(bill_amount_1, '', 2) : '{TOTAL_MEDICAL_BILL_AMOUNT_1}',
                        TOTAL_MEDICAL_BILL_AMOUNT_2: utils.isNotEmptyVal(bill_amount_2) ? $filter('currency')(bill_amount_2, '', 2) : '{TOTAL_MEDICAL_BILL_AMOUNT_2}',
                        PLAINTIFF_VEHICLE_TYPE: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{PLAINTIFF_VEHICLE_TYPE}',
                        DEFENDANT_VEHICLE_TYPE: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{DEFENDANT_VEHICLE_TYPE}',
                        ACCIDENT_DESCRIPTION: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{ACCIDENT_DESCRIPTION}'
                    }
                    break;

                case "F1488_6":
                    var plaintff_Id = [];
                    var mBillType_1 = [];
                    var mBillId_1 = [];
                    var mBillType_2 = [];
                    var mBillId_2 = [];
                    var mBillType_3 = [];
                    var mBillId_3 = [];
                    var bill_amount_1 = 0;
                    var bill_amount_2 = 0;
                    var bill_amount_3 = 0;
                    var mBillIds = [];
                    var mBilltypes = [];

                    plaintff_Id[0] = angular.isDefined(params.plaintiff2) ? parseInt(params.plaintiff2.plaintiffid) : 0;
                    plaintff_Id[1] = angular.isDefined(params.plaintiff3) ? parseInt(params.plaintiff3.plaintiffid) : 0;
                    plaintff_Id[2] = angular.isDefined(params.plaintiff4) ? parseInt(params.plaintiff4.plaintiffid) : 0;

                    _.forEach(vm.medicalBillInfoList, function (currentItem) {
                        // Condition for Plaintiff 1
                        if (plaintff_Id[0] != 0) {
                            if (currentItem.plaintiffid.plaintiffid == plaintff_Id[0]) {
                                mBillId_1.push(parseInt(currentItem.medicalbillid));
                                if (currentItem.is_global == 0) {
                                    mBillType_1.push('Local');
                                } else {
                                    mBillType_1.push('Global');
                                }
                                bill_amount_1 = utils.isNotEmptyVal(currentItem.totalamount) ? bill_amount_1 + parseFloat(currentItem.totalamount) : bill_amount_1;
                            }
                        } else {
                            mBillId_1 = [0];
                            mBillType_1 = ['Local'];
                        }
                        // Condition for Plaintiff 2
                        if (plaintff_Id[1] != 0) {
                            if (currentItem.plaintiffid.plaintiffid == plaintff_Id[1]) {
                                mBillId_2.push(parseInt(currentItem.medicalbillid));
                                if (currentItem.is_global == 0) {
                                    mBillType_2.push('Local');
                                } else {
                                    mBillType_2.push('Global');
                                }
                                bill_amount_2 = utils.isNotEmptyVal(currentItem.totalamount) ? bill_amount_2 + parseFloat(currentItem.totalamount) : bill_amount_2;

                            }
                        } else {
                            mBillId_2 = [0];
                            mBillType_2 = ['Local'];
                        }
                        // Condition for Plaintiff 3
                        if (plaintff_Id[2] != 0) {
                            if (currentItem.plaintiffid.plaintiffid == plaintff_Id[2]) {
                                mBillId_3.push(parseInt(currentItem.medicalbillid));
                                if (currentItem.is_global == 0) {
                                    mBillType_3.push('Local');
                                } else {
                                    mBillType_3.push('Global');
                                }
                                bill_amount_3 = utils.isNotEmptyVal(currentItem.totalamount) ? bill_amount_3 + parseFloat(currentItem.totalamount) : bill_amount_3;

                            }
                        } else {
                            mBillId_3 = [0];
                            mBillType_3 = ['Local'];
                        }
                    });
                    mBillId_1 = utils.isNotEmptyVal(mBillId_1) ? mBillId_1 : [0];
                    mBillId_2 = utils.isNotEmptyVal(mBillId_2) ? mBillId_2 : [0];
                    mBillId_3 = utils.isNotEmptyVal(mBillId_3) ? mBillId_3 : [0];

                    mBillType_1 = utils.isNotEmptyVal(mBillType_1) ? mBillType_1 : ['Local'];
                    mBillType_2 = utils.isNotEmptyVal(mBillType_2) ? mBillType_2 : ['Local'];
                    mBillType_3 = utils.isNotEmptyVal(mBillType_3) ? mBillType_3 : ['Local'];

                    mBillIds = [mBillId_1, mBillId_2, mBillId_3];
                    mBilltypes = [mBillType_1, mBillType_2, mBillType_3];

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintff_Id) ? plaintff_Id : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        medicalBillIds: utils.isNotEmptyVal(mBillIds) ? mBillIds : [0],
                        medicalBillTypes: utils.isNotEmptyVal(mBilltypes) ? mBilltypes : ['Local'],
                        TOTAL_MEDICAL_BILL_AMOUNT_1: utils.isNotEmptyVal(bill_amount_1) ? $filter('currency')(bill_amount_1, '', 2) : '{TOTAL_MEDICAL_BILL_AMOUNT_1}',
                        TOTAL_MEDICAL_BILL_AMOUNT_2: utils.isNotEmptyVal(bill_amount_2) ? $filter('currency')(bill_amount_2, '', 2) : '{TOTAL_MEDICAL_BILL_AMOUNT_2}',
                        TOTAL_MEDICAL_BILL_AMOUNT_3: utils.isNotEmptyVal(bill_amount_3) ? $filter('currency')(bill_amount_3, '', 2) : '{TOTAL_MEDICAL_BILL_AMOUNT_3}',
                        PLAINTIFF_VEHICLE_TYPE: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{PLAINTIFF_VEHICLE_TYPE}',
                        DEFENDANT_VEHICLE_TYPE: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{DEFENDANT_VEHICLE_TYPE}',
                        ACCIDENT_DESCRIPTION: angular.isDefined(params.rightTxtThree) ? params.rightTxtThree : '{ACCIDENT_DESCRIPTION}'
                    }
                    break;

                case "F1447_59":
                    var bill_id = 0;
                    var bill_type = 'Local';
                    var provider_id = 0;
                    var provider_type = "Local";

                    if (params.medicalproviderid && params.medicalproviderid.medicalbillid) {
                        bill_id = parseInt(params.medicalproviderid.medicalbillid);
                        bill_type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        provider_id = (params.medicalproviderid && params.medicalproviderid.providerid) ? parseInt(params.medicalproviderid.providerid.contactid) : 0;
                        provider_type = (params.medicalproviderid.is_global == 0) ? 'Local' : 'Global';
                    } else {
                        bill_id = 0;
                        bill_type = 'Local';
                        provider_id = (params.medicalproviderid && params.medicalproviderid.providerid) ? parseInt(params.medicalproviderid.providerid.contactid) : 0;
                        provider_type = 'Local';
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        medicalproviderid: [provider_id],
                        medicalprovidertype: [provider_type],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalBillType: [bill_type],
                        medicalBillId: [bill_id],
                        OFFER_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers9) ? '{OFFER_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers9, '', 2)
                    }
                    break;

                case "F1447_58":
                    var bill_id = 0;
                    var bill_type = 'Local';
                    var provider_id = 0;
                    var provider_type = "Local";

                    if (params.medicalproviderid && params.medicalproviderid.medicalbillid) {
                        bill_id = parseInt(params.medicalproviderid.medicalbillid);
                        bill_type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        provider_id = (params.medicalproviderid && params.medicalproviderid.providerid) ? parseInt(params.medicalproviderid.providerid.contactid) : 0;
                        provider_type = (params.medicalproviderid.is_global == 0) ? 'Local' : 'Global';
                    } else {
                        bill_id = 0;
                        bill_type = 'Local';
                        provider_id = (params.medicalproviderid && params.medicalproviderid.providerid) ? parseInt(params.medicalproviderid.providerid.contactid) : 0;
                        provider_type = 'Local';
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        medicalproviderid: [provider_id],
                        medicalprovidertype: [provider_type],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalBillType: [bill_type],
                        medicalBillId: [bill_id],
                        PIP_PAID_AMOUNT_IN_NUMBERS: utils.isEmptyVal(params.amountInNumbers) ? '{PIP_PAID_AMOUNT_IN_NUMBERS}' : $filter('currency')(params.amountInNumbers, '', 2)
                    }
                    break;
                case "F1520_44":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        plaintiffEmployerId: angular.isDefined(params.plaintiffEmployerIds) ? [parseInt(params.plaintiffEmployerIds.employerid)] : [0],
                        plaintiffEmployerType: angular.isDefined(params.plaintiffEmployerIds) ? [params.plaintiffEmployerIds.contactid.contact_type] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        PRIMARY_SPOKEN_LANGUAGE: utils.isNotEmptyVal(params.rightTxtOne) ? params.rightTxtOne : '{PRIMARY_SPOKEN_LANGUAGE}',
                        PROCEEDING: utils.isNotEmptyVal(params.rightTxtTwo) ? params.rightTxtTwo : '{PROCEEDING}',
                        PROCEEDING_DATE: utils.isNotEmptyVal(params.proceedingDate) ? moment.unix(params.proceedingDate).utc().format('MMMM D, YYYY') : '{PROCEEDING_DATE}'
                    }
                    break;
                case "F1520_45":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : ['']
                    }
                    break;

                case "F1479_7":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        negotiationId: angular.isDefined(params.plaintiffInsuranceIds1) ? [params.plaintiffInsuranceIds1.negotiation_id] : [0],
                        SETTLEMENT_AMOUNT_IN_WORDS: utils.isNotEmptyVal(params.amountInWords) ? params.amountInWords : '{SETTLEMENT_AMOUNT_IN_WORDS}',
                        DEFENDANT_FILE_NUMBER: utils.isNotEmptyVal(params.defendantFileNumber) ? params.defendantFileNumber : '{DEFENDANT_FILE_NUMBER}'
                    }
                    break;

                case "F1479_8":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        negotiationId: angular.isDefined(params.plaintiffInsuranceIds1) ? [params.plaintiffInsuranceIds1.negotiation_id] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        SETTLEMENT_AMOUNT_IN_WORDS: utils.isNotEmptyVal(params.amountInWords) ? params.amountInWords : '{SETTLEMENT_AMOUNT_IN_WORDS}',
                        TYPE_OF_ACCIDENT: utils.isNotEmptyVal(params.desc_Accident) ? params.desc_Accident : '{TYPE_OF_ACCIDENT}',
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0]
                    }
                    break;

                case "F1479_12":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        DEPOSITION_DATE: angular.isDefined(params.depositionDate) ? moment.unix(params.depositionDate).utc().format('MMMM D, YYYY') : '{DEPOSITION_DATE}',
                        DEFENDANT_LAW_FIRM_ADDRESS: utils.isNotEmptyVal(params.custodianName) ? params.custodianName : '{DEFENDANT_LAW_FIRM_ADDRESS}'

                    }
                    break;
                case "F1479_21":
                    var settlement_amt = 0;
                    var plaintff_recovery_amt = 0;

                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2) && utils.isNotEmptyVal(params.plaintiffInsuranceIds2.settlement_calculators)) {
                        _.forEach(params.plaintiffInsuranceIds2.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                settlement_amt = data.settlement_amount ? data.settlement_amount : 0;
                                plaintff_recovery_amt = data.client_recovery ? data.client_recovery : 0;
                            }
                        })
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                        PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(plaintff_recovery_amt) ? $filter('currency')(plaintff_recovery_amt, '', 2) : 0,
                        SETTLEMENT_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(settlement_amt) ? $filter('currency')(settlement_amt, '', 2) : 0,
                        SHIPPING_ID: utils.isNotEmptyVal(params.rightTxtThree) ? params.rightTxtThree : '{SHIPPING_ID}'
                    }
                    break;

                case "F1479_14":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        PLAINTIFF_RESIDENCE_COUNTY: utils.isNotEmptyVal(params.PlaintiffResidenceCounty) ? params.PlaintiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        DEFENDANT_RESIDENCE_COUNTY: utils.isNotEmptyVal(params.DefendantsResidenceCounty) ? params.DefendantsResidenceCounty : '{DEFENDANT_RESIDENCE_COUNTY}',
                        DEFENDENT_VEHICLE_INFORMATION: utils.isNotEmptyVal(params.DefendantVehicleInformation) ? params.DefendantVehicleInformation : '{DEFENDENT_VEHICLE_INFORMATION}',
                        DEFENDANT_STATE_OF_LICENSE_PLATES: utils.isNotEmptyVal(params.DefendantStateoftheLicensePlates) ? params.DefendantStateoftheLicensePlates : '{DEFENDANT_STATE_OF_LICENSE_PLATES}',
                        DEFENDANT_VEHICLE_PLATE_NUMBER: utils.isNotEmptyVal(params.DefendantVehiclePlateNumber) ? params.DefendantVehiclePlateNumber : '{DEFENDANT_VEHICLE_PLATE_NUMBER}',
                        PLAINTIFF_VEHICLE_INFORMATION: utils.isNotEmptyVal(params.PlaintiffVehiclesInformation) ? params.PlaintiffVehiclesInformation : '{PLAINTIFF_VEHICLE_INFORMATION}',
                        PLAINTIFF_STATE_OF_LICENSE_PLATES: utils.isNotEmptyVal(params.PlaintiffStateoftheLicensePlates) ? params.PlaintiffStateoftheLicensePlates : '{PLAINTIFF_STATE_OF_LICENSE_PLATES}',
                        PLAINTIFF_VEHICLE_PLATE_NUMBER: utils.isNotEmptyVal(params.PlaintiffVehiclePlateNumber) ? params.PlaintiffVehiclePlateNumber : '{PLAINTIFF_VEHICLE_PLATE_NUMBER}',
                        LOCATION_OF_ACCIDENT_COUNTY: utils.isNotEmptyVal(params.CountyoftheLocationofAccident) ? params.CountyoftheLocationofAccident : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        ACCIDENT_TIME: utils.isNotEmptyVal(params.Accidenttime) ? params.Accidenttime : '{ACCIDENT_TIME}',
                    }
                    break;

                case "F1479_15":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    var defendant_Id = [];
                    defendant_Id[0] = angular.isDefined(params.defendant1) ? parseInt(params.defendant1) : 0;
                    defendant_Id[1] = angular.isDefined(params.defendant2) ? parseInt(params.defendant2) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: utils.isNotEmptyVal(defendant_Id) ? defendant_Id : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        PLAINTIFF_RESIDENCE_COUNTY: utils.isNotEmptyVal(params.PlaintiffResidenceCounty) ? params.PlaintiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        DEFENDANT_RESIDENCE_COUNTY_1: utils.isNotEmptyVal(params.DefendantsResidenceCounty_1) ? params.DefendantsResidenceCounty_1 : '{DEFENDANT_RESIDENCE_COUNTY_1}',
                        DEFENDANT_RESIDENCE_COUNTY_2: utils.isNotEmptyVal(params.DefendantsResidenceCounty_2) ? params.DefendantsResidenceCounty_2 : '{DEFENDANT_RESIDENCE_COUNTY_2}',
                        DEFENDENT_VEHICLE_INFORMATION: utils.isNotEmptyVal(params.DefendantVehicleInformation) ? params.DefendantVehicleInformation : '{DEFENDENT_VEHICLE_INFORMATION}',
                        DEFENDANT_STATE_OF_LICENSE_PLATES: utils.isNotEmptyVal(params.DefendantStateoftheLicensePlates) ? params.DefendantStateoftheLicensePlates : '{DEFENDANT_STATE_OF_LICENSE_PLATES}',
                        DEFENDANT_VEHICLE_PLATE_NUMBER: utils.isNotEmptyVal(params.DefendantVehiclePlateNumber) ? params.DefendantVehiclePlateNumber : '{DEFENDANT_VEHICLE_PLATE_NUMBER}',
                        LOCATION_OF_ACCIDENT_COUNTY: utils.isNotEmptyVal(params.CountyoftheLocationofAccident) ? params.CountyoftheLocationofAccident : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        ACCIDENT_TIME: utils.isNotEmptyVal(params.Accidenttime) ? params.Accidenttime : '{ACCIDENT_TIME}',
                    }
                    break;
                case "F1520_46":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1479_10":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                    }
                    break;

                case "F1479_6":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        DATE_OF_ORDER: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('MMMM D, YYYY') : '{DATE_OF_ORDER}',
                        DATE_OF_ENTRY: angular.isDefined(params.check_Date) ? moment.unix(params.check_Date).utc().format('MMMM D, YYYY') : '{DATE_OF_ENTRY}',
                        DATE_NOTICE_OF_ENTRY_SERVED: angular.isDefined(params.request_Date) ? moment.unix(params.request_Date).utc().format('MMMM D, YYYY') : '{DATE_NOTICE_OF_ENTRY_SERVED}',
                        JUDGE_FULLNAME: utils.isNotEmptyVal(params.JudgeName) ? params.JudgeName : '{JUDGE_FULLNAME}'

                    }
                    break;

                case "F1479_5":
                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    var plaintiffBlock = [];
                    plaintiffBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;

                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })

                    var defendantid = [];
                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantid.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    var insuranceIds = [];
                    insuranceIds[0] = angular.isDefined(params.onlyInsuranceId1) ? parseInt(params.onlyInsuranceId1.insuranceid) : 0;
                    insuranceIds[1] = angular.isDefined(params.onlyInsuranceId2) ? parseInt(params.onlyInsuranceId2.insuranceid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: utils.isNotEmptyVal(defendantid) ? defendantid : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.exhibitsDate) ? moment.unix(params.exhibitsDate).utc().format('L') : '{DATE_SUMMONS_SERVED}',
                        DATE_SERVICE_COMPLETED: angular.isDefined(params.expertDate) ? moment.unix(params.expertDate).utc().format('L') : '{DATE_SERVICE_COMPLETED}',
                        DATE_ISSUE_JOINED: angular.isDefined(params.plaintiffWitnessDate) ? moment.unix(params.plaintiffWitnessDate).utc().format('L') : '{DATE_ISSUE_JOINED}',
                        NOTE_OF_ISSUE_DATE: angular.isDefined(params.thirdPartyDate) ? moment.unix(params.thirdPartyDate).utc().format('MMMM D, YYYY') : '{NOTE_OF_ISSUE_DATE}',
                        insuranceIds: utils.isNotEmptyVal(insuranceIds) ? insuranceIds : [0],
                        JUDGE_FULLNAME: utils.isNotEmptyVal(params.JudgeName) ? params.JudgeName : '{JUDGE_FULLNAME}'
                    }
                    break;
                case "F1479_4":
                    var bill_id = 0;
                    var bill_type = 'Local';
                    var provider_id = 0;
                    var provider_type = "Local";

                    if (params.medicalproviderid && params.medicalproviderid.medicalbillid) {
                        bill_id = parseInt(params.medicalproviderid.medicalbillid);
                        bill_type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        provider_id = (params.medicalproviderid && params.medicalproviderid.providerid) ? parseInt(params.medicalproviderid.providerid.contactid) : 0;
                        provider_type = (params.medicalproviderid.is_global == 0) ? 'Local' : 'Global';
                    } else {
                        bill_id = 0;
                        bill_type = 'Local';
                        provider_id = (params.medicalproviderid && params.medicalproviderid.providerid) ? parseInt(params.medicalproviderid.providerid.contactid) : 0;
                        provider_type = 'Local';
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        medicalproviderid: [provider_id],
                        medicalprovidertype: [provider_type],
                        medicalBillType: [bill_type],
                        medicalBillId: [bill_id],
                        ROLE: utils.isNotEmptyVal(params.leftTxtOne) ? params.leftTxtOne : '{ROLE}'
                    }
                    break;

                case "F1427_77":

                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.faxnumber)) ? params.otherpartycontactid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.emailid)) ? params.otherpartycontactid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : ['Local'],
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        DOCUMENT_HEADING: utils.isNotEmptyVal(params.documentheading) ? params.documentheading : '{DOCUMENT_HEADING}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        CONTACT_TITLE: angular.isDefined(params.title) ? params.title.id : '{CONTACT_TITLE}'
                    }
                    break;
                case "F1479_23":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        negotiationId: angular.isDefined(params.plaintiffInsuranceIds1) ? [params.plaintiffInsuranceIds1.negotiation_id] : [0],
                        CLOSING_DATE_FORWARDED_TO_CLIENT: angular.isDefined(params.noticeProduceDate) ? moment.unix(params.noticeProduceDate).utc().format('MMMM D, YYYY') : '{CLOSING_DATE_FORWARDED_TO_CLIENT}',
                        DATE_OF_PAYMENT_CLIENT: angular.isDefined(params.paymentToClientDate) ? moment.unix(params.paymentToClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CLIENT}',
                        DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT: angular.isDefined(params.paymentByClientDate) ? moment.unix(params.paymentByClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT}'
                    }
                    break;
                case "F1429_105":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        negotiationId: angular.isDefined(params.plaintiffInsuranceIds1) ? [params.plaintiffInsuranceIds1.negotiation_id] : [0],
                        TIME: utils.isNotEmptyVal(params.leftTxtOne) ? params.leftTxtOne : '{TIME}'
                    }
                    break;

                case "F1536_1":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        DELIVERY: utils.isNotEmptyVal(params.Delivery) ? params.Delivery : '{DELIVERY}'
                    }
                    break;

                case "F1536_2":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var medType = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        medType = params.medicalproviderid1.contact_type == "Global" ? "Global" : "Local";
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [medType],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        ACCOUNT_NUMBER: angular.isDefined(params.chargeNumber) ? params.chargeNumber : '{ACCOUNT_NUMBER}',
                        DELIVERY: utils.isNotEmptyVal(params.Delivery) ? params.Delivery : '{DELIVERY}'
                    }
                    break;

                case "F1536_3":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var medType = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        medType = params.medicalproviderid1.contact_type == "Global" ? "Global" : "Local";
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [medType],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        ACCOUNT_NUMBER: angular.isDefined(params.chargeNumber) ? params.chargeNumber : "{ACCOUNT_NUMBER}",
                        DELIVERY: utils.isNotEmptyVal(params.Delivery) ? params.Delivery : '{DELIVERY}'
                    }
                    break;

                case "F1536_4":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0],
                        CHECK_NUMBERS: angular.isDefined(params.checkNumber) ? params.checkNumber : "{CHECK_NUMBERS}",
                        CHECK_AMOUNT: utils.isNotEmptyVal(params.checkAmount) ? params.checkAmount : '{CHECK_AMOUNT}'
                    }
                    break;

                case "F1536_5":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.faxnumber)) ? params.onlyInsuranceId.insuranceprovider_address.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.onlyInsuranceId) && utils.isNotEmptyVal(params.onlyInsuranceId.insuranceprovider_address.email)) ? params.onlyInsuranceId.insuranceprovider_address.email : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        DELIVERY: utils.isNotEmptyVal(params.Delivery) ? params.Delivery : '{DELIVERY}'
                    }
                    break;

                case "F1536_7":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.faxnumber)) ? params.otherpartycontactid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.emailid)) ? params.otherpartycontactid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : [''],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        DELIVERY: utils.isNotEmptyVal(params.Delivery) ? params.Delivery : '{DELIVERY}'
                    }
                    break;

                case "F1536_8":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var medType = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        medType = params.medicalproviderid1.contact_type == "Global" ? "Global" : "Local";
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [medType],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        ACCOUNT_NUMBER: angular.isDefined(params.chargeNumber) ? params.chargeNumber : "{ACCOUNT_NUMBER}",
                        DELIVERY: utils.isNotEmptyVal(params.Delivery) ? params.Delivery : '{DELIVERY}'
                    }
                    break;

                case "F1536_9":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }
                    var medType = "Local";
                    if (params.medicalproviderid && params.medicalproviderid.contact_type) {
                        medType = params.medicalproviderid1.contact_type == "Global" ? "Global" : "Local";
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [medType],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        ACCOUNT_NUMBER: angular.isDefined(params.chargeNumber) ? params.chargeNumber : "{ACCOUNT_NUMBER}",
                        DELIVERY: utils.isNotEmptyVal(params.Delivery) ? params.Delivery : '{DELIVERY}'
                    }
                    break;
                case "F1429_110":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.medicaltreatmentid)] : [0]
                    }
                    break;

                case "F1427_78":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.faxnumber)) ? params.otherpartycontactid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    }
                    else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.emailid)) ? params.otherpartycontactid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"

                    }
                    break;

                case "F1508_13":
                    var type = 'Local';

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.medicaltreatmentid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;

                case "F1508_14":
                    var type = 'Local';

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.medicaltreatmentid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type]
                    }
                    break;

                case "F1508_15":

                    var type;
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.providerid.contact_type != undefined) {
                            type = (params.medicalproviderid.providerid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }
                    var bill_id;
                    if (params.medicalproviderid && params.medicalproviderid.hasOwnProperty('medicalbillid')) {
                        bill_id = parseInt(params.medicalproviderid.medicalbillid)
                    } else {
                        bill_id = 0;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: utils.isNotEmptyVal(type) ? type : ['Local'],
                        medicalBillId: utils.isNotEmptyVal(bill_id) ? [bill_id] : [0],
                        medicalBillType: ['Local'],
                        CHECK_AMOUNT: utils.isNotEmptyVal(params.checkAmount) ? params.checkAmount : '{CHECK_AMOUNT}'
                    }
                    break;

                case "F1508_4":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    }
                    else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1508_6":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    }
                    else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1508_3":
                    var billids = [];
                    var billType = [];
                    _.forEach(vm.medicalBillListWOProvider, function (data) {
                        if (utils.isNotEmptyVal(data.medicalbillid)) {
                            billids.push(parseInt(data.medicalbillid));
                            billType.push('Local');
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalBillId: utils.isNotEmptyVal(billids) ? billids : [0],
                        medicalBillType: utils.isNotEmptyVal(billType) ? billType : ['Local'],
                    }
                    break;

                case "F1508_26":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var data;
                    if (params.communicationMethod_1 && params.communicationMethod_1.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod_1 && params.communicationMethod_1.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        ACCOUNT_NUMBER: angular.isDefined(params.chargeNumber) ? params.chargeNumber : '{ACCOUNT_NUMBER}',
                        BILLING_DEPARTMENT_CONTACT_FULLNAME: angular.isDefined(params.rightTxtNine) ? params.rightTxtNine : '{BILLING_DEPARTMENT_CONTACT_FULLNAME}',
                        BILLING_DEPARTMENT_CONTACT_LASTNAME: angular.isDefined(params.rightTxtSix) ? params.rightTxtSix : '{BILLING_DEPARTMENT_CONTACT_LASTNAMEs}',
                        BILLING_DEPARTMENT_CONTACT_TITLE: angular.isDefined(params.title) ? params.title.id : '{BILLING_DEPARTMENT_CONTACT_TITLE}',
                        AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? $filter('currency')(params.amountInNumbers4, '', 2) : '{AMOUNT_IN_NUMBERS}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1473_11":
                    var plaintiffBlock = [];

                    plaintiffBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        ATTORNEY_LAW_FIRM_ADDRESS: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{ATTORNEY_LAW_FIRM_ADDRESS}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.CountyoftheLocationofAccident) ? params.CountyoftheLocationofAccident : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        APARTMENT_NUMBER_OF_ACCIDENT_LOCATION: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{APARTMENT_NUMBER_OF_ACCIDENT_LOCATION}',
                        ATTORNEY_LAW_FIRM_CITY: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{ATTORNEY_LAW_FIRM_CITY}',
                        ATTORNEY_LAW_FIRM_STATE: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '{ATTORNEY_LAW_FIRM_STATE}',
                        GUARDIAN_GENDER_PRONOUN: angular.isDefined(params.pronoun) ? params.pronoun.id : '{GUARDIAN_GENDER_PRONOUN}',

                    }
                    break;

                case "F1316_75":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1316_73":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.medicaltreatmentid)] : [0],
                        medicalproviderid: angular.isDefined(params.parentObjPhysicianproviderid) ? [parseInt(params.parentObjPhysicianproviderid.providerid.medicaltreatmentid)] : [0],
                    }
                    break;

                case "F1542_7":
                    var plaintiffBlock = [];

                    plaintiffBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    _.forEach(vm.plaintiff_dropdown, function (data) {
                        if (angular.isDefined(data.plaintiffid)) {
                            plaintiffBlock.push(parseInt(data.plaintiffid));
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        ATTORNEY_LAW_FIRM_ADDRESS: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{ATTORNEY_LAW_FIRM_ADDRESS}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.CountyoftheLocationofAccident) ? params.CountyoftheLocationofAccident : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        APARTMENT_NUMBER_OF_ACCIDENT_LOCATION: angular.isDefined(params.rightTxtTwo) ? params.rightTxtTwo : '{APARTMENT_NUMBER_OF_ACCIDENT_LOCATION}',
                        ATTORNEY_LAW_FIRM_CITY: angular.isDefined(params.rightTxtOne) ? params.rightTxtOne : '{ATTORNEY_LAW_FIRM_CITY}',
                        ATTORNEY_LAW_FIRM_STATE: angular.isDefined(params.rightTxtFour) ? params.rightTxtFour : '{ATTORNEY_LAW_FIRM_STATE}',
                        GUARDIAN_GENDER_PRONOUN: angular.isDefined(params.pronoun) ? params.pronoun.id : '{GUARDIAN_GENDER_PRONOUN}',
                    }
                    break;

                case "F1542_5":

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        ATTORNEY_LAW_FIRM_ADDRESS: angular.isDefined(params.leftTxtFive) ? params.leftTxtFive : '{ATTORNEY_LAW_FIRM_ADDRESS}',
                        DATE_INDEX_ISSUED: angular.isDefined(params.IndexDate) ? moment.unix(params.IndexDate).utc().format('MMMM D, YYYY') : '{DATE_INDEX_ISSUED}',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                    }
                    break;

                case "F1542_6":
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        negotiationId: angular.isDefined(params.plaintiffInsuranceIds1) ? [parseInt(params.plaintiffInsuranceIds1.negotiation_id)] : [0],
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        SUMMONS_AND_COMPLAINT_FILED_DATE: angular.isDefined(params.bondAmountDate) ? moment.unix(params.bondAmountDate).utc().format('MMMM D, YYYY') : '{SUMMONS_AND_COMPLAINT_FILED_DATE}',
                        DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT: angular.isDefined(params.paymentByClientDate) ? moment.unix(params.paymentByClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CARRIER_OR_DEFENDANT}',
                        DATE_OF_PAYMENT_CLIENT: angular.isDefined(params.paymentToClientDate) ? moment.unix(params.paymentToClientDate).utc().format('MMMM D, YYYY') : '{DATE_OF_PAYMENT_CLIENT}',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ATTORNEY_ADDRESS: angular.isDefined(params.attoneyAddress) ? params.attoneyAddress : '{ATTORNEY_ADDRESS}',

                    }
                    break;

                case "F1125_22":
                    var DefendantAttorneyBlock = [];
                    var defendantAttorneytypes = [];

                    _.forEach(vm.uniqDefendantAttorneyids, function (data) {
                        if (angular.isDefined(data.contactid)) {
                            DefendantAttorneyBlock.push(parseInt(data.contactid));
                            defendantAttorneytypes.push(data.contact_type);
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantAttorneyId: angular.isDefined(DefendantAttorneyBlock) ? DefendantAttorneyBlock : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        leadAttorneyId: angular.isDefined(params.secondleadattorneyid) ? [parseInt(params.secondleadattorneyid)] : [0]
                    }
                    break;

                case "F1125_11":
                    var DefendantAttorneyBlock = [];
                    var defendantAttorneytypes = [];

                    _.forEach(vm.uniqDefendantAttorneyids, function (data) {
                        if (angular.isDefined(data.contactid)) {
                            DefendantAttorneyBlock.push(parseInt(data.contactid));
                            defendantAttorneytypes.push(data.contact_type);
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        eventId: angular.isDefined(params.eventid) ? parseInt(params.eventid) : 0,
                        defendantAttorneyId: angular.isDefined(DefendantAttorneyBlock) ? DefendantAttorneyBlock : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                    }
                    break;

                case "F1125_23":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1125_16":

                    //Get Physicians
                    var medicalTreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicalTreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        }
                        else {
                            medicalTreatmentIds = 0;
                        }
                    }
                    else {
                        medicalTreatmentIds = 0;
                    }

                    //Get Medical Provider Depend on Physicians
                    var medicalproviderid;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician) && utils.isNotEmptyVal(params.PhysicianprovideridJava.medical_provider)) {
                            medicalproviderid = params.PhysicianprovideridJava.medical_provider.contact_id;
                        }
                        else {
                            medicalproviderid = 0;
                        }
                    }
                    else {
                        medicalproviderid = 0;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalTreatmentIds: [medicalTreatmentIds],
                        medicalproviderid: [medicalproviderid]
                    }
                    break;
                case "F1125_10":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        PLAINTIFF_CONTACT_NUMBER_BY_SELECTION: utils.isNotEmptyVal(params.selectedPlaintiffContactInfo) ? params.selectedPlaintiffContactInfo.number : '{PLAINTIFF_CONTACT_NUMBER_BY_SELECTION}'
                    }
                    break;

                case "F1125_24":
                    var DefendantAttorneyBlock = [];
                    var defendantAttorneytypes = [];

                    _.forEach(vm.uniqDefendantAttorneyids, function (data) {
                        if (angular.isDefined(data.contactid)) {
                            DefendantAttorneyBlock.push(parseInt(data.contactid));
                            defendantAttorneytypes.push(data.contact_type);
                        }
                    })
                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(DefendantAttorneyBlock) ? DefendantAttorneyBlock : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : ['Local'],
                    }
                    break;

                case "F1125_30":

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    var DefendantAttorneyBlock = [];
                    var defendantAttorneytypes = [];

                    DefendantAttorneyBlock[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;
                    defendantAttorneytypes[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : 'Local';

                    _.forEach(vm.uniqDefendantAttorneyids, function (data) {
                        if (angular.isDefined(data.contactid)) {
                            DefendantAttorneyBlock.push(parseInt(data.contactid));
                            defendantAttorneytypes.push(data.contact_type);
                        }
                    })

                    var defendantBlock = [];
                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantBlock.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0],
                        defendantAttorneyId: angular.isDefined(DefendantAttorneyBlock) ? DefendantAttorneyBlock : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : ['Local'],
                    }
                    break;

                case "F1125_28":
                    var DefendantAttorneyBlock = [];
                    var defendantAttorneytypes = [];
                    var defendantBlock = [];

                    defendantBlock[0] = angular.isDefined(params.defendant) ? parseInt(params.defendant) : 0;

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantBlock.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    _.forEach(vm.uniqDefendantAttorneyids, function (data) {
                        if (angular.isDefined(data.contactid)) {
                            DefendantAttorneyBlock.push(parseInt(data.contactid));
                            defendantAttorneytypes.push(data.contact_type);
                        }
                    })

                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';
                    angular.isDefined(params.captionDocumentId3) ? captionDoc3 = parseInt(params.captionDocumentId3) : '';


                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantAttorneyId: angular.isDefined(DefendantAttorneyBlock) ? DefendantAttorneyBlock : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : [''],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? (defendantBlock) : [0],
                        plaintiffAttorneyId: angular.isDefined(params.plaintiffAttorney) ? [parseInt(params.plaintiffAttorney.contactid)] : [0],
                        plaintiffAttorneyType: angular.isDefined(params.plaintiffAttorney) ? [(params.plaintiffAttorney.contact_type)] : ['Local'],
                        BAR_NUMBER: (utils.isNotEmptyVal(params.plaintiffAttorney) && utils.isNotEmptyVal(params.plaintiffAttorney.contact_note)) ? (params.plaintiffAttorney.contact_note) : '{BAR_NUMBER}'
                    }
                    break;

                case "F1125_1":
                    var DefendantAttorneyBlock = [];
                    var defendantAttorneytypes = [];
                    var defendantid = [];
                    var plaintiffBlock = [];

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';

                    _.forEach(vm.uniqDefendantAttorneyids, function (data) {
                        if (angular.isDefined(data.contactid)) {
                            DefendantAttorneyBlock.push(parseInt(data.contactid));
                            defendantAttorneytypes.push(data.contact_type);
                        }
                    })

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantid.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    plaintiffBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;

                    if (utils.isNotEmptyVal(vm.plaintiff_dropdown)) {
                        _.forEach(vm.plaintiff_dropdown, function (data) {
                            if (angular.isDefined(data.plaintiffid)) {
                                plaintiffBlock.push(parseInt(data.plaintiffid));
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        defendantId: utils.isNotEmptyVal(defendantid) ? defendantid : [0],
                        defendantAttorneyId: angular.isDefined(DefendantAttorneyBlock) ? DefendantAttorneyBlock : [0],
                        defendantAttorneyTypes: angular.isDefined(defendantAttorneytypes) ? defendantAttorneytypes : ['Local'],
                        captionId: [captionDoc1],
                        plaintiffAttorneyId: angular.isDefined(params.plaintiffAttorney) ? [parseInt(params.plaintiffAttorney.contactid)] : [0],
                        plaintiffAttorneyType: angular.isDefined(params.plaintiffAttorney) ? [(params.plaintiffAttorney.contact_type)] : ['Local'],
                        BAR_NUMBER: (utils.isNotEmptyVal(params.plaintiffAttorney) && utils.isNotEmptyVal(params.plaintiffAttorney.contact_note)) ? (params.plaintiffAttorney.contact_note) : '{BAR_NUMBER}'
                    }
                    break;

                case "F1473_10":
                    var plaintiffBlock = [];
                    var defendantBlock = [];

                    plaintiffBlock[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;

                    if (params.plaintiffs != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffBlock.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantBlock.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffBlock) ? plaintiffBlock : [0],
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0],
                        DOCUMENT_NAME: angular.isDefined(params.leftTxtTwo) ? params.leftTxtTwo : '{DOCUMENT_NAME}'
                    }
                    break;

                case "F1316_76":
                    var plaintiffAll = [];
                    var defendantAll = [];

                    plaintiffAll[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;

                    if (params.plaintiffs != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffAll.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantAll.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffAll) ? plaintiffAll : [0],
                        defendantId: utils.isNotEmptyVal(defendantAll) ? defendantAll : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        mediatorId: angular.isDefined(params.mediators) ? [parseInt(params.mediators.contactid)] : [0],
                        mediatorType: angular.isDefined(params.mediators) ? [params.mediators.contact_type] : [''],
                        COURT_CERT_OF_SERVICE: angular.isDefined(params.courtCert) ? params.courtCert : '{COURT_CERT_OF_SERVICE}',
                        BAR_NUMBER: angular.isDefined(params.barNumber) ? params.barNumber : '{BAR_NUMBER}'
                    }
                    break;

                case "F1447_60":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        CIRCUIT_NUMBER: angular.isDefined(params.curcuit_Number) ? params.curcuit_Number : '{CIRCUIT_NUMBER}'
                    }
                    break;

                case "F1447_61":
                    var defendantAll = [];

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantAll.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffAll) ? plaintiffAll : [0],
                        defendantId: utils.isNotEmptyVal(defendantAll) ? defendantAll : [0],
                        JUDGE_FULLNAME: angular.isDefined(params.JudgeName) ? params.JudgeName : '{JUDGE_FULLNAME}',
                        DIVISION: angular.isDefined(params.typeOfLetters) ? params.typeOfLetters : '{DIVISION}'
                    }
                    break;

                case "F1542_9":
                    var plaintiffAll = [];
                    var defendantAll = [];

                    if (vm.plaintiff_dropdown != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffAll.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantAll.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffAll) ? plaintiffAll : [0],
                        defendantId: utils.isNotEmptyVal(defendantAll) ? defendantAll : [0],
                        JUDGE_FULLNAME: angular.isDefined(params.JudgeName) ? params.JudgeName : '{JUDGE_FULLNAME}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.exhibitsDate) ? moment.unix(params.exhibitsDate).utc().format('LL') : '{DATE_SUMMONS_SERVED}',
                        DATE_SERVICE_COMPLETED: angular.isDefined(params.expertDate) ? moment.unix(params.expertDate).utc().format('LL') : '{DATE_SERVICE_COMPLETED}',
                        DATE_ISSUE_JOINED: angular.isDefined(params.plaintiffWitnessDate) ? moment.unix(params.plaintiffWitnessDate).utc().format('LL') : '{DATE_ISSUE_JOINED}',
                        ATTORNEY_ADDRESS: angular.isDefined(params.Plaintiff_attorneys_address) ? params.Plaintiff_attorneys_address : '{ATTORNEY_ADDRESS}',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ATTORNEY_RESIDENCE_COUNTY: angular.isDefined(params.AttorneyResidenceCounty) ? params.AttorneyResidenceCounty : '{ATTORNEY_RESIDENCE_COUNTY}',
                        ATTORNEY_CONTACT_NUMBER: angular.isDefined(params.attoContactNumber) ? params.attoContactNumber : '{ATTORNEY_CONTACT_NUMBER}'
                    }
                    break;

                case "F1542_10":
                    var plaintiffAll = [];
                    var defendantAll = [];

                    if (vm.plaintiff_dropdown != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffAll.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantAll.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffAll) ? plaintiffAll : [0],
                        defendantId: utils.isNotEmptyVal(defendantAll) ? defendantAll : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '{DEFENDANT_FILE_NUMBER}',
                        ATTORNEY_ADDRESS: angular.isDefined(params.Plaintiff_attorneys_address) ? params.Plaintiff_attorneys_address : '{ATTORNEY_ADDRESS}',
                    }
                    break;

                case "F1542_11":
                    var plaintiffAll = [];
                    var defendantAll = [];

                    if (vm.plaintiff_dropdown != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffAll.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantAll.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffAll) ? plaintiffAll : [0],
                        defendantId: utils.isNotEmptyVal(defendantAll) ? defendantAll : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '{DEFENDANT_FILE_NUMBER}',
                        ATTORNEY_ADDRESS: angular.isDefined(params.Plaintiff_attorneys_address) ? params.Plaintiff_attorneys_address : '{ATTORNEY_ADDRESS}',
                    }
                    break;

                case "F1542_12":

                    var plaintiffAll = [];
                    var defendantAll = [];

                    plaintiffAll[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    if (vm.plaintiff_dropdown != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffAll.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    defendantAll[0] = utils.isNotEmptyVal(params.defendant) ? parseInt(params.defendant) : 0;
                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantAll.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffAll) ? plaintiffAll : [0],
                        defendantId: utils.isNotEmptyVal(defendantAll) ? defendantAll : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        ATTORNEY_ADDRESS: angular.isDefined(params.Plaintiff_attorneys_address) ? params.Plaintiff_attorneys_address : '{ATTORNEY_ADDRESS}',
                        PLAINTIFF_RESIDENCE_COUNTY: angular.isDefined(params.PlaintiffResidenceCounty) ? params.PlaintiffResidenceCounty : '{PLAINTIFF_RESIDENCE_COUNTY}',
                        DEFENDANT_RESIDENCE_COUNTY: angular.isDefined(params.DefendantsResidenceCounty) ? params.DefendantsResidenceCounty : '{DEFENDANT_RESIDENCE_COUNTY}',
                        DEFENDENT_VEHICLE_INFORMATION: angular.isDefined(params.DefendantVehicleInformation) ? params.DefendantVehicleInformation : '{DEFENDENT_VEHICLE_INFORMATION}',
                        DEFENDANT_STATE_OF_LICENSE_PLATES: angular.isDefined(params.DefendantStateoftheLicensePlates) ? params.DefendantStateoftheLicensePlates : '{DEFENDANT_STATE_OF_LICENSE_PLATES}',
                        DEFENDANT_VEHICLE_PLATE_NUMBER: angular.isDefined(params.DefendantVehiclePlateNumber) ? params.DefendantVehiclePlateNumber : '{DEFENDANT_VEHICLE_PLATE_NUMBER}',
                        PLAINTIFF_VEHICLE_INFORMATION: angular.isDefined(params.defVehicleType) ? params.defVehicleType : '{PLAINTIFF_VEHICLE_INFORMATION}',
                        PLAINTIFF_STATE_OF_LICENSE_PLATES: angular.isDefined(params.PlaintiffStateoftheLicensePlates) ? params.PlaintiffStateoftheLicensePlates : '{PLAINTIFF_STATE_OF_LICENSE_PLATES}',
                        PLAINTIFF_VEHICLE_PLATE_NUMBER: angular.isDefined(params.PlaintiffVehiclePlateNumber) ? params.PlaintiffVehiclePlateNumber : '{PLAINTIFF_VEHICLE_PLATE_NUMBER}',
                        LOCATION_OF_ACCIDENT_COUNTY: angular.isDefined(params.CountyoftheLocationofAccident) ? params.CountyoftheLocationofAccident : '{LOCATION_OF_ACCIDENT_COUNTY}',
                        LOCATION_OF_ACCIDENT_CITY: angular.isDefined(params.leftTxtThree) ? params.leftTxtThree : '{LOCATION_OF_ACCIDENT_CITY}',
                        LOCATION_OF_ACCIDENT_STATE: angular.isDefined(params.leftTxtFour) ? params.leftTxtFour : '{LOCATION_OF_ACCIDENT_STATE}',
                        LOCATION_OF_ACCIDENT_INTERSECTION: angular.isDefined(params.locationAccident) ? params.locationAccident : '{LOCATION_OF_ACCIDENT_INTERSECTION}',
                    }
                    break;

                case "F1542_13":
                    var plaintiffAll = [];
                    var defendantAll = [];

                    plaintiffAll[0] = angular.isDefined(params.plaintiff) ? parseInt(params.plaintiff.plaintiffid) : 0;
                    if (vm.plaintiff_dropdown != undefined) {
                        _.forEach(vm.plaintiff_dropdown, function (currentItem) {
                            if (currentItem.plaintiffid != null) {
                                plaintiffAll.push(parseInt(currentItem.plaintiffid));
                            }
                        })
                    }

                    defendantAll[0] = utils.isNotEmptyVal(params.defendant) ? params.defendant : 0;
                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantAll.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(plaintiffAll) ? plaintiffAll : [0],
                        defendantId: utils.isNotEmptyVal(defendantAll) ? defendantAll : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        COUNTY_ADDRESS: angular.isDefined(params.County_Address) ? params.County_Address : '{COUNTY_ADDRESS}',
                        DEFAULT_JUDGMENT_SCHEDULED_DATE: angular.isDefined(params.Default_judgment_scheduled_date) ? moment.unix(params.Default_judgment_scheduled_date).utc().format('L') : '{DEFAULT_JUDGMENT_SCHEDULED_DATE}',
                        ATTORNEY_ADDRESS: angular.isDefined(params.Plaintiff_attorneys_address) ? params.Plaintiff_attorneys_address : '{ATTORNEY_ADDRESS}',
                        DEFENDANT_FILE_NUMBER: angular.isDefined(params.defendantFileNumber) ? params.defendantFileNumber : '{DEFENDANT_FILE_NUMBER}',
                        DESCRIPTION_OF_INCIDENT: angular.isDefined(params.Description_of_Incident) ? params.Description_of_Incident : '{DESCRIPTION_OF_INCIDENT}',
                        ATTORNEY_RESIDENCE_COUNTY: angular.isDefined(params.AttorneyResidenceCounty) ? params.AttorneyResidenceCounty : '{ATTORNEY_RESIDENCE_COUNTY}',
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        ATTORNEY_CONTACT_NUMBER: angular.isDefined(params.attoContactNumber) ? params.attoContactNumber : '{ATTORNEY_CONTACT_NUMBER}',

                    }
                    break;

                case "F1473_21":

                    var data;
                    if (params.communicationMethod_1 && params.communicationMethod_1.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.witnessName) && utils.isNotEmptyVal(params.witnessName.fax_numbers)) ? params.witnessName.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    }
                    else if (params.communicationMethod_1 && params.communicationMethod_1.id == "Email") {
                        data = (utils.isNotEmptyVal(params.witnessName) && utils.isNotEmptyVal(params.witnessName.emailid)) ? params.witnessName.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        CHECK_AMOUNT: utils.isNotEmptyVal(params.checkAmount) ? params.checkAmount : '{CHECK_AMOUNT}',
                        CHECK_NUMBERS: angular.isDefined(params.checkNumber) ? params.checkNumber : "{CHECK_NUMBERS}",
                        LIST_OF_ALL_DOCUMENTS: angular.isDefined(params.List_of_all_documents) ? params.List_of_all_documents : "{LIST_OF_ALL_DOCUMENTS}",
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}"
                    }
                    break;

                case "F1473_12":

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : [''],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        SERVED_PERSON_NAME: utils.isNotEmptyVal(params.ServedPersonName) ? params.ServedPersonName : '{SERVED_PERSON_NAME}',
                        SERVED_PERSON_CITY: utils.isNotEmptyVal(params.ServedPersonCity) ? params.ServedPersonCity : '{SERVED_PERSON_CITY}',
                        DOCUMENT_NAME: utils.isNotEmptyVal(params.leftTxtTwo) ? params.leftTxtTwo : '{DOCUMENT_NAME}',
                    }
                    break;

                case "F1473_24":

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm1) ? parseInt(params.defendantLawFirm1.contactid) : 0;
                    defAttorney[1] = angular.isDefined(params.defendantLawFirm2) ? parseInt(params.defendantLawFirm2.contactid) : 0;
                    defAttorney[2] = angular.isDefined(params.defendantLawFirm3) ? parseInt(params.defendantLawFirm3.contactid) : 0;
                    defAttorney[3] = angular.isDefined(params.defendantLawFirm4) ? parseInt(params.defendantLawFirm4.contactid) : 0;
                    defAttorney[4] = angular.isDefined(params.defendantLawFirm5) ? parseInt(params.defendantLawFirm5.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm1) ? params.defendantLawFirm1.contact_type : 0;
                    defAttorneyType[1] = angular.isDefined(params.defendantLawFirm2) ? params.defendantLawFirm2.contact_type : 0;
                    defAttorneyType[2] = angular.isDefined(params.defendantLawFirm3) ? params.defendantLawFirm3.contact_type : 0;
                    defAttorneyType[3] = angular.isDefined(params.defendantLawFirm4) ? params.defendantLawFirm4.contact_type : 0;
                    defAttorneyType[4] = angular.isDefined(params.defendantLawFirm5) ? params.defendantLawFirm5.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm1 != undefined) {
                        _.forEach(params.defendantLawFirm1.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids2 = [];
                    if (params.defendantLawFirm2 != undefined) {
                        _.forEach(params.defendantLawFirm2.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids2.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids3 = [];
                    if (params.defendantLawFirm3 != undefined) {
                        _.forEach(params.defendantLawFirm3.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids3.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids4 = [];
                    if (params.defendantLawFirm4 != undefined) {
                        _.forEach(params.defendantLawFirm4.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids4.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids5 = [];
                    if (params.defendantLawFirm5 != undefined) {
                        _.forEach(params.defendantLawFirm5.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids5.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : [0],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        DEFENDANT_NAME_SECONDARY: utils.isNotEmptyVal(defendantids2) ? defendantids2.join(', ') : '{DEFENDANT_NAME_SECONDARY}',
                        DEFENDANT_NAME_TERNARY: utils.isNotEmptyVal(defendantids3) ? defendantids3.join(', ') : '{DEFENDANT_NAME_TERNARY}',
                        DEFENDANT_NAME_QUATERNARY: utils.isNotEmptyVal(defendantids4) ? defendantids4.join(', ') : '{DEFENDANT_NAME_QUATERNARY}',
                        DEFENDANT_NAME_QUINARY: utils.isNotEmptyVal(defendantids5) ? defendantids5.join(', ') : '{DEFENDANT_NAME_QUINARY}',
                        RETURN_DATE: angular.isDefined(params.return_date) ? moment.unix(params.return_date).utc().format('LL') : '{RETURN_DATE}',
                        ADJOURNED_DATE: angular.isDefined(params.date_of_adjournment) ? moment.unix(params.date_of_adjournment).utc().format('LL') : '{ADJOURNED_DATE}',
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        JUDGE_FULLNAME: utils.isNotEmptyVal(params.JudgeName) ? params.JudgeName : '{JUDGE_FULLNAME}',
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;

                case "F1473_25":

                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc2 = parseInt(params.captionDocumentId2) : '';

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm1) ? parseInt(params.defendantLawFirm1.contactid) : 0;
                    defAttorney[1] = angular.isDefined(params.defendantLawFirm2) ? parseInt(params.defendantLawFirm2.contactid) : 0;
                    defAttorney[2] = angular.isDefined(params.defendantLawFirm3) ? parseInt(params.defendantLawFirm3.contactid) : 0;
                    defAttorney[3] = angular.isDefined(params.defendantLawFirm4) ? parseInt(params.defendantLawFirm4.contactid) : 0;
                    defAttorney[4] = angular.isDefined(params.defendantLawFirm5) ? parseInt(params.defendantLawFirm5.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm1) ? params.defendantLawFirm1.contact_type : 0;
                    defAttorneyType[1] = angular.isDefined(params.defendantLawFirm2) ? params.defendantLawFirm2.contact_type : 0;
                    defAttorneyType[2] = angular.isDefined(params.defendantLawFirm3) ? params.defendantLawFirm3.contact_type : 0;
                    defAttorneyType[3] = angular.isDefined(params.defendantLawFirm4) ? params.defendantLawFirm4.contact_type : 0;
                    defAttorneyType[4] = angular.isDefined(params.defendantLawFirm5) ? params.defendantLawFirm5.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm1 != undefined) {
                        _.forEach(params.defendantLawFirm1.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids2 = [];
                    if (params.defendantLawFirm2 != undefined) {
                        _.forEach(params.defendantLawFirm2.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids2.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids3 = [];
                    if (params.defendantLawFirm3 != undefined) {
                        _.forEach(params.defendantLawFirm3.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids3.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids4 = [];
                    if (params.defendantLawFirm4 != undefined) {
                        _.forEach(params.defendantLawFirm4.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids4.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids5 = [];
                    if (params.defendantLawFirm5 != undefined) {
                        _.forEach(params.defendantLawFirm5.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids5.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1, captionDoc2],
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : [0],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        DEFENDANT_NAME_SECONDARY: utils.isNotEmptyVal(defendantids2) ? defendantids2.join(', ') : '{DEFENDANT_NAME_SECONDARY}',
                        DEFENDANT_NAME_TERNARY: utils.isNotEmptyVal(defendantids3) ? defendantids3.join(', ') : '{DEFENDANT_NAME_TERNARY}',
                        DEFENDANT_NAME_QUATERNARY: utils.isNotEmptyVal(defendantids4) ? defendantids4.join(', ') : '{DEFENDANT_NAME_QUATERNARY}',
                        DEFENDANT_NAME_QUINARY: utils.isNotEmptyVal(defendantids5) ? defendantids5.join(', ') : '{DEFENDANT_NAME_QUINARY}',
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;

                case "F1473_26":

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm1) ? parseInt(params.defendantLawFirm1.contactid) : 0;
                    defAttorney[1] = angular.isDefined(params.defendantLawFirm2) ? parseInt(params.defendantLawFirm2.contactid) : 0;
                    defAttorney[2] = angular.isDefined(params.defendantLawFirm3) ? parseInt(params.defendantLawFirm3.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm1) ? params.defendantLawFirm1.contact_type : 0;
                    defAttorneyType[1] = angular.isDefined(params.defendantLawFirm2) ? params.defendantLawFirm2.contact_type : 0;
                    defAttorneyType[2] = angular.isDefined(params.defendantLawFirm3) ? params.defendantLawFirm3.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm1 != undefined) {
                        _.forEach(params.defendantLawFirm1.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids2 = [];
                    if (params.defendantLawFirm2 != undefined) {
                        _.forEach(params.defendantLawFirm2.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids2.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids3 = [];
                    if (params.defendantLawFirm3 != undefined) {
                        _.forEach(params.defendantLawFirm3.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids3.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : [0],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        DEFENDANT_NAME_SECONDARY: utils.isNotEmptyVal(defendantids2) ? defendantids2.join(', ') : '{DEFENDANT_NAME_SECONDARY}',
                        DEFENDANT_NAME_TERNARY: utils.isNotEmptyVal(defendantids3) ? defendantids3.join(', ') : '{DEFENDANT_NAME_TERNARY}',
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        JUDGE_FULLNAME: utils.isNotEmptyVal(params.JudgeName) ? params.JudgeName : '{JUDGE_FULLNAME}',
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;

                case "F1473_27":

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm1) ? parseInt(params.defendantLawFirm1.contactid) : 0;
                    defAttorney[1] = angular.isDefined(params.defendantLawFirm2) ? parseInt(params.defendantLawFirm2.contactid) : 0;
                    defAttorney[2] = angular.isDefined(params.defendantLawFirm3) ? parseInt(params.defendantLawFirm3.contactid) : 0;
                    defAttorney[3] = angular.isDefined(params.defendantLawFirm4) ? parseInt(params.defendantLawFirm4.contactid) : 0;
                    defAttorney[4] = angular.isDefined(params.defendantLawFirm5) ? parseInt(params.defendantLawFirm5.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm1) ? params.defendantLawFirm1.contact_type : 0;
                    defAttorneyType[1] = angular.isDefined(params.defendantLawFirm2) ? params.defendantLawFirm2.contact_type : 0;
                    defAttorneyType[2] = angular.isDefined(params.defendantLawFirm3) ? params.defendantLawFirm3.contact_type : 0;
                    defAttorneyType[3] = angular.isDefined(params.defendantLawFirm4) ? params.defendantLawFirm4.contact_type : 0;
                    defAttorneyType[4] = angular.isDefined(params.defendantLawFirm5) ? params.defendantLawFirm5.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm1 != undefined) {
                        _.forEach(params.defendantLawFirm1.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids2 = [];
                    if (params.defendantLawFirm2 != undefined) {
                        _.forEach(params.defendantLawFirm2.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids2.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids3 = [];
                    if (params.defendantLawFirm3 != undefined) {
                        _.forEach(params.defendantLawFirm3.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids3.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids4 = [];
                    if (params.defendantLawFirm4 != undefined) {
                        _.forEach(params.defendantLawFirm4.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids4.push(currentItem.name);
                            }
                        })
                    }
                    var defendantids5 = [];
                    if (params.defendantLawFirm5 != undefined) {
                        _.forEach(params.defendantLawFirm5.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids5.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : [0],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        DEFENDANT_NAME_SECONDARY: utils.isNotEmptyVal(defendantids2) ? defendantids2.join(', ') : '{DEFENDANT_NAME_SECONDARY}',
                        DEFENDANT_NAME_TERNARY: utils.isNotEmptyVal(defendantids3) ? defendantids3.join(', ') : '{DEFENDANT_NAME_TERNARY}',
                        DEFENDANT_NAME_QUATERNARY: utils.isNotEmptyVal(defendantids4) ? defendantids4.join(', ') : '{DEFENDANT_NAME_QUATERNARY}',
                        DEFENDANT_NAME_QUINARY: utils.isNotEmptyVal(defendantids5) ? defendantids5.join(', ') : '{DEFENDANT_NAME_QUINARY}',
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        DATE_FOR_NOI_EXTENSION: angular.isDefined(params.dateForNOIExtension) ? moment.unix(params.dateForNOIExtension).utc().format('LL') : '{DATE_FOR_NOI_EXTENSION}'
                    }
                    break;

                case "F1473_28":

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : [0],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        WITNESS_SPECIALTY: utils.isEmptyVal((params.witnessName) && (params.witnessName.specialty)) ? '{WITNESS_SPECIALTY}' : (params.witnessName.specialty),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        REPORT_DATE: angular.isDefined(params.reportDate) ? moment.unix(params.reportDate).utc().format('LL') : '{REPORT_DATE}',
                        UDMC_EXPERTS: utils.isNotEmptyVal(params.UDMCExpert) ? params.UDMCExpert : '{UDMC_EXPERTS}',
                        DESCRIPTION_OF_SURGICAL_PROCEDURE: utils.isNotEmptyVal(params.DescriptionOfSurgicalProcedure) ? params.DescriptionOfSurgicalProcedure : '{DESCRIPTION_OF_SURGICAL_PROCEDURE}',
                        DATE_OF_SURGERY: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SURGERY}',
                        BODY_PART: angular.isDefined(params.leftTxtFive) ? (params.leftTxtFive) : '{BODY_PART}',
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                        USER_CITY: angular.isDefined(params.theCityOfTheAttorneyUser) ? (params.theCityOfTheAttorneyUser) : '{USER_CITY}'
                    }
                    break;

                case "F1473_29":

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : [0],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        EFFECTIVE_DATE: angular.isDefined(params.EffectiveDate) ? moment.unix(params.EffectiveDate).utc().format('LL') : '{EFFECTIVE_DATE}',
                        ATTORNEY_OLD_FIRM_NAME: utils.isNotEmptyVal(params.attorneyOldFirmName) ? params.attorneyOldFirmName : '{ATTORNEY_OLD_FIRM_NAME}',
                        ATTORNEY_NEW_FIRM_NAME: utils.isNotEmptyVal(params.attorneyNewFirmName) ? params.attorneyNewFirmName : '{ATTORNEY_NEW_FIRM_NAME}',
                        ATTORNEY_NEW_FIRM_ADDRESS: utils.isNotEmptyVal(params.attorneyNewFirmAddress) ? params.attorneyNewFirmAddress : '{ATTORNEY_NEW_FIRM_ADDRESS}',
                        ATTORNEY_NEW_FIRM_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyNewFirmContactNumber) ? params.attorneyNewFirmContactNumber : '{ATTORNEY_NEW_FIRM_CONTACT_NUMBER}',
                    }
                    break;

                case "F1473_30":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : [0],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        DATE_OF_ORDER: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('LL') : '{DATE_OF_ORDER}',
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        medicalTreatmentIds: angular.isDefined(params.physicianids) ? [parseInt(params.physicianids.medicaltreatmentid)] : [0],
                        TYPE_OF_PHOTOGRAPHS: utils.isNotEmptyVal(params.PhotographsType) ? params.PhotographsType : '{TYPE_OF_PHOTOGRAPHS}',
                        EMPLOYMENT_RECORDS: utils.isNotEmptyVal(params.EmploymentRecords) ? params.EmploymentRecords : '{EMPLOYMENT_RECORDS}',
                        noFaultInsuranceNameId: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        insuranceIds: angular.isDefined(params.onlyInsuranceId2) ? [parseInt(params.onlyInsuranceId2.insuranceid)] : 0,
                        ATTORNEY_RESIDENCE_COUNTY: angular.isDefined(params.AttorneyResidenceCounty) ? params.AttorneyResidenceCounty : '{ATTORNEY_RESIDENCE_COUNTY}',
                        ATTORNEY_LAW_FIRM_ADDRESS: utils.isNotEmptyVal(params.leftTxtFive) ? params.leftTxtFive : '{ATTORNEY_LAW_FIRM_ADDRESS}',
                    }
                    break;

                case "F1473_31":

                    var captionDoc1 = 0;
                    angular.isDefined(params.captionDocumentId1) ? captionDoc1 = parseInt(params.captionDocumentId1) : '';

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: [captionDoc1],
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : [0],
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [parseInt(params.defendant)] : [0],
                        DEFENDANT_DEMAND_DATE: angular.isDefined(params.DateofDefendantDemands) ? moment.unix(params.DateofDefendantDemands).utc().format('LL') : '{DEFENDANT_DEMAND_DATE}',
                        UDMC_COMBINED_RESPONSE: utils.isNotEmptyVal(params.UDMCCombinedResponse) ? params.UDMCCombinedResponse : '{UDMC_COMBINED_RESPONSE}',
                    }
                    break;

                case "F1473_32":

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : 'Local';

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        defendantAttorneyId: utils.isNotEmptyVal(defAttorney) ? defAttorney : [0],
                        defendantAttorneyTypes: utils.isNotEmptyVal(defAttorneyType) ? defAttorneyType : 'Local',
                        DEFENDANT_NAME_ALL: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_ALL}',
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        ATTORNEY_STREET: utils.isNotEmptyVal(params.attorneyStreet) ? params.attorneyStreet : '{ATTORNEY_STREET}',
                        ATTORNEY_CITY: utils.isNotEmptyVal(params.attorneyCity) ? params.attorneyCity : '{ATTORNEY_CITY}',
                        ATTORNEY_STATE: utils.isNotEmptyVal(params.attorneyState) ? params.attorneyState : '{ATTORNEY_STATE}',
                        ATTORNEY_ZIP: utils.isNotEmptyVal(params.attorneyZip) ? params.attorneyZip : '{ATTORNEY_ZIP}',
                        ATTORNEY_CONTACT_NUMBER: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : '{ATTORNEY_CONTACT_NUMBER}',
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        CALENDAR_NUMBER: utils.isNotEmptyVal(params.calenderNumber) ? params.calenderNumber : '{CALENDAR_NUMBER}',
                        JUDGE_FULLNAME: utils.isNotEmptyVal(params.JudgeName) ? params.JudgeName : '{JUDGE_FULLNAME}',
                        DATE_SUMMONS_SERVED: angular.isDefined(params.exhibitsDate) ? moment.unix(params.exhibitsDate).utc().format('LL') : '{DATE_SUMMONS_SERVED}',
                        DATE_SERVICE_COMPLETED: angular.isDefined(params.expertDate) ? moment.unix(params.expertDate).utc().format('LL') : '{DATE_SERVICE_COMPLETED}',
                        DATE_ISSUE_JOINED: angular.isDefined(params.plaintiffWitnessDate) ? moment.unix(params.plaintiffWitnessDate).utc().format('LL') : '{DATE_ISSUE_JOINED}',
                        TOT_DEMAND_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? $filter('currency')(params.amountInNumbers4, '', 2) : '{TOT_DEMAND_AMOUNT_IN_NUMBERS}',
                        OTHER_RELIEF_DEMANDED: utils.isNotEmptyVal(params.otherReliefDemanded) ? params.otherReliefDemanded : '{OTHER_RELIEF_DEMANDED}',
                        insuranceIds: angular.isDefined(params.onlyInsuranceId2) ? [parseInt(params.onlyInsuranceId2.insuranceid)] : 0,
                        SPECIAL_PREFERENCE_CLAIMED_INFO: utils.isNotEmptyVal(params.SpecialPreferenceClaimedInfo) ? params.SpecialPreferenceClaimedInfo : '{SPECIAL_PREFERENCE_CLAIMED_INFO}',
                        GROUNDS_FOR_SPECIAL_PREFERENCE: utils.isNotEmptyVal(params.GroundsforSpecialPreference) ? params.GroundsforSpecialPreference : '{GROUNDS_FOR_SPECIAL_PREFERENCE}',
                        DATE_OF_ORDER: angular.isDefined(params.service_Date) ? moment.unix(params.service_Date).utc().format('LL') : '{DATE_OF_ORDER}',
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        eventId: angular.isDefined(params.othereventid) ? parseInt(params.othereventid) : 0,
                    }
                    break;

                case "F1074_27":

                    //Get Physicians
                    var medicalTreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicalTreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        }
                        else {
                            medicalTreatmentIds = 0;
                        }
                    }
                    else {
                        medicalTreatmentIds = 0;
                    }

                    //Get Medical Provider Depend on Physicians
                    // var medicalproviderid;
                    // if (params.PhysicianprovideridJava != undefined) {
                    //     if (angular.isDefined(params.PhysicianprovideridJava.physician) && utils.isNotEmptyVal(params.PhysicianprovideridJava.medical_provider)) {
                    //         medicalproviderid = params.PhysicianprovideridJava.medical_provider.contact_id;
                    //     }
                    //     else {
                    //         medicalproviderid = 0;
                    //     }
                    // }
                    // else {
                    //     medicalproviderid = 0;
                    // }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalTreatmentIds: [medicalTreatmentIds],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: ["Local"],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                    }
                    break;

                case "F1455_4":

                    //Get Physicians
                    var medicalTreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicalTreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        }
                        else {
                            medicalTreatmentIds = 0;
                        }
                    }
                    else {
                        medicalTreatmentIds = 0;
                    }

                    //Get Medical Provider Depend on Physicians
                    var medicalproviderid;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician) && utils.isNotEmptyVal(params.PhysicianprovideridJava.medical_provider)) {
                            medicalproviderid = params.PhysicianprovideridJava.medical_provider.contact_id;
                        }
                        else {
                            medicalproviderid = 0;
                        }
                    }
                    else {
                        medicalproviderid = 0;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalTreatmentIds: [medicalTreatmentIds],
                        medicalproviderid: [medicalproviderid],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                    }
                    break;

                case "F1455_7":

                    //Get Physicians
                    var medicalTreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicalTreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        }
                        else {
                            medicalTreatmentIds = 0;
                        }
                    }
                    else {
                        medicalTreatmentIds = 0;
                    }

                    //Get Medical Provider Depend on Physicians
                    var medicalproviderid;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician) && utils.isNotEmptyVal(params.PhysicianprovideridJava.medical_provider)) {
                            medicalproviderid = params.PhysicianprovideridJava.medical_provider.contact_id;
                        }
                        else {
                            medicalproviderid = 0;
                        }
                    }
                    else {
                        medicalproviderid = 0;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        medicalTreatmentIds: [medicalTreatmentIds],
                        medicalproviderid: [medicalproviderid],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;

                case "F1455_8":

                    //Get Physicians
                    var medicalTreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicalTreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        }
                        else {
                            medicalTreatmentIds = 0;
                        }
                    }
                    else {
                        medicalTreatmentIds = 0;
                    }

                    //Get Medical Provider Depend on Physicians
                    var medicalproviderid;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician) && utils.isNotEmptyVal(params.PhysicianprovideridJava.medical_provider)) {
                            medicalproviderid = params.PhysicianprovideridJava.medical_provider.contact_id;
                        }
                        else {
                            medicalproviderid = 0;
                        }
                    }
                    else {
                        medicalproviderid = 0;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        medicalTreatmentIds: [medicalTreatmentIds],
                        medicalproviderid: [medicalproviderid],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;

                case "F1455_9":

                    //Get Physicians
                    var medicalTreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicalTreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        }
                        else {
                            medicalTreatmentIds = 0;
                        }
                    }
                    else {
                        medicalTreatmentIds = 0;
                    }

                    //Get Medical Provider Depend on Physicians
                    var medicalproviderid;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician) && utils.isNotEmptyVal(params.PhysicianprovideridJava.medical_provider)) {
                            medicalproviderid = params.PhysicianprovideridJava.medical_provider.contact_id;
                        }
                        else {
                            medicalproviderid = 0;
                        }
                    }
                    else {
                        medicalproviderid = 0;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalTreatmentIds: [medicalTreatmentIds],
                        medicalproviderid: [medicalproviderid],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                    }
                    break;

                case "F1455_11":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var physicanID = [0];
                    if (params.medicalproviderid != undefined) {
                        if (utils.isNotEmptyVal(params.medicalproviderid.physicianid)) {
                            physicanID = [parseInt(params.medicalproviderid.physicianid.medicaltreatmentid)];
                        }
                        else {
                            physicanID = [0];
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined((params.medicalproviderid) && (params.medicalproviderid.providerid)) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: [type],
                        medicalTreatmentIds: physicanID,
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        BODY_PART: angular.isDefined(params.leftTxtFive) ? (params.leftTxtFive) : '{BODY_PART}',
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                    }
                    break;

                case "F1455_12":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        eventId: angular.isDefined(params.trialeventid) ? parseInt(params.trialeventid) : 0,
                        paralegalId: angular.isDefined(params.paralegalid) ? [parseInt(params.paralegalid)] : [0],
                    }
                    break;

                case "F1563_1":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.providerid.faxnumber)) ? params.medicalproviderid.providerid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    }
                    else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.providerid.emailid)) ? params.medicalproviderid.providerid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: [type],
                        medicalBillId: angular.isDefined(params.medicalproviderid) && angular.isDefined(params.medicalproviderid.providerid.medicalbillid) ? [parseInt(params.medicalproviderid.providerid.medicalbillid)] : [0],
                        medicalBillType: ['Local'],
                        AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? $filter('currency')(params.amountInNumbers4, '', 2) : '{AMOUNT_IN_NUMBERS}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        PERCENT_REDUCTION: angular.isDefined(params.CountyoftheLocationofAccident) ? params.CountyoftheLocationofAccident : '{PERCENT_REDUCTION}',
                        BILLING_DEPARTMENT_CONTACT_NAME: angular.isDefined(params.rightTxtSix) ? params.rightTxtSix : '{BILLING_DEPARTMENT_CONTACT_NAME}',

                    }
                    break;

                case "F1563_2":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        contactId: angular.isDefined(params.otherPartyPhysician) ? [parseInt(params.otherPartyPhysician.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherPartyPhysician) ? [params.otherPartyPhysician.contact_type] : '',
                        eventId: angular.isDefined(params.othereventid) ? parseInt(params.othereventid) : 0,
                    }
                    break;

                case "F1563_3":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [params.defendant] : [0],
                        medicalBillId: (angular.isDefined(params.medicalproviderid) && angular.isDefined(params.medicalproviderid.providerid.medicalbillid)) ? [parseInt(params.medicalproviderid.providerid.medicalbillid)] : [0],
                        medicalprovidertype: [type],
                        medicalBillType: ['Local'],
                        PFS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? $filter('currency')(params.amountInNumbers4, '', 2) : '{PFS_AMOUNT_IN_NUMBERS}',
                    }
                    break;

                case "F1563_4":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [params.defendant] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.providerid.contactid)] : [0],
                        medicalprovidertype: [type],
                        medicalBillId: angular.isDefined(params.medicalproviderid) && angular.isDefined(params.medicalproviderid.providerid.medicalbillid) ? [parseInt(params.medicalproviderid.providerid.medicalbillid)] : [0],
                        medicalBillType: ['Local'],
                        PFS_AMOUNT_IN_NUMBERS: angular.isDefined(params.amountInNumbers4) ? $filter('currency')(params.amountInNumbers4, '', 2) : '{PFS_AMOUNT_IN_NUMBERS}',
                    }
                    break;

                case "F1563_6":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    }
                    else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1563_7":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.faxnumber)) ? params.otherpartycontactid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    }
                    else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.emailid)) ? params.otherpartycontactid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [params.defendant] : [0],
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : [''],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1563_10":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        defendantId: angular.isDefined(params.defendant) ? [params.defendant] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1528_1":

                    var negotiationId = 0;
                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2) && utils.isNotEmptyVal(params.plaintiffInsuranceIds2.settlement_calculators)) {
                        _.forEach(params.plaintiffInsuranceIds2.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                negotiationId = data.negotiation_id;
                            }
                        })
                    }

                    var currentLiens;
                    var totalLiens = 0;
                    _.forEach(vm.matterLiens.liens, function (currentItem) {
                        if (currentItem.lienamount != "" && currentItem.lienamount != null) {
                            currentLiens = parseFloat(currentItem.lienamount);
                            totalLiens += currentLiens;
                        }
                    });

                    var totalOriginalBillAmt;
                    var totalNewBillAmt;

                    var newBillAmt1 = angular.isDefined(params.newBillAmt1) ? parseFloat(params.newBillAmt1) : 0;
                    var newBillAmt2 = angular.isDefined(params.newBillAmt2) ? parseFloat(params.newBillAmt2) : 0;
                    var newBillAmt3 = angular.isDefined(params.newBillAmt3) ? parseFloat(params.newBillAmt3) : 0;
                    var newBillAmt4 = angular.isDefined(params.newBillAmt4) ? parseFloat(params.newBillAmt4) : 0;
                    var newBillAmt5 = angular.isDefined(params.newBillAmt5) ? parseFloat(params.newBillAmt5) : 0;
                    totalNewBillAmt = newBillAmt1 + newBillAmt2 + newBillAmt3 + newBillAmt4 + newBillAmt5;

                    var originalBillAmt1 = angular.isDefined(params.originalBillAmt1) ? parseFloat(params.originalBillAmt1) : 0;
                    var originalBillAmt2 = angular.isDefined(params.originalBillAmt2) ? parseFloat(params.originalBillAmt2) : 0;
                    var originalBillAmt3 = angular.isDefined(params.originalBillAmt3) ? parseFloat(params.originalBillAmt3) : 0;
                    var originalBillAmt4 = angular.isDefined(params.originalBillAmt4) ? parseFloat(params.originalBillAmt4) : 0;
                    var originalBillAmt5 = angular.isDefined(params.originalBillAmt5) ? parseFloat(params.originalBillAmt5) : 0;
                    totalOriginalBillAmt = (originalBillAmt1 + originalBillAmt2 + originalBillAmt3 + originalBillAmt4 + originalBillAmt5) - (totalLiens);

                    var plaintiffRecoveryAmt = 0;
                    _.forEach(vm.settlementInfo, function (data) {
                        if (angular.isDefined(params.plaintiff) && utils.isNotEmptyVal(params.plaintiff.plaintiffid) && data.plaintiff_id == params.plaintiff.plaintiffid) {
                            _.forEach(data.settlement_negotiations, function (item) {
                                _.forEach(item.settlement_calculators, function (item1) {
                                    if (item1.is_final_settlement == 1) {
                                        plaintiffRecoveryAmt += item1.client_recovery;
                                    }
                                })
                            })
                        }
                    })

                    plaintiffRecoveryAmt = $filter('currency')(plaintiffRecoveryAmt, '', 2);

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        negotiationId: [negotiationId],

                        DOCTOR_NAME_PRIMARY: angular.isDefined(params.doctorName1) ? params.doctorName1 : '{DOCTOR_NAME_PRIMARY}',
                        DOCTOR_NAME_SECONDARY: angular.isDefined(params.doctorName2) ? params.doctorName2 : '{DOCTOR_NAME_SECONDARY}',
                        DOCTOR_NAME_TERNARY: angular.isDefined(params.doctorName3) ? params.doctorName3 : '{DOCTOR_NAME_TERNARY}',
                        DOCTOR_NAME_QUATERNARY: angular.isDefined(params.doctorName4) ? params.doctorName4 : '{DOCTOR_NAME_QUATERNARY}',
                        DOCTOR_NAME_QUINARY: angular.isDefined(params.doctorName5) ? params.doctorName5 : '{DOCTOR_NAME_QUINARY}',

                        ORIGINAL_BILL_AMOUNT_PRIMARY: angular.isDefined(params.originalBillAmt1) ? $filter('currency')(params.originalBillAmt1, '', 2) : '{ORIGINAL_BILL_AMOUNT_PRIMARY}',
                        ORIGINAL_BILL_AMOUNT_SECONDARY: angular.isDefined(params.originalBillAmt2) ? $filter('currency')(params.originalBillAmt2, '', 2) : '{ORIGINAL_BILL_AMOUNT_SECONDARY}',
                        ORIGINAL_BILL_AMOUNT_TERNARY: angular.isDefined(params.originalBillAmt3) ? $filter('currency')(params.originalBillAmt3, '', 2) : '{ORIGINAL_BILL_AMOUNT_TERNARY}',
                        ORIGINAL_BILL_AMOUNT_QUATERNARY: angular.isDefined(params.originalBillAmt4) ? $filter('currency')(params.originalBillAmt4, '', 2) : '{ORIGINAL_BILL_AMOUNT_QUATERNARY}',
                        ORIGINAL_BILL_AMOUNT_QUINARY: angular.isDefined(params.originalBillAmt5) ? $filter('currency')(params.originalBillAmt5, '', 2) : '{ORIGINAL_BILL_AMOUNT_QUINARY}',

                        NEW_BILL_AMOUNT_PRIMARY: angular.isDefined(params.newBillAmt1) ? $filter('currency')(params.newBillAmt1, '', 2) : '{NEW_BILL_AMOUNT_PRIMARY}',
                        NEW_BILL_AMOUNT_SECONDARY: angular.isDefined(params.newBillAmt2) ? $filter('currency')(params.newBillAmt2, '', 2) : '{NEW_BILL_AMOUNT_SECONDARY}',
                        NEW_BILL_AMOUNT_TERNARY: angular.isDefined(params.newBillAmt3) ? $filter('currency')(params.newBillAmt3, '', 2) : '{NEW_BILL_AMOUNT_TERNARY}',
                        NEW_BILL_AMOUNT_QUATERNARY: angular.isDefined(params.newBillAmt4) ? $filter('currency')(params.newBillAmt4, '', 2) : '{NEW_BILL_AMOUNT_QUATERNARY}',
                        NEW_BILL_AMOUNT_QUINARY: angular.isDefined(params.newBillAmt5) ? $filter('currency')(params.newBillAmt5, '', 2) : '{NEW_BILL_AMOUNT_QUINARY}',

                        PHYSICIAN_COSTS: $filter('currency')(totalNewBillAmt, '', 2),
                        MED_PAYMENT_REIMBURSEMENT: $filter('currency')(totalOriginalBillAmt, '', 2),

                        SAVED_CLIENT_AMOUNT: angular.isDefined(params.clientSavedAmount) ? $filter('currency')(params.clientSavedAmount, '', 2) : '{SAVED_CLIENT_AMOUNT}',

                        AMOUNT_FROM_MED_PAY_REMEMBER: angular.isDefined(params.AmountMedPayRemember1) ? $filter('currency')(params.AmountMedPayRemember1, '', 2) : '{AMOUNT_FROM_MED_PAY_REMEMBER}',

                        AMOUNT_FROM_AT_FAULT_PARTY: angular.isDefined(params.AmountAtFaultParty) ? $filter('currency')(params.AmountAtFaultParty, '', 2) : '{AMOUNT_FROM_AT_FAULT_PARTY}',
                        FILE_SET_UP_COSTS: angular.isDefined(params.FileSetUpCosts) ? $filter('currency')(params.FileSetUpCosts, '', 2) : '{FILE_SET_UP_COSTS}',
                        POSTAGE: angular.isDefined(params.Postage) ? $filter('currency')(params.Postage, '', 2) : '{POSTAGE}',
                        COPY_FEES: angular.isDefined(params.CopyFees) ? $filter('currency')(params.CopyFees, '', 2) : '{COPY_FEES}',
                        FAXES_AND_TELEPHONE: angular.isDefined(params.FaxesTelephone) ? $filter('currency')(params.FaxesTelephone, '', 2) : '{FAXES_AND_TELEPHONE}',
                        MEDICAL_REQUEST_FEES_AND_PRIORITY_POSTAGE_FEES_FOR_MEDICAL_PAPER_WORK_DEMAND_PACKAGE: angular.isDefined(params.MedicalRequestPriorityPostage) ? $filter('currency')(params.MedicalRequestPriorityPostage, '', 2) : '{MEDICAL_REQUEST_FEES_AND_PRIORITY_POSTAGE_FEES_FOR_MEDICAL_PAPER_WORK_DEMAND_PACKAGE}',
                        COURT_FILING_FEES_AND_PERSONAL_SERVICE: angular.isDefined(params.CourtFilingFeesPersonalServiceAmount) ? $filter('currency')(params.CourtFilingFeesPersonalServiceAmount, '', 2) : '{COURT_FILING_FEES_AND_PERSONAL_SERVICE}',
                        ATTORNEY_COSTS: angular.isDefined(params.AttorneyCosts) ? $filter('currency')(params.AttorneyCosts, '', 2) : '{ATTORNEY_COSTS}',
                        CHECK_NUMBERS: angular.isDefined(params.checkNumber) ? params.checkNumber : "{CHECK_NUMBERS}",
                        PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS: utils.isNotEmptyVal(plaintiffRecoveryAmt) ? plaintiffRecoveryAmt : '{PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS}'
                    }
                    break;

                case "F1563_18":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    }
                    else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        DATE_OF_SERVICE: angular.isDefined(params.treatmentDate) ? params.treatmentDate.startEndDate1 : '{DATE_OF_SERVICE}',
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1563_19":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                    }
                    break;

                case "F1563_20":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        MEMBER_NAME: angular.isDefined(params.NameMembers) ? params.NameMembers : "{MEMBER_NAME}",
                        GROUP_NUMBER: angular.isDefined(params.GroupNumber) ? params.GroupNumber : "{GROUP_NUMBER}",
                    }
                    break;

                case "F1563_21":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                    }
                    break;

                case "F1563_22":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.faxnumber)) ? params.otherpartycontactid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.emailid)) ? params.otherpartycontactid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : [''],
                    }
                    break;

                case "F1567_6":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                    }
                    break;

                case "F1563_24":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        VIDEO_SURVEILLANCE_DATE_FROM: angular.isDefined(params.VideoSurveillanceDate) ? moment.unix(params.VideoSurveillanceDate).utc().format('LL') : '{VIDEO_SURVEILLANCE_DATE_FROM}',
                    }
                    break;

                case "F1563_25":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                    }
                    break;

                case "F1563_26":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.fax_numbers)) ? vm.plaintiffContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.plaintiffContactInfo) && utils.isNotEmptyVal(vm.plaintiffContactInfo.email_ids)) ? vm.plaintiffContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        INSURANCE_NUMBERS: angular.isDefined(params.GroupNumber) ? params.GroupNumber : "{INSURANCE_NUMBERS}",
                    }
                    break;

                case "F1563_27":

                    var type = "Local";
                    if (params.medicalproviderid != undefined) {
                        if (params.medicalproviderid.contact_type != undefined) {
                            type = (params.medicalproviderid.contact_type == "Global") ? "Global" : "Local";
                        }
                    }

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.faxnumber)) ? params.medicalproviderid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.medicalproviderid) && utils.isNotEmptyVal(params.medicalproviderid.emailid)) ? params.medicalproviderid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        CHECK_AMOUNT: utils.isNotEmptyVal(params.checkAmount) ? params.checkAmount : '{CHECK_AMOUNT}',
                        CHECK_NUMBERS: angular.isDefined(params.checkNumber) ? params.checkNumber : "{CHECK_NUMBERS}",
                    }
                    break;

                case "F1563_28":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                    }
                    break;

                case "F1563_29":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                    }
                    break;

                case "F1563_32":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        MEMBER_NAME: angular.isDefined(params.NameMembers) ? params.NameMembers : "{MEMBER_NAME}",
                        REFERENCE_NUMBER: angular.isDefined(params.attorneyAddress) ? params.attorneyAddress : "{REFERENCE_NUMBER}",
                    }
                    break;

                case "F1563_33":

                    var negotiationId = 0;
                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2) && utils.isNotEmptyVal(params.plaintiffInsuranceIds2.settlement_calculators)) {
                        _.forEach(params.plaintiffInsuranceIds2.settlement_calculators, function (data) {
                            if (data.is_final_settlement == 1) {
                                negotiationId = data.negotiation_id;
                            }
                        })
                    }

                    var currentLiens;
                    var totalLiens = 0;
                    _.forEach(vm.matterLiens.liens, function (currentItem) {
                        if (currentItem.lienamount != "" && currentItem.lienamount != null) {
                            currentLiens = parseFloat(currentItem.lienamount);
                            totalLiens += currentLiens;
                        }
                    });

                    totalLiens = $filter('currency')(totalLiens, '', 2);

                    //calculate Plaintiff Total Recovery
                    var plaintiffRecoveryAmt = 0;
                    _.forEach(vm.settlementInfo, function (data) {
                        _.forEach(data.settlement_negotiations, function (item) {
                            _.forEach(item.settlement_calculators, function (item1) {
                                if (item1.is_final_settlement == 1) {
                                    plaintiffRecoveryAmt += item1.client_recovery;
                                }
                            });
                        });

                    });
                    plaintiffRecoveryAmt = $filter('currency')(plaintiffRecoveryAmt, '', 2);

                    //calculate Attorney Total Recovery
                    var attorneyRecoveryAmt = 0;
                    _.forEach(vm.settlementInfo, function (data) {
                        _.forEach(data.settlement_negotiations, function (item) {
                            _.forEach(item.settlement_calculators, function (item1) {
                                if (item1.is_final_settlement == 1) {
                                    attorneyRecoveryAmt += item1.attorney_recovery;
                                }
                            });
                        });

                    });
                    attorneyRecoveryAmt = $filter('currency')(attorneyRecoveryAmt, '', 2);

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.faxnumber)) ? params.otherpartycontactid.faxnumber : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(params.otherpartycontactid) && utils.isNotEmptyVal(params.otherpartycontactid.emailid)) ? params.otherpartycontactid.emailid : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : ['Local'],
                        MEDICARE_NUMBER: angular.isDefined(params.rightTxtSeven) ? params.rightTxtSeven : "{MEDICARE_NUMBER}",
                        TOTAL_LIEN_AMOUNT: totalLiens,
                        PLAINTIFF_RECOVERY_AMOUNT_IN_NUMBERS: plaintiffRecoveryAmt,
                        ATTORNEY_FEE_AMOUNT_IN_NUMBERS: attorneyRecoveryAmt,
                        negotiationId: [negotiationId],
                    }
                    break;

                case "F1563_34":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                    }
                    break;

                case "F1563_35":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: utils.isNotEmptyVal(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        noFaultInsuranceNameId: angular.isDefined(params.onlyInsuranceId1) ? [parseInt(params.onlyInsuranceId1.insuranceid)] : 0,
                        defendantOperatorId: utils.isNotEmptyVal(params.defendant) ? [params.defendant] : [0],
                        defendantOwnerId: utils.isNotEmptyVal(params.defendant1) ? [params.defendant1] : [0],
                    }
                    break;

                case "F1545_2":
                    var type = 'Local';


                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        medicalTreatmentIds: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.medicaltreatmentid)] : [0],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: [type],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;

                case "F1488_7":

                    var medicalProviderID = [];
                    var medicalProviderType = [];
                    var defendantBlock = [];
                    var type = [];

                    _.forEach(vm.uniqMedicalProvidersFromBillAndInfoCopy, function (currentItem) {
                        medicalProviderID.push(parseInt(currentItem.contactid));
                        medicalProviderType.push('Local');
                    });

                    if (utils.isNotEmptyVal(vm.defendants_dropdown)) {
                        _.forEach(vm.defendants_dropdown, function (currentItem) {
                            if (currentItem.defendantid != null) {
                                defendantBlock.push(parseInt(currentItem.defendantid));
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        captionId: angular.isDefined(params.captionDocumentId) ? [parseInt(params.captionDocumentId)] : [0],
                        medicalproviderid: medicalProviderID,
                        medicalprovidertype: medicalProviderType,
                        defendantId: utils.isNotEmptyVal(defendantBlock) ? defendantBlock : [0],
                    }
                    break;

                case "F1488_8":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        contactId: angular.isDefined(params.otherpartycontactid) ? [parseInt(params.otherpartycontactid.contactid)] : [0],
                        contactTypes: angular.isDefined(params.otherpartycontactid) ? [params.otherpartycontactid.contact_type] : ['Local'],
                    }
                    break;

                case "F1559_2":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                    }
                    break;

                case "F1559_3":

                    var negotiationId = 0;
                    var insuranceId = 0;

                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2)) {
                        insuranceId = params.plaintiffInsuranceIds2.insurance_id;
                    }

                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2) && (params.plaintiffInsuranceIds2.payment_status == 1)) {
                        negotiationId = params.plaintiffInsuranceIds2.negotiation_id;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: [insuranceId],
                        negotiationId: [negotiationId],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0]
                    }
                    break;

                case "F1559_4":

                    var negotiationId = 0;
                    var insuranceId = 0;

                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2)) {
                        insuranceId = params.plaintiffInsuranceIds2.insurance_id;
                    }

                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2) && (params.plaintiffInsuranceIds2.payment_status == 1)) {
                        negotiationId = params.plaintiffInsuranceIds2.negotiation_id;
                        insuranceId = params.plaintiffInsuranceIds2.insurance_id;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: [insuranceId],
                        negotiationId: [negotiationId],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                    }
                    break;

                case "F1567_13":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1567_14":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1567_15":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;


                case "F1567_16":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                    }
                    break;

                case "F1567_17":
                    var insuranceIdBI = 0;
                    var insuranceIdUM = 0;
                    insuranceIdBI = angular.isDefined(params.onlyInsuranceId) ? parseInt(params.onlyInsuranceId.insuranceid) : 0;
                    insuranceIdUM = angular.isDefined(params.onlyInsuranceId1) ? parseInt(params.onlyInsuranceId1.insuranceid) : 0;

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: [insuranceIdBI, insuranceIdUM]
                    }
                    break;

                case "F1567_18":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1567_19":

                    var communicationType;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        communicationType = "fax"
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        communicationType = "email"
                    }

                    var negotiationId = 0;
                    var insuranceId = 0;

                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2)) {
                        insuranceId = params.plaintiffInsuranceIds2.insurance_id;
                    }

                    if (utils.isNotEmptyVal(params.plaintiffInsuranceIds2) && (params.plaintiffInsuranceIds2.payment_status == 1)) {
                        negotiationId = params.plaintiffInsuranceIds2.negotiation_id;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: [insuranceId],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        negotiationId: [negotiationId],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        communicationType: communicationType,
                    }
                    break;

                case "F1567_20":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1567_21":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1567_22":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1567_23":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : 0,
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.assignUserId) ? [parseInt(params.assignUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1077_1299":

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess()
                    }
                    break;

                case "F1567_24":

                    var data;
                    if (params.communicationMethod && params.communicationMethod.id == "Fax") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.fax_numbers)) ? vm.insuranceProviderContactInfo.fax_numbers : "{COMMUNICATION_METHOD}";
                        data = 'Fax ' + data;
                    } else if (params.communicationMethod && params.communicationMethod.id == "Email") {
                        data = (utils.isNotEmptyVal(vm.insuranceProviderContactInfo) && utils.isNotEmptyVal(vm.insuranceProviderContactInfo.email_ids)) ? vm.insuranceProviderContactInfo.email_ids : "{COMMUNICATION_METHOD}";
                        data = 'Email ' + data;
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        insuranceIds: angular.isDefined(params.onlyInsuranceId) ? [parseInt(params.onlyInsuranceId.insuranceid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                        COMMUNICATION_METHOD: utils.isNotEmptyVal(data) ? data : "{COMMUNICATION_METHOD}",
                    }
                    break;

                case "F1455_16":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId) ? captionDoc1 = parseInt(params.captionDocumentId) : '';
                    angular.isDefined(params.captionDocumentId1) ? captionDoc2 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc3 = parseInt(params.captionDocumentId2) : '';
                    var medicaltreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicaltreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        } else {
                            medicaltreatmentIds = 0;
                        }
                    } else {
                        medicaltreatmentIds = 0;
                    }
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : ['Local'],
                        medicalTreatmentIds: [medicaltreatmentIds],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids) ? defendantids.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        USER_RESIDENCE_COUNTY: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : "{USER_RESIDENCE_COUNTY}",
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                    }
                    break;

                case "F1455_17":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId) ? captionDoc1 = parseInt(params.captionDocumentId) : '';
                    angular.isDefined(params.captionDocumentId1) ? captionDoc2 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc3 = parseInt(params.captionDocumentId2) : '';
                    var medicaltreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicaltreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        } else {
                            medicaltreatmentIds = 0;
                        }
                    } else {
                        medicaltreatmentIds = 0;
                    }

                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : ['Local'],
                        medicalTreatmentIds: [medicaltreatmentIds],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids) ? defendantids.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        USER_RESIDENCE_COUNTY: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : "{USER_RESIDENCE_COUNTY}",
                        BODY_PART: utils.isNotEmptyVal(params.attorneyNewFirmAddress) ? params.attorneyNewFirmAddress : "{BODY_PART}",
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                    }
                    break;

                case "F1455_18":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    var captionDoc3 = 0;
                    angular.isDefined(params.captionDocumentId) ? captionDoc1 = parseInt(params.captionDocumentId) : '';
                    angular.isDefined(params.captionDocumentId1) ? captionDoc2 = parseInt(params.captionDocumentId1) : '';
                    angular.isDefined(params.captionDocumentId2) ? captionDoc3 = parseInt(params.captionDocumentId2) : '';
                    var medicaltreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicaltreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        } else {
                            medicaltreatmentIds = 0;
                        }
                    } else {
                        medicaltreatmentIds = 0;
                    }
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        captionId: [captionDoc1, captionDoc2, captionDoc3],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : ['Local'],
                        medicalTreatmentIds: [medicaltreatmentIds],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids) ? defendantids.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        USER_RESIDENCE_COUNTY: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : "{USER_RESIDENCE_COUNTY}",
                        BODY_PART: utils.isNotEmptyVal(params.attorneyNewFirmAddress) ? params.attorneyNewFirmAddress : "{BODY_PART}",
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                    }
                    break;

                case "F1455_19":
                    var captionDoc1 = 0;
                    var captionDoc2 = 0;
                    angular.isDefined(params.captionDocumentId) ? captionDoc1 = parseInt(params.captionDocumentId) : '';
                    angular.isDefined(params.captionDocumentId1) ? captionDoc2 = parseInt(params.captionDocumentId1) : '';
                    var medicaltreatmentIds;
                    if (params.PhysicianprovideridJava != undefined) {
                        if (angular.isDefined(params.PhysicianprovideridJava.physician)) {
                            medicaltreatmentIds = params.PhysicianprovideridJava.medical_information_id;
                        } else {
                            medicaltreatmentIds = 0;
                        }
                    } else {
                        medicaltreatmentIds = 0;
                    }

                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        captionId: [captionDoc1, captionDoc2],
                        medicalproviderid: angular.isDefined(params.medicalproviderid) ? [parseInt(params.medicalproviderid.contactid)] : [0],
                        medicalprovidertype: ["Local"],
                        USER_RESIDENCE_COUNTY: utils.isNotEmptyVal(params.attorneyContactNumber) ? params.attorneyContactNumber : "{USER_RESIDENCE_COUNTY}",
                        userId: angular.isDefined(params.firmUserId) ? [parseInt(params.firmUserId)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : ['Local'],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids) ? defendantids.join(', ') : '{DEFENDANT_NAME_PRIMARY}'
                    }
                    break;

                case "F1455_20":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        captionId: angular.isDefined(params.captionDocumentId3) ? [parseInt(params.captionDocumentId3)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : ['Local'],
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids) ? defendantids.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        ATTORNEY_ADDRESS: utils.isNotEmptyVal(params.attoneyAddress) ? params.attoneyAddress : "{ATTORNEY_ADDRESS}",
                    }
                    break;

                case "F1455_21":
                    var defendantids = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        captionId: angular.isDefined(params.captionDocumentId3) ? [parseInt(params.captionDocumentId3)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : ['Local'],
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids) ? defendantids.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        DEFENDANT_FILE_NUMBER: utils.isNotEmptyVal(params.attorneyNewFirmContactNumber) ? params.attorneyNewFirmContactNumber : "{DEFENDANT_FILE_NUMBER}",
                    }
                    break;

                case "F1455_23":

                    var defAttorney = [];
                    defAttorney[0] = angular.isDefined(params.defendantLawFirm) ? parseInt(params.defendantLawFirm.contactid) : 0;

                    var defAttorneyType = [];
                    defAttorneyType[0] = angular.isDefined(params.defendantLawFirm) ? params.defendantLawFirm.contact_type : 0;

                    var defendantids1 = [];
                    if (params.defendantLawFirm != undefined) {
                        _.forEach(params.defendantLawFirm.party_contact_id, function (currentItem) {
                            if (currentItem.party_role == "defendant") {
                                defendantids1.push(currentItem.name);
                            }
                        })
                    }

                    resetParams = {
                        templateId: parseInt(templateId),
                        mid: parseInt(params.matterid),
                        tz: moment.tz.guess(),
                        plaintiffId: angular.isDefined(params.plaintiff) ? [parseInt(params.plaintiff.plaintiffid)] : [0],
                        attorneyId: angular.isDefined(params.leadattorneyid) ? [parseInt(params.leadattorneyid)] : [0],
                        captionId: angular.isDefined(params.captionDocumentId3) ? [parseInt(params.captionDocumentId3)] : [0],
                        defendantAttorneyId: angular.isDefined(params.defendantLawFirm) ? [parseInt(params.defendantLawFirm.contactid)] : [0],
                        defendantAttorneyTypes: angular.isDefined(params.defendantLawFirm) ? [params.defendantLawFirm.contact_type] : ['Local'],
                        DEFENDANT_NAME_PRIMARY: utils.isNotEmptyVal(defendantids1) ? defendantids1.join(', ') : '{DEFENDANT_NAME_PRIMARY}',
                        witnessId: utils.isEmptyVal(params.witnessName) ? [0] : [parseInt(params.witnessName.contactid)],
                        EXPERT_WITNESS_QUALIFICATION_AND_EMPLOYMENT_DETAILS: utils.isNotEmptyVal(params.PhotographsType) ? params.PhotographsType : "{EXPERT_WITNESS_QUALIFICATION_AND_EMPLOYMENT_DETAILS}",
                    }
                    break;
            }
            return resetParams;
        }

        /**
         * Add extra parameters for specific template
         */
        function extraParams(templateInfo, params) {

            if (templateInfo.template_code == "F1_116") {

                params.otherPartyContactid = [];
                params.otherPartyContacttype = [];
                _.forEach(templateInfo.multiselectcontactid, function (currentItem, index) {
                    params.otherPartyContactid.push(parseInt(currentItem.contactid));
                    params.otherPartyContacttype.push(currentItem.contact_type);
                });
            }


            if (templateInfo.template_code == "F1_120") {
                params.plaintiffContactId = [];
                params.defendentContactId = [];
                _.forEach(templateInfo.multiselectcontactid_plaintiff, function (currentItem, index) {
                    params.plaintiffContactId.push(parseInt(currentItem.plaintiffid));
                });
                _.forEach(templateInfo.multiselectcontactid_defendent, function (currentItem, index) {
                    params.defendentContactId.push(parseInt(currentItem.defendantid));
                });
            }

            /**
             * LIABILITY-CLAIM LOR TO INSUR- NO PD CLAIM template add defendant insured and opertor
             */
            if (templateInfo.template_code == "F1_43" || templateInfo.template_code == "F1_44") {
                if (!Array.isArray(templateInfo.insured_defendant) && utils.isNotEmptyVal(templateInfo.insured_defendant)) {
                    params.insured_defendant = JSON.parse(templateInfo.insured_defendant);
                } else {
                    params.insured_defendant = { 'defendantid': undefined };
                }
                if (!Array.isArray(templateInfo.operator_defendant) && utils.isNotEmptyVal(templateInfo.operator_defendant)) {
                    params.operator_defendant = JSON.parse(templateInfo.operator_defendant);
                } else {
                    params.operator_defendant = { 'defendantid': undefined };
                }
            }

            /**
             * EBt CLIENT SIGN
             */
            if (templateInfo.template_code == "F1_102") {
                params.page_to_sign = (templateInfo.page_to_sign != undefined) ? templateInfo.page_to_sign : -1;
            }

            /**
             * COMBINED DEMANDS -PREMISES
             */
            if (templateInfo.template_code == "F1_45") {
                params.secondarydefendantid = (templateInfo.secondaryDefendantsAttorney == undefined) ? undefined : templateInfo.secondaryDefendantsAttorney.toString();
                params.primarydefedantid = templateInfo.primaryDefendantsAttorney;
            }

            /**
             * COMBINED DEMANDS-MVA- REV 2017
             */
            if (templateInfo.template_code == "F1_46") {
                params.secondarydefendantid = (templateInfo.secondaryDefendantsAttorney == undefined) ? undefined : templateInfo.secondaryDefendantsAttorney.toString();
                params.primarydefedantid = templateInfo.primaryDefendantsAttorney;
            }

            /**
             * MVA SUMMONS AND COMPLAINT
             */
            if (templateInfo.template_code == "F1_59") {
                params.baseonvenue = templateInfo.pdl_address;
                if (templateInfo.pdl_address != undefined) {
                    if (templateInfo.pdl_address == 1) {
                        params.baseonvenue = "Plaintiff’s residence";
                        (templateInfo.pd_address != undefined) ? templateInfo.pd_address = "Plaintiff(s) reside(s) at " + templateInfo.pd_address : '';
                    }
                    if (templateInfo.pdl_address == 2) {
                        params.baseonvenue = "Defendant's residence";
                        (templateInfo.pd_address != undefined) ? templateInfo.pd_address = "Defendant(s) reside(s) at " + templateInfo.pd_address : '';
                    }
                    if (templateInfo.pdl_address == 3) {
                        params.baseonvenue = "Location of accident";
                        (templateInfo.pd_address != undefined) ? templateInfo.locationOfAccident = "Location of accident " + templateInfo.locationOfAccident : '';
                    }
                }

                params.plaintiffordefendantaddress = (templateInfo.pdl_address == undefined) ? undefined : (templateInfo.pdl_address == 1 || templateInfo.pdl_address == 2) ? templateInfo.pd_address : templateInfo.locationOfAccident;
                if (templateInfo.secDefOperator != undefined) {
                    if (utils.isNotEmptyVal(templateInfo.secDefOperator)) {
                        params.secDefOperator = templateInfo.secDefOperator;
                    }
                }
            }

            /**
             * NO FAULT-LETTER OF REP WITH APP- JHF LETTERHEAD or NO FAULT-LETTER OF REP WITH APP
             */
            if (templateInfo.template_code == "F1_60" || templateInfo.template_code == "F1_61" || templateInfo.template_code == "F1_62" || templateInfo.template_code == "F1_65" || templateInfo.template_code == "F1_66" || templateInfo.template_code == "F1_67" || templateInfo.template_code == "F1_63" || templateInfo.template_code == "F1_64") {
                params.pd_contact = (templateInfo.plaintiffs_defendants_contact == undefined) ? undefined : templateInfo.plaintiffs_defendants_contact;
            }

            /**
             * NO FAULT-ADVISING TT OF MULTIPLE NF IMES
             */
            if (templateInfo.template_code == "F1_70") {
                var event = [];
                event[0] = (templateInfo.imeeventid1 == undefined) ? "undefined" : templateInfo.imeeventid1;
                event[1] = (templateInfo.imeeventid2 == undefined) ? "undefined" : templateInfo.imeeventid2;
                event[2] = (templateInfo.imeeventid3 == undefined) ? "undefined" : templateInfo.imeeventid3;

                var physician = [];
                physician[0] = (templateInfo.physicianproviderid1 == undefined) ? "undefined" : templateInfo.physicianproviderid1;
                physician[1] = (templateInfo.physicianproviderid2 == undefined) ? "undefined" : templateInfo.physicianproviderid2;
                physician[2] = (templateInfo.physicianproviderid3 == undefined) ? "undefined" : templateInfo.physicianproviderid3;
                params.event = event;
                params.physician = physician;
            }

            /**
             * welcome letter
             */
            if (templateInfo.template_code == "F1_89" || templateInfo.template_code == "F1_127") {
                (templateInfo.paralegalid2 == undefined) ? params.paralegalid2 = undefined : params.paralegalid2 = templateInfo.paralegalid2;
                (templateInfo.attorneyid1 == undefined) ? params.attorneyid1 = undefined : params.attorneyid1 = templateInfo.attorneyid1;
                (templateInfo.attorneyid2 == undefined) ? params.attorneyid2 = undefined : params.attorneyid2 = templateInfo.attorneyid2;
                (templateInfo.managing_partner_id == undefined) ? params.managing_partner_id = undefined : params.managing_partner_id = templateInfo.managing_partner_id;
            }

            // Defendant_Claim_Letter_-_Premises
            if (templateInfo.template_code == "F1_117" || templateInfo.template_code == "F1_119") {
                params.isPath = (templateInfo.isPath == undefined) ? undefined : templateInfo.isPath;
            }

            //time of accident
            if (templateInfo.template_code == "F1153_26" || templateInfo.template_code == "F1214_1") {
                (templateInfo.accident_hrs == undefined) ? '' : params.timeOfAccident_hr = templateInfo.accident_hrs;
                (templateInfo.accident_mins == undefined) ? '' : params.timeOfAccident_min = templateInfo.accident_mins;
                (templateInfo.accident_sec == undefined) ? '' : params.timeOfAccident_sec = templateInfo.accident_sec;
                (templateInfo.meridianSelection == undefined) ? '' : params.timeOfAccident_meridian = templateInfo.meridianSelection;

                if (params.timeOfAccident_hr != undefined && params.timeOfAccident_min == undefined && params.timeOfAccident_sec == undefined) {
                    params.timeOfAccident = params.timeOfAccident_hr + ':00:00' + ' ' + params.timeOfAccident_meridian;
                } else if (params.timeOfAccident_hr != undefined && params.timeOfAccident_min == undefined && params.timeOfAccident_sec != undefined) {
                    params.timeOfAccident = params.timeOfAccident_hr + ':00' + ':' + params.timeOfAccident_sec + ' ' + params.timeOfAccident_meridian
                } else if (params.timeOfAccident_hr != undefined && params.timeOfAccident_min != undefined && params.timeOfAccident_sec == undefined) {
                    params.timeOfAccident = params.timeOfAccident_hr + ':' + params.timeOfAccident_min + ':00' + ' ' + params.timeOfAccident_meridian
                } else if (params.timeOfAccident_hr != undefined && params.timeOfAccident_min != undefined && params.timeOfAccident_sec != undefined) {
                    params.timeOfAccident = params.timeOfAccident_hr + ':' + params.timeOfAccident_min + ':' + params.timeOfAccident_sec + ' ' + params.timeOfAccident_meridian
                } else if (params.timeOfAccident_hr == undefined && params.timeOfAccident_min != undefined) {
                    params.timeOfAccident = '';
                } else if (params.timeOfAccident_hr == undefined && params.timeOfAccident_sec != undefined) {
                    params.timeOfAccident = '';
                } else if (params.timeOfAccident_hr == undefined && !(params.timeOfAccident_min == undefined && params.timeOfAccident == undefined)) {
                    params.timeOfAccident = '';
                }
            }
            return params;
        }

        /* Start: Template  Auto Generation Code */

        function autoGenerateTemplateConfig() {
            _.forEach(vm.generatorTemplateData.display_prop, function (data) {
                switch (data.api) {
                    case "getPlaintiffs":
                        getPlaintiffs();
                        break;
                    case "getMatterAllContactList":
                        getMatterAllContactList();
                        break;
                    case "otherPartyContact":
                        otherPartyContact();
                        break;
                    case "getInsuranceContacts":
                        getInsuranceContacts();
                        break;
                    case "insuredParty":
                        insuredParty();
                        break;
                    case "getParalegals":
                    case "getAttorneys":
                        getAttorneys();
                        break;
                    case "getDefendants":
                    case "getDefendantsAPICall":
                        getDefendants();
                        break;
                    case "getDefendantAttorney":
                        getDefendantAttorney();
                        break;
                    case "getEBTEvents":
                        getEBTEvents();
                        break;
                    case "getMedicalInfo":
                        getMedicalInfo();
                        break;
                    case "getMedicalInfo_Java":
                        getMedicalInfo_Java();
                        break;
                    case "getMedicalBillInfo":
                        getMedicalBillInfo();
                        break;
                    case "getExpenseInfo":
                        getExpenseInfo();
                        break;
                    case "plaintiffs_defendants":
                        getPlaintiffs();
                        getDefendants();
                        vm.plaintiffOrDefendantCall = true;
                        getAttorneys();
                        break;
                    case "getAllParties":
                        getDefendantAttorney();
                        break;
                    case "getMatterLiens":
                        getMatterLiens();
                        break;
                    case "getCaptionCategoryDocuments":
                        getCaptionCategoryDocuments();
                        break;
                    case "getServiceProviders":
                        getServiceProviders();
                        break;
                    case "getMedicalInfoAndGetMedicalBillInfo":
                        getMedicalInfoAndGetMedicalBillInfo();
                        break;
                    case "getLawSecTitle":
                        getLawSecTitle();
                        break;
                    case "timePicker":
                        timePicker();
                        break;
                    case "getOtherParties":
                        getOtherParties();
                        break;
                    case "getMedicalInfoAndGetOtherParties":
                        getMedicalInfoAndGetOtherParties();
                        break;
                    case "getMedicalInfo_JavaAndGetOtherParties":
                        getMedicalInfo_JavaAndGetOtherParties();
                        break;
                    case "getUsersInFirm":
                        getUsersInFirm();
                        break;
                    default:

                }

            });
        }
        /**
         * Auto template validation on generate template
         */
        vm.newAutoValidateSelection = function (option) {
            switch (option) {
                case "option":
                    return false;
                    break;
                default:
                    return (eval(vm.generatorTemplateData.createValidationHTML));
            }
        }


        vm.generateAutoTemplate = generateAutoTemplate;

        function generateAutoTemplate(TemplateModelInfo, AutoGenerateTemplateModelInfo) {
            var APIFlag = generatorTemplateData.template_api_call;
            var templateName = TemplateModelInfo.template_name;
            var resetParams = {
                templateId: parseInt(TemplateModelInfo.template_id),
                mid: parseInt(TemplateModelInfo.matterId),
                // tz: moment.tz.guess()
                tz: moment.tz.guess(),
            };

            var requestParamCopy = angular.copy(generatorTemplateData.request_params);

            forEach(generatorTemplateData.display_prop, function (data, index) {
                if (data.hasOwnProperty('apiCallOnly')) {
                    autoGenerateAPIResetParam(data, AutoGenerateTemplateModelInfo, resetParams);
                } else if (data.hasOwnProperty('primary')) {
                    autoGeneratePrimaryResetParam(data, AutoGenerateTemplateModelInfo, resetParams);
                } else if (data.hasOwnProperty('subKey') && (!(data.hasOwnProperty('primary') || data.hasOwnProperty('secondary') || data.hasOwnProperty('tertiary')))) {
                    autoGenerateSubKeyResetParam(data, AutoGenerateTemplateModelInfo, resetParams);
                } else if (data.hasOwnProperty('multipleSubKey')) {
                    autoGenerateMultipleSubKeyResetParam(data, AutoGenerateTemplateModelInfo, resetParams);
                } else if (data.hasOwnProperty('multipleKey')) {
                    autoGenerateMultipleKeyResetParam(data, AutoGenerateTemplateModelInfo, resetParams);
                }

            });

            forEach(generatorTemplateData.request_params, function (data) {

                if (AutoGenerateTemplateModelInfo.hasOwnProperty(data.key) && utils.isNotEmptyVal(AutoGenerateTemplateModelInfo[data.key])) {
                    var obj = AutoGenerateTemplateModelInfo[data.key];
                    utils.isNotEmptyVal(data.keyValue) ? obj = obj[data.keyValue] : obj = obj;
                    if (!(obj == "undefined" || obj == null || obj == '')) {
                        obj = convertResetParam(data.type, obj);
                    } else {
                        obj = convertResetParam(data.defaultValueType, data.defaultValue);
                    }
                    resetParams[data.key] = obj;
                } else {
                    resetParams[data.key] = convertResetParam(data.defaultValueType, data.defaultValue);
                }

            });

            generatorTemplateData.request_params = requestParamCopy;

            templatestDatalayer.GenerateNewTemplateRecord(resetParams, APIFlag, templateName)
                .then(function (response) {
                    var filename = templateName.replace('.', '-');
                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([response], { type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document" });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename + ".docx");

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                        vm.close();
                    } catch (ex) {
                        console.log(ex);
                    }
                }, function (error) {
                    if (localStorage.getItem('templateError') == "true") {
                        notificationService.error('' + error.data);
                        localStorage.setItem('templateError', "false");
                    }
                });
        }


        function autoGenerateAPIResetParam(data, AutoGenerateTemplateModelInfo, resetParams) {

            resetParams[data.modelname] = [];
            if (data.hasOwnProperty('subKey')) {
                resetParams[data.subKey] = [];
            }

            _.forEach(vm[data.apiList], function (currentItem) {
                var value;
                (currentItem[data.apiAttribute]) ? value = currentItem[data.apiAttribute] : value = data.apiAttributeDefaultValue;
                var obj = convertResetParam(data.apiAttributeDefaultValueType, value);
                resetParams[data.modelname].push(obj);
                if (data.hasOwnProperty('subKey')) {
                    var subValue;
                    (currentItem[data.apiSubKeyAttribute]) ? subValue = currentItem[data.apiSubKeyAttribute] : subValue = data.apiSubKeyAttributeDefaultValue;
                    var obj = convertResetParam(data.apiSubKeyAttributeDefaultValueType, subValue);
                    resetParams[data.subKey].push(obj);
                }
            });

        }

        function autoGeneratePrimaryResetParam(data, AutoGenerateTemplateModelInfo, resetParams) {

            resetParams[data.modelname] = [];
            if (data.hasOwnProperty('subKey')) {
                resetParams[data.subKey] = [];
            }
            var arrLoop = ["primary", "secondary", "tertiary"];

            for (var i = 0; i < arrLoop.length; i++) {
                forEach(generatorTemplateData.request_params, function (data1) {
                    if (data1.hasOwnProperty(arrLoop[i]) && data.modelname == data1[arrLoop[i]]) {
                        if (AutoGenerateTemplateModelInfo.hasOwnProperty(data1.key) && utils.isNotEmptyVal(AutoGenerateTemplateModelInfo[data1.key])) {
                            var obj = AutoGenerateTemplateModelInfo[data1.key];
                            utils.isNotEmptyVal(data1.keyValue) ? obj = obj[data1.keyValue] : obj = obj;
                            if (!(obj == "undefined" || obj == null || obj == '')) {
                                obj = convertResetParam(data1.type, obj);
                            } else {
                                obj = convertResetParam(data1.defaultValueType, data1.defaultValue);
                            }
                            resetParams[data.modelname].push(obj);

                            if (data.hasOwnProperty('subKey')) {
                                if (AutoGenerateTemplateModelInfo.hasOwnProperty(data1.key) && utils.isNotEmptyVal(AutoGenerateTemplateModelInfo[data1.key])) {
                                    var resetParamsObj = data1
                                    var subObj = AutoGenerateTemplateModelInfo[data.modelname];
                                    var value = subKeySwitchCase(data, AutoGenerateTemplateModelInfo, resetParamsObj, subObj);
                                    resetParams[data.subKey].push(value);
                                } else {
                                    var resetParamsObj = data1;
                                    var value = convertResetParam(resetParamsObj.defaultSubValueType, resetParamsObj.defaultSubValue);
                                    resetParams[data.subKey].push(value);
                                }
                                resetParams[data.subKey].push(value);
                            }
                            generatorTemplateData.request_params.splice(_.indexOf(generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data1.key })), 1);
                        } else {
                            resetParams[data.modelname].push(convertResetParam(data1.defaultValueType, data1.defaultValue));
                            if (data.hasOwnProperty('subKey')) {
                                if (AutoGenerateTemplateModelInfo.hasOwnProperty(data1.key) && utils.isNotEmptyVal(AutoGenerateTemplateModelInfo[data1.key])) {
                                    var resetParamsObj = data1
                                    var subObj = AutoGenerateTemplateModelInfo[data.modelname];
                                    var value;
                                    value = subKeySwitchCase(data, AutoGenerateTemplateModelInfo, resetParamsObj, subObj);
                                    resetParams[data.subKey].push(value);
                                } else {
                                    var resetParamsObj = data1;
                                    var value = convertResetParam(resetParamsObj.defaultSubValueType, resetParamsObj.defaultSubValue);
                                    resetParams[data.subKey].push(value);
                                }
                                resetParams[data.subKey].push(value);
                            }
                            generatorTemplateData.request_params.splice(_.indexOf(generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data1.key })), 1);
                        }
                    }

                });
            }

        }

        function autoGenerateSubKeyResetParam(data, AutoGenerateTemplateModelInfo, resetParams) {

            if (AutoGenerateTemplateModelInfo.hasOwnProperty(data.modelname) && utils.isNotEmptyVal(AutoGenerateTemplateModelInfo[data.modelname])) {
                var resetParamsObj = (generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data.modelname }))
                var subObj = AutoGenerateTemplateModelInfo[data.modelname];
                var value = subKeySwitchCase(data, AutoGenerateTemplateModelInfo, resetParamsObj, subObj);
                resetParams[resetParamsObj.subKey] = value;
            } else {
                var resetParamsObj = (generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data.modelname }))
                var value = convertResetParam(resetParamsObj.defaultSubValueType, resetParamsObj.defaultSubValue);
                resetParams[resetParamsObj.subKey] = value;
            }

        }

        function autoGenerateMultipleSubKeyResetParam(data, AutoGenerateTemplateModelInfo, resetParams) {
            if (data.hasOwnProperty('multipleSubKey')) {
                resetParams[data.multipleSubKey] = [];
            }

            var resetParamsObj = (generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data.modelname }))

            resetParams[resetParamsObj.key] = [];
            if (AutoGenerateTemplateModelInfo.hasOwnProperty(resetParamsObj.key) && utils.isNotEmptyVal(AutoGenerateTemplateModelInfo[resetParamsObj.key])) {
                var obj = AutoGenerateTemplateModelInfo[resetParamsObj.key];
                for (var i = 0; i < AutoGenerateTemplateModelInfo[data.modelname].length; i++) {
                    var value;
                    var objValue;
                    utils.isNotEmptyVal(resetParamsObj.keyValue) ? objValue = obj[i][resetParamsObj.keyValue] : objValue = obj[i];
                    if (!(objValue == "undefined" || objValue == null || objValue == '')) {
                        value = convertResetParam(resetParamsObj.type, objValue);
                    } else {
                        value = convertResetParam(resetParamsObj.defaultValueType, resetParamsObj.defaultValue);
                    }
                    resetParams[resetParamsObj.key].push(value);
                }
            } else {
                resetParams[resetParamsObj.key].push(convertResetParam(resetParamsObj.defaultValueType, resetParamsObj.defaultValue));
            }

            if (AutoGenerateTemplateModelInfo.hasOwnProperty(data.modelname) && utils.isNotEmptyVal(AutoGenerateTemplateModelInfo[data.modelname])) {

                var subObj = AutoGenerateTemplateModelInfo[data.modelname];
                for (var i = 0; i < subObj.length; i++) {
                    var value = subKeySwitchCase(data, AutoGenerateTemplateModelInfo, resetParamsObj, subObj[i]);
                    resetParams[resetParamsObj.multipleSubKey].push(value);
                }

            } else {
                var resetParamsObj = (generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data.modelname }));
                var value = convertResetParam(resetParamsObj.defaultSubValueType, resetParamsObj.defaultSubValue);
                resetParams[resetParamsObj.multipleSubKey].push(value);

            }

            generatorTemplateData.request_params.splice(_.indexOf(generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data.modelname })), 1);

        }

        function autoGenerateMultipleKeyResetParam(data, AutoGenerateTemplateModelInfo, resetParams) {

            var resetParamsObj = (generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data.modelname }))

            resetParams[resetParamsObj.key] = [];
            if (AutoGenerateTemplateModelInfo.hasOwnProperty(resetParamsObj.key) && utils.isNotEmptyVal(AutoGenerateTemplateModelInfo[resetParamsObj.key])) {
                var obj = AutoGenerateTemplateModelInfo[resetParamsObj.key];
                for (var i = 0; i < AutoGenerateTemplateModelInfo[data.modelname].length; i++) {
                    var value;
                    var objValue;
                    utils.isNotEmptyVal(resetParamsObj.keyValue) ? objValue = obj[i][resetParamsObj.keyValue] : objValue = obj[i];
                    if (!(objValue == "undefined" || objValue == null || objValue == '')) {
                        value = convertResetParam(resetParamsObj.type, objValue);
                    } else {
                        value = convertResetParam(resetParamsObj.defaultValueType, resetParamsObj.defaultValue);
                    }
                    resetParams[resetParamsObj.key].push(value);
                }
            } else {
                resetParams[resetParamsObj.key].push(convertResetParam(resetParamsObj.defaultValueType, resetParamsObj.defaultValue));
            }

            generatorTemplateData.request_params.splice(_.indexOf(generatorTemplateData.request_params, _.findWhere(generatorTemplateData.request_params, { key: data.modelname })), 1);

        }


        function subKeySwitchCase(data, AutoGenerateTemplateModelInfo, resetParamsObj, subObj) {
            var value;
            switch (data.subKey || data.multipleSubKey) {
                case "defendantAttorneyTypes":
                case "medicalProviderType":
                case "mediatorType":
                    value = subObj[resetParamsObj.subKeyValue];
                    if (!(value == "undefined" || value == null || value == '')) {
                        value = convertResetParam(resetParamsObj.subType, value);
                        return value;
                    } else {
                        value = convertResetParam(resetParamsObj.defaultSubValueType, resetParamsObj.defaultSubValue);
                        return value;
                    }
                    break;
                case "plaintiffEmployerType":
                    utils.isNotEmptyVal(subObj[resetParamsObj.subKeyValue]) ? value = subObj[resetParamsObj.subKeyValue] : value = subObj;
                    if (!(value == "undefined" || value == null || value == '')) {
                        value = (value == "1") ? "Global" : "Local";
                        value = convertResetParam(resetParamsObj.subType, value);
                        return value;
                    } else {
                        value = convertResetParam(resetParamsObj.defaultSubValueType, resetParamsObj.defaultSubValue);
                        return value;
                    }
                    break;
                case "contactTypes":
                case "hospitalType":
                case "plaintiffAttorneyType":
                    utils.isNotEmptyVal(subObj[resetParamsObj.subKeyValue]) ? value = subObj[resetParamsObj.subKeyValue] : value = subObj;
                    if (!(value == "undefined" || value == null || value == '')) {
                        value = (value == "Global") ? "Global" : "Local";
                        value = convertResetParam(resetParamsObj.subType, value);
                        return value;
                    } else {
                        value = convertResetParam(resetParamsObj.defaultSubValueType, resetParamsObj.defaultSubValue);
                        return value;
                    }
                    break;
                case "NOTICE_DAY":
                case "SCHEDULED_DAY":
                    utils.isNotEmptyVal(subObj[resetParamsObj.subKeyValue]) ? value = subObj[resetParamsObj.subKeyValue] : value = subObj;
                    if (!(value == "undefined" || value == null || value == '')) {
                        var day = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][subObj.getDay()];
                        value = day;
                        value = convertResetParam(resetParamsObj.subType, value);
                        return value;
                    } else {
                        value = convertResetParam(resetParamsObj.defaultSubValueType, resetParamsObj.defaultSubValue);
                        return value;
                    }
                    break;
                default:
            }
        }

        function convertResetParam(type, value) {
            switch (type) {
                case "string":
                    return value;
                    break;
                case "ArrayStringValue":
                    return [value];
                    break;
                case "int":
                    return parseInt(value);
                    break;
                case "ArrayIntValue":
                    return [parseInt(value)];
                    break;
                case "date":
                    return moment.unix(utils.getUTCTimeStamp(value)).utc().format('MM/DD/YYYY');
                    break;
                case "date_1":
                    return moment.unix(utils.getUTCTimeStamp(value)).utc().format('MMMM D, YYYY');
                    break;
                case "date_2":
                    var dateStr = moment.unix(utils.getUTCTimeStamp(value)).utc().format('Do') + " DAY OF " + moment.unix(utils.getUTCTimeStamp(value)).utc().format('MMMM') + " " + moment.unix(utils.getUTCTimeStamp(value)).utc().format('YYYY');
                    return dateStr;
                    break;
                case "TreatmentDate":
                    if (utils.isNotEmptyVal(value.servicedate) && utils.isNotEmptyVal(value.serviceenddate)) {
                        return moment.unix(value.servicedate).utc().format('MMMM D, YYYY') + '|' + moment.unix(value.serviceenddate).utc().format('MMMM D, YYYY');
                    } else if (utils.isNotEmptyVal(value.servicedate)) {
                        return moment.unix(value.servicedate).utc().format('MMMM D, YYYY') + '|' + " ";
                    } else if (utils.isNotEmptyVal(value.serviceenddate)) {
                        return " " + '|' + moment.unix(value.serviceenddate).utc().format('MMMM D, YYYY');
                    }
                    break;
                case "TreatmentDate_1":
                    if (utils.isNotEmptyVal(value.servicestartdate) && utils.isNotEmptyVal(value.serviceenddate)) {
                        return moment.unix(value.servicestartdate).utc().format('MMMM D, YYYY') + '|' + moment.unix(value.serviceenddate).utc().format('MMMM D, YYYY');
                    } else if (utils.isNotEmptyVal(value.servicestartdate)) {
                        return moment.unix(value.servicestartdate).utc().format('MMMM D, YYYY') + '|' + " ";
                    } else if (utils.isNotEmptyVal(value.serviceenddate)) {
                        return " " + '|' + moment.unix(value.serviceenddate).utc().format('MMMM D, YYYY');
                    }
                    break;
                case "MedicalBillAndInfoDate":
                    if (value.hasOwnProperty("medicalbillid")) {
                        if (utils.isNotEmptyVal(value.servicedate) && utils.isNotEmptyVal(value.serviceenddate)) {
                            return 'Start: ' + moment.unix(value.servicedate).utc().format('MMMM D, YYYY') + '|  End: ' + moment.unix(value.serviceenddate).utc().format('MMMM D, YYYY');
                        } else if (utils.isNotEmptyVal(value.servicedate)) {
                            return 'Start: ' + moment.unix(value.servicedate).utc().format('MMMM D, YYYY') + '|  End: ';
                        } else if (utils.isNotEmptyVal(value.serviceenddate)) {
                            return 'Start: ' + '| End: ' + moment.unix(value.serviceenddate).utc().format('MMMM D, YYYY');
                        }
                    } else if (value.hasOwnProperty("medicaltreatmentid")) {
                        if (utils.isNotEmptyVal(value.servicestartdate) && utils.isNotEmptyVal(value.serviceenddate)) {
                            return 'Start: ' + moment.unix(value.servicestartdate).utc().format('MMMM D, YYYY') + '| End: ' + moment.unix(value.serviceenddate).utc().format('MMMM D, YYYY');
                        } else if (utils.isNotEmptyVal(value.servicestartdate)) {
                            return 'Start: ' + moment.unix(value.servicestartdate).utc().format('MMMM D, YYYY') + '| End: ';
                        } else if (utils.isNotEmptyVal(value.serviceenddate)) {
                            return 'Start: ' + '| End: ' + moment.unix(value.serviceenddate).utc().format('MMMM D, YYYY');
                        }
                    }
                    break;
                case "currency":
                    return $filter('currency')(value, '', 2);
                    break;
                case "key":
                    return value;
                    break;
                case "code_0":
                    return 0;
                    break;
                case "code_1":
                    return [0];
                    break;
                case "code_local_array":
                    return ["Local"];
                    break;
                case "undefined":
                    return undefined;
                    break;
                case "blank":
                    return '';
                    break;
                case "blank_array":
                    return [''];
                    break;
                case "multiple_int_array":
                    return value.map(Number);
                    break;
                default:
                    return value;
            }
        }
        /* End: Template Auto Generation Code  */

        /*function to generate template when user clicks on generate template*/
        function generateNewTemplate(TemplateModelInfo) {
            if (vm.configure_template != undefined) {
                if (vm.configure_template.template_type == 'new') {
                    var templateInfo = {},
                        resetParams = {},
                        params = {};
                    templateInfo = angular.copy(vm.TemplateModelInfo);
                    /**
                     * validation on generate template
                     */
                    if ((templateInfo.template_code == "F1_46" && templateInfo.secondaryDefendantsAttorney.length > 5) || (templateInfo.template_code == "F1_45" && templateInfo.secondaryDefendantsAttorney.length > 5)) {
                        notificationService.error("Please select only 5 secondary defendants attorney");
                        return;
                    }
                    params = [];
                    params = angular.copy(vm.configure_template.request_params.params);
                    params.templateid = templateInfo.template_id;
                    params.matterid = utils.isNotEmptyVal(templateInfo.matterId) ? templateInfo.matterId : 0;
                    params.templatetype = templateInfo.lexvia_template;
                    _.forEach(vm.configure_template.request_params.params, function (value, key) {
                        switch (value) {
                            case "plaintiffs":
                                _.forEach(templateInfo, function (templateValue, templateKey) {
                                    if (templateKey == value) {
                                        /*plantiffs model value returned by radio input is JSON, so it has to be convert into array*/
                                        if (typeof templateInfo.plaintiffs != "object") {
                                            if (!Array.isArray(templateInfo.plaintiffs) && utils.isNotEmptyVal(templateInfo.plaintiffs)) {
                                                params.plaintiff = JSON.parse(templateInfo.plaintiffs);
                                            }
                                        } else {
                                            params.plaintiff = templateInfo.plaintiffs;
                                        }
                                    }
                                });
                                break;
                            case "infantPlaintiffs":
                                _.forEach(templateInfo, function (templateValue, templateKey) {
                                    if (templateKey == value) {
                                        /*plantiffs model value returned by radio input is JSON, so it has to be convert into array*/
                                        if (typeof templateInfo.infantPlaintiffs != "object") {
                                            if (!Array.isArray(templateInfo.infantPlaintiffs) && utils.isNotEmptyVal(templateInfo.infantPlaintiffs)) {
                                                params.infantPlaintiff = JSON.parse(templateInfo.infantPlaintiffs);
                                            }
                                        } else {
                                            params.infantPlaintiff = templateInfo.infantPlaintiffs;
                                        }
                                    }
                                });
                                break;
                            case "plaintiffs2":
                                _.forEach(templateInfo, function (templateValue, templateKey) {
                                    if (templateKey == value) {
                                        /*plantiffs model value returned by radio input is JSON, so it has to be convert into array*/
                                        if (typeof templateInfo.plaintiffs2 != "object") {
                                            if (!Array.isArray(templateInfo.plaintiffs2) && utils.isNotEmptyVal(templateInfo.plaintiffs2)) {
                                                params.plaintiff2 = JSON.parse(templateInfo.plaintiffs2);
                                            }
                                        } else {
                                            params.plaintiff2 = templateInfo.plaintiffs2;
                                        }
                                    }
                                });
                                break;
                            case "plaintiffs3":
                                _.forEach(templateInfo, function (templateValue, templateKey) {
                                    if (templateKey == value) {
                                        /*plantiffs model value returned by radio input is JSON, so it has to be convert into array*/
                                        if (typeof templateInfo.plaintiffs3 != "object") {
                                            if (!Array.isArray(templateInfo.plaintiffs3) && utils.isNotEmptyVal(templateInfo.plaintiffs3)) {
                                                params.plaintiff3 = JSON.parse(templateInfo.plaintiffs3);
                                            }
                                        } else {
                                            params.plaintiff3 = templateInfo.plaintiffs3;
                                        }
                                    }
                                });
                                break;
                            case "plaintiffs4":
                                _.forEach(templateInfo, function (templateValue, templateKey) {
                                    if (templateKey == value) {
                                        /*plantiffs model value returned by radio input is JSON, so it has to be convert into array*/
                                        if (typeof templateInfo.plaintiffs4 != "object") {
                                            if (!Array.isArray(templateInfo.plaintiffs4) && utils.isNotEmptyVal(templateInfo.plaintiffs4)) {
                                                params.plaintiff4 = JSON.parse(templateInfo.plaintiffs4);
                                            }
                                        } else {
                                            params.plaintiff4 = templateInfo.plaintiffs4;
                                        }
                                    }
                                });
                                break;
                            case "multiselectcontactid":
                                (templateInfo.multiselectcontactid == undefined) ? params.multiselectcontactid = undefined : params.multiselectcontactid;
                                break;
                            case "multiselectcontactid_plaintiff":
                                (templateInfo.multiselectcontactid_plaintiff == undefined) ? params.multiselectcontactid_plaintiff = undefined : params.multiselectcontactid_plaintiff;
                                break;
                            case "multiselectcontactid_defendent":
                                (templateInfo.multiselectcontactid_defendent == undefined) ? params.multiselectcontactid_defendent = undefined : params.multiselectcontactid_defendent;
                                break;
                            case "custom_date":
                                (templateInfo.custom_date == undefined) ? params.custom_date = undefined : params.custom_date = utils.getUTCTimeStamp(templateInfo.custom_date);
                                break;
                            case "eventid":
                                (templateInfo.eventid == undefined) ? params.eventid = undefined : params.eventid = templateInfo.eventid;
                                break;
                            case "othereventid":
                                (templateInfo.othereventid == undefined) ? params.othereventid = undefined : params.othereventid = templateInfo.othereventid;
                                break;
                            case "imeeventid":
                                (templateInfo.imeeventid == undefined) ? params.imeeventid = undefined : params.imeeventid = templateInfo.imeeventid;
                                break;
                            case "newmattercontactid":
                                params.mattercontactid = templateInfo.newmattercontactid;
                                break;
                            case "captionDocumentId":
                                params.captionDocumentId = (templateInfo.captionDocumentId != undefined) ? templateInfo.captionDocumentId : undefined;
                                break;
                            case "captionDocumentId1":
                                params.captionDocumentId1 = (templateInfo.captionDocumentId1 != undefined) ? templateInfo.captionDocumentId1 : undefined;
                                break;
                            case "captionDocumentId2":
                                params.captionDocumentId2 = (templateInfo.captionDocumentId2 != undefined) ? templateInfo.captionDocumentId2 : undefined;
                                break;
                            case "captionDocumentId3":
                                params.captionDocumentId3 = (templateInfo.captionDocumentId3 != undefined) ? templateInfo.captionDocumentId3 : undefined;
                                break;
                            case "captionDocumentId4":
                                params.captionDocumentId4 = (templateInfo.captionDocumentId4 != undefined) ? templateInfo.captionDocumentId4 : undefined;
                                break;
                            case "captionDocumentId5":
                                params.captionDocumentId5 = (templateInfo.captionDocumentId5 != undefined) ? templateInfo.captionDocumentId5 : undefined;
                                break;
                            case "captionDocumentId6":
                                params.captionDocumentId6 = (templateInfo.captionDocumentId6 != undefined) ? templateInfo.captionDocumentId6 : undefined;
                                break;
                            case "captionDocumentId7":
                                params.captionDocumentId7 = (templateInfo.captionDocumentId7 != undefined) ? templateInfo.captionDocumentId7 : undefined;
                                break;
                            case "captionDocumentId8":
                                params.captionDocumentId8 = (templateInfo.captionDocumentId8 != undefined) ? templateInfo.captionDocumentId8 : undefined;
                                break;
                            case "captionDocumentId9":
                                params.captionDocumentId9 = (templateInfo.captionDocumentId9 != undefined) ? templateInfo.captionDocumentId9 : undefined;
                                break;
                            case "countyPlaintiff":
                                params.countyPlaintiff = (templateInfo.countyPlaintiff != undefined) ? templateInfo.countyPlaintiff : undefined;
                                break;
                            case "countySignature":
                                params.countySignature = (templateInfo.countySignature != undefined) ? templateInfo.countySignature : undefined;
                                break;
                            case "countyofAccident":
                                params.countyofAccident = (templateInfo.countyofAccident != undefined) ? templateInfo.countyofAccident : undefined;
                                break;
                            case "specificCondition":
                                params.specificCondition = (templateInfo.specificCondition != undefined) ? templateInfo.specificCondition : undefined;
                                break;
                            case "plaintiffVehicleType":
                                params.plaintiffVehicleType = (templateInfo.plaintiffVehicleType != undefined) ? templateInfo.plaintiffVehicleType : undefined;
                                break;
                            case "plaintiffVehicleMake":
                                params.plaintiffVehicleMake = (templateInfo.plaintiffVehicleMake != undefined) ? templateInfo.plaintiffVehicleMake : undefined;
                                break;
                            case "plaintiffLicenseNumber":
                                params.plaintiffLicenseNumber = (templateInfo.plaintiffLicenseNumber != undefined) ? templateInfo.plaintiffLicenseNumber : undefined;
                                break;
                            case "defendentVehicleType":
                                params.defendentVehicleType = (templateInfo.defendentVehicleType != undefined) ? templateInfo.defendentVehicleType : undefined;
                                break;
                            case "defendentVehicleMake":
                                params.defendentVehicleMake = (templateInfo.defendentVehicleMake != undefined) ? templateInfo.defendentVehicleMake : undefined;
                                break;
                            ////////
                            case "doctorName1":
                                params.doctorName1 = (templateInfo.doctorName1 != undefined) ? templateInfo.doctorName1 : undefined;
                                break;
                            case "doctorName2":
                                params.doctorName2 = (templateInfo.doctorName2 != undefined) ? templateInfo.doctorName2 : undefined;
                                break;
                            case "doctorName3":
                                params.doctorName3 = (templateInfo.doctorName3 != undefined) ? templateInfo.doctorName3 : undefined;
                                break;
                            case "doctorName4":
                                params.doctorName4 = (templateInfo.doctorName4 != undefined) ? templateInfo.doctorName4 : undefined;
                                break;
                            case "doctorName5":
                                params.doctorName5 = (templateInfo.doctorName5 != undefined) ? templateInfo.doctorName5 : undefined;
                                break;
                            case "originalBillAmt1":
                                params.originalBillAmt1 = (templateInfo.originalBillAmt1 != undefined) ? templateInfo.originalBillAmt1 : undefined;
                                break;
                            case "originalBillAmt2":
                                params.originalBillAmt2 = (templateInfo.originalBillAmt2 != undefined) ? templateInfo.originalBillAmt2 : undefined;
                                break;
                            case "originalBillAmt3":
                                params.originalBillAmt3 = (templateInfo.originalBillAmt3 != undefined) ? templateInfo.originalBillAmt3 : undefined;
                                break;
                            case "originalBillAmt4":
                                params.originalBillAmt4 = (templateInfo.originalBillAmt4 != undefined) ? templateInfo.originalBillAmt4 : undefined;
                                break;
                            case "originalBillAmt5":
                                params.originalBillAmt5 = (templateInfo.originalBillAmt5 != undefined) ? templateInfo.originalBillAmt5 : undefined;
                                break;
                            case "newBillAmt1":
                                params.newBillAmt1 = (templateInfo.newBillAmt1 != undefined) ? templateInfo.newBillAmt1 : undefined;
                                break;
                            case "newBillAmt2":
                                params.newBillAmt2 = (templateInfo.newBillAmt2 != undefined) ? templateInfo.newBillAmt2 : undefined;
                                break;
                            case "newBillAmt3":
                                params.newBillAmt3 = (templateInfo.newBillAmt3 != undefined) ? templateInfo.newBillAmt3 : undefined;
                                break;
                            case "newBillAmt4":
                                params.newBillAmt4 = (templateInfo.newBillAmt4 != undefined) ? templateInfo.newBillAmt4 : undefined;
                                break;
                            case "newBillAmt5":
                                params.newBillAmt5 = (templateInfo.newBillAmt5 != undefined) ? templateInfo.newBillAmt5 : undefined;
                                break;
                            case "AmountMedPayRemember1":
                                params.AmountMedPayRemember1 = (templateInfo.AmountMedPayRemember1 != undefined) ? templateInfo.AmountMedPayRemember1 : undefined;
                                break;
                            case "AmountMedPayRemember2":
                                params.AmountMedPayRemember2 = (templateInfo.AmountMedPayRemember2 != undefined) ? templateInfo.AmountMedPayRemember2 : undefined;
                                break;
                            case "AmountMedPayRemember3":
                                params.AmountMedPayRemember3 = (templateInfo.AmountMedPayRemember3 != undefined) ? templateInfo.AmountMedPayRemember3 : undefined;
                                break;
                            case "AmountMedPayRemember4":
                                params.AmountMedPayRemember4 = (templateInfo.AmountMedPayRemember4 != undefined) ? templateInfo.AmountMedPayRemember4 : undefined;
                                break;
                            case "AmountMedPayRemember5":
                                params.AmountMedPayRemember5 = (templateInfo.AmountMedPayRemember5 != undefined) ? templateInfo.AmountMedPayRemember5 : undefined;
                                break;
                            case "AmountAtFaultParty":
                                params.AmountAtFaultParty = (templateInfo.AmountAtFaultParty != undefined) ? templateInfo.AmountAtFaultParty : undefined;
                                break;
                            case "clientSavedAmount":
                                params.clientSavedAmount = (templateInfo.clientSavedAmount != undefined) ? templateInfo.clientSavedAmount : undefined;
                                break;
                            case "FileSetUpCosts":
                                params.FileSetUpCosts = (templateInfo.FileSetUpCosts != undefined) ? templateInfo.FileSetUpCosts : undefined;
                                break;
                            case "Postage":
                                params.Postage = (templateInfo.Postage != undefined) ? templateInfo.Postage : undefined;
                                break;
                            case "CopyFees":
                                params.CopyFees = (templateInfo.CopyFees != undefined) ? templateInfo.CopyFees : undefined;
                                break;
                            case "FaxesTelephone":
                                params.FaxesTelephone = (templateInfo.FaxesTelephone != undefined) ? templateInfo.FaxesTelephone : undefined;
                                break;
                            case "MedicalRequestPriorityPostage":
                                params.MedicalRequestPriorityPostage = (templateInfo.MedicalRequestPriorityPostage != undefined) ? templateInfo.MedicalRequestPriorityPostage : undefined;
                                break;
                            case "CourtFilingFeesPersonalServiceAmount":
                                params.CourtFilingFeesPersonalServiceAmount = (templateInfo.CourtFilingFeesPersonalServiceAmount != undefined) ? templateInfo.CourtFilingFeesPersonalServiceAmount : undefined;
                                break;
                            case "AttorneyCosts":
                                params.AttorneyCosts = (templateInfo.AttorneyCosts != undefined) ? templateInfo.AttorneyCosts : undefined;
                                break;
                            case "defendentLicenseNumber":
                                params.defendentLicenseNumber = (templateInfo.defendentLicenseNumber != undefined) ? templateInfo.defendentLicenseNumber : undefined;
                                break;
                            case "locationOfCounty":
                                params.locationOfCounty = (templateInfo.locationOfCounty != undefined) ? templateInfo.locationOfCounty : undefined;
                                break;
                            case "locationOfState":
                                params.locationOfState = (templateInfo.locationOfState != undefined) ? templateInfo.locationOfState : undefined;
                                break;
                            case "leadattorneyid":
                                params.leadattorneyid = (templateInfo.leadattorneyid != undefined) ? templateInfo.leadattorneyid : undefined;
                                break;
                            case "insuranceproviderid":
                                params.insuranceproviderid = (templateInfo.insuranceproviderid != undefined) ? templateInfo.insuranceproviderid : undefined;
                                break;
                            case "dateofservice":
                                params.medicalInfo = templateInfo.dateofservice;
                                break;
                            case "otherpartycontactid":
                                params.otherpartycontactid = templateInfo.otherpartycontactid;
                                break;
                            case "otherpartycontactid2":
                                params.otherpartycontactid2 = templateInfo.otherpartycontactid2;
                                break;
                            case "otherpartycontactid3":
                                params.otherpartycontactid3 = templateInfo.otherpartycontactid3;
                                break;
                            case "newinsuranceproviderid":
                                params.newinsuranceproviderid = templateInfo.newinsuranceproviderid;
                                break;
                            case "onlyInsuranceId":
                                params.onlyInsuranceId = templateInfo.onlyInsuranceId;
                                break;
                            case "onlyInsuranceId1":
                                params.onlyInsuranceId1 = templateInfo.onlyInsuranceId1;
                                break;
                            case "onlyInsuredParty":
                                params.onlyInsuredParty = templateInfo.onlyInsuredParty;
                                break;
                            case "defInsuredParty":
                                params.defInsuredParty = templateInfo.defInsuredParty;
                                break;
                            case "defendantInsuranceId":
                                params.defendantInsuranceId = templateInfo.defendantInsuranceId;
                                break;
                            case "defendantInsuranceId1":
                                params.defendantInsuranceId1 = templateInfo.defendantInsuranceId1;
                                break;
                            case "InsuranceIdBI":
                                params.InsuranceIdBI = templateInfo.InsuranceIdBI;
                                break;
                            case "InsuranceIdUM":
                                params.InsuranceIdUM = templateInfo.InsuranceIdUM;
                                break;
                            case "PropertyInsuranceId":
                                params.PropertyInsuranceId = templateInfo.PropertyInsuranceId;
                                break;
                            case "insured_party_id":
                                params.insuredpartyid = templateInfo.insured_party_id;
                                break;
                            case "insuranceclaimnumber":
                                params.insuranceclaimnumber = templateInfo.insuranceclaimnumber;
                                break;
                            case "insuranceid":
                                params.insuranceid = templateInfo.insuranceid;
                                break;
                            case "physicianproviderid":
                                (templateInfo.physicianproviderid == undefined) ? params.physicianproviderid = undefined : params.physicianproviderid = templateInfo.physicianproviderid;
                                break;
                            case "parentObjPhysicianproviderid":
                                (templateInfo.parentObjPhysicianproviderid == undefined) ? params.parentObjPhysicianproviderid = undefined : params.parentObjPhysicianproviderid = templateInfo.parentObjPhysicianproviderid;
                                break;
                            case "PhysicianprovideridJava":
                                (templateInfo.PhysicianprovideridJava == undefined) ? params.PhysicianprovideridJava = undefined : params.PhysicianprovideridJava = templateInfo.PhysicianprovideridJava;
                                break;
                            case "expertWitnessId":
                                (templateInfo.expertWitnessId == undefined) ? params.expertWitnessId = undefined : params.expertWitnessId = templateInfo.expertWitnessId;
                                break;
                            case "medicalproviderid":
                                params.medicalproviderid = templateInfo.medicalproviderid;
                                break;
                            case "medicalproviderid1":
                                params.medicalproviderid1 = templateInfo.medicalproviderid1;
                                break;
                            case "hospitalproviderid":
                                params.hospitalproviderid = templateInfo.hospitalproviderid;
                                break;
                            case "newadjusterproviderid":
                                params.newadjusterproviderid = templateInfo.newadjusterproviderid;
                                break;
                            case "attorney_id1":
                            case "attorneyid1":
                                (templateInfo.attorneyid1 == undefined) ? params.attorneyid1 = undefined : params.attorneyid1 = templateInfo.attorneyid1;
                                break;
                            case "medicalbillproviderid":
                                params.medicalbillproviderid = templateInfo.medicalbillproviderid;
                                break;
                            case "paralegalid":
                                (templateInfo.paralegalid == undefined) ? params.paralegalid = undefined : params.paralegalid = templateInfo.paralegalid;
                                break;
                            case "defparalegalid":
                                (templateInfo.defparalegalid == undefined) ? params.defparalegalid = undefined : params.defparalegalid = templateInfo.defparalegalid;
                                break;
                            case "secondleadattorneyid":
                                (templateInfo.secondleadattorneyid == undefined) ? params.secondleadattorneyid = undefined : params.secondleadattorneyid = templateInfo.secondleadattorneyid;
                                break;
                            case "secondparalegalid":
                                (templateInfo.secondparalegalid == undefined) ? params.secondparalegalid = undefined : params.secondparalegalid = templateInfo.secondparalegalid;
                                break;
                            case "plaintiffs_defendants":
                                params.tenant = templateInfo.plaintiffs_defendants;
                                break;
                            case "defendants":
                                _.forEach(templateInfo, function (templateValue, templateKey) {
                                    if (templateKey == value) {
                                        /*plantiffs model value returned by radio input is JSON, so it has to be convert into array*/
                                        if (vm.configure_template.display_prop.display_fields.primary_defendant_type != "dropdown") {
                                            if (!Array.isArray(templateInfo.defendants) && utils.isNotEmptyVal(templateInfo.defendants)) {
                                                params.defendant = JSON.parse(templateInfo.defendants);
                                            }
                                        } else {
                                            params.defendant = { 'defendantid': templateInfo.defendants };
                                        }
                                    }
                                });
                                break;
                            case "defendants1":
                                if (vm.configure_template.display_prop.display_fields.defendants1_type != "dropdown") {
                                    if (!Array.isArray(templateInfo.defendants1) && utils.isNotEmptyVal(templateInfo.defendants1)) {
                                        params.defendant1 = JSON.parse(templateInfo.defendants1);
                                    }
                                } else {
                                    params.defendants1 = templateInfo.defendants1;
                                }
                                break;
                            case "defendants3":
                                if (vm.configure_template.display_prop.display_fields.defendants3_type != "dropdown") {
                                    if (!Array.isArray(templateInfo.defendants3) && utils.isNotEmptyVal(templateInfo.defendants3)) {
                                        params.defendant3 = JSON.parse(templateInfo.defendants3);
                                    }
                                } else {
                                    params.defendants3 = templateInfo.defendants3;
                                }
                                break;
                            case "defendants2":
                                if (vm.configure_template.display_prop.display_fields.defendants2_type != "dropdown") {
                                    if (!Array.isArray(templateInfo.defendants2) && utils.isNotEmptyVal(templateInfo.defendants2)) {
                                        params.defendant2 = JSON.parse(templateInfo.defendants2);
                                    }
                                } else {
                                    params.defendants2 = templateInfo.defendants2;
                                }
                                break;
                            case "secDefOwner":
                                (templateInfo.secDefOwner == undefined) ? params.secDefOwner = undefined : params.secDefOwner = templateInfo.secDefOwner;
                                break;
                            case "secDefOperator":
                                (templateInfo.secDefOperator == undefined) ? params.secDefOperator = undefined : params.secDefOperator = templateInfo.secDefOperator;
                                break;
                            case "defendantId4":
                                (templateInfo.defendantId4 == undefined) ? params.defendantId4 = undefined : params.defendantId4 = templateInfo.defendantId4;
                                break;
                            case "serviceproviderid":
                                params.serviceproviderid = (templateInfo.serviceproviderid != undefined) ? templateInfo.serviceproviderid.contactid : undefined;
                                params.isphysician = (templateInfo.serviceproviderid != undefined) ? (templateInfo.serviceproviderid.provider_type == "physician") ? "1" : "0" : undefined;
                                break;
                            case "showsocialsecuritynumber":
                                (templateInfo.showsocialsecuritynumber == undefined) ? params.showsocialsecuritynumber = 0 : params.showsocialsecuritynumber = templateInfo.showsocialsecuritynumber;
                                break;
                            case "expenseproviderid":
                                (templateInfo.expenseproviderid == undefined) ? params.expenseproviderid = undefined : params.expenseproviderid = templateInfo.expenseproviderid.expense_id;
                                break;
                            case "lienholderid":
                                (templateInfo.lienholderid == undefined) ? params.lienholderid = undefined : params.lienholderid = templateInfo.lienholderid.lienid;
                                break;
                            case "lienholderIds":
                                (templateInfo.lienholderIds == undefined) ? params.lienholderIds = undefined : params.lienholderIds = templateInfo.lienholderIds.lien_id;
                                break;
                            case "noofmiles":
                                (templateInfo.noofmiles == undefined) ? params.noofmiles = undefined : params.noofmiles = templateInfo.noofmiles;
                                break;
                            case "defendantFileNumber":
                                (templateInfo.defendantFileNumber == undefined) ? params.defendantFileNumber = undefined : params.defendantFileNumber = templateInfo.defendantFileNumber;
                                break;
                            case "defendantLawFirm":
                            case "defendant_Law_Firm":
                                (templateInfo.defendantLawFirm == undefined) ? params.defendantLawFirm = undefined : params.defendantLawFirm = templateInfo.defendantLawFirm;
                                break;
                            case "defendantLawFirm1":
                                (templateInfo.defendantLawFirm1 == undefined) ? params.defendantLawFirm1 = undefined : params.defendantLawFirm1 = templateInfo.defendantLawFirm1;
                                break;
                            case "defendantLawFirm2":
                                (templateInfo.defendantLawFirm2 == undefined) ? params.defendantLawFirm2 = undefined : params.defendantLawFirm2 = templateInfo.defendantLawFirm2;
                                break;
                            case "defendantLawFirm3":
                                (templateInfo.defendantLawFirm3 == undefined) ? params.defendantLawFirm3 = undefined : params.defendantLawFirm3 = templateInfo.defendantLawFirm3;
                                break;
                            case "defendantLawFirm4":
                                (templateInfo.defendantLawFirm4 == undefined) ? params.defendantLawFirm4 = undefined : params.defendantLawFirm4 = templateInfo.defendantLawFirm4;
                                break;
                            case "defendantLawFirm5":
                                (templateInfo.defendantLawFirm5 == undefined) ? params.defendantLawFirm5 = undefined : params.defendantLawFirm5 = templateInfo.defendantLawFirm5;
                                break;
                            case "mediators":
                                (templateInfo.mediators == undefined) ? params.mediators = undefined : params.mediators = templateInfo.mediators;
                                break;
                            case "plaintiffAttorney":
                                params.plaintiffAttorney = (templateInfo.plaintiffAttorney == undefined) ? undefined : templateInfo.plaintiffAttorney;
                                break;
                            case "paralegalInit":
                                (templateInfo.paralegalInit == undefined) ? params.paralegalInit = undefined : params.paralegalInit = templateInfo.paralegalInit;
                                break;
                            case "trialeventid":
                                (templateInfo.trialeventid == undefined) ? params.trialeventid = undefined : params.trialeventid = templateInfo.trialeventid;
                                break;
                            case "arbitrationEvent":
                                (templateInfo.arbitrationEvent == undefined) ? params.arbitrationEvent = undefined : params.arbitrationEvent = templateInfo.arbitrationEvent;
                                break;
                            case "paralegalInitials":
                                (templateInfo.paralegalInitials == undefined) ? params.paralegalInitials = undefined : params.paralegalInitials = templateInfo.paralegalInitials;
                                break;
                            case "eoueventId":
                                (templateInfo.eoueventId == undefined) ? params.eoueventId = undefined : params.eoueventId = templateInfo.eoueventId;
                                break;
                            case "document_name":
                                (templateInfo.document_name == undefined) ? params.document_name = undefined : params.document_name = templateInfo.document_name;
                                break;
                            case "attorney_residence_county":
                                (templateInfo.attorney_residence_county == undefined) ? params.attorney_residence_county = undefined : params.attorney_residence_county = templateInfo.attorney_residence_county;
                                break;
                            case "countyName":
                                (templateInfo.countyName == undefined) ? params.countyName = undefined : params.countyName = templateInfo.countyName;
                                break;
                            case "MotionActionText":
                                (templateInfo.MotionActionText == undefined) ? params.MotionActionText = undefined : params.MotionActionText = templateInfo.MotionActionText;
                                break;
                            case "JudgeName":
                                (templateInfo.JudgeName == undefined) ? params.JudgeName = undefined : params.JudgeName = templateInfo.JudgeName;
                                break;
                            case "DescriptionOfSurgicalProcedure":
                                (templateInfo.DescriptionOfSurgicalProcedure == undefined) ? params.DescriptionOfSurgicalProcedure = undefined : params.DescriptionOfSurgicalProcedure = templateInfo.DescriptionOfSurgicalProcedure;
                                break;
                            case "UDMCExpert":
                                (templateInfo.UDMCExpert == undefined) ? params.UDMCExpert = undefined : params.UDMCExpert = templateInfo.UDMCExpert;
                                break;
                            case "generalLigitation":
                                (templateInfo.generalLigitation == undefined) ? params.generalLigitation = undefined : params.generalLigitation = templateInfo.generalLigitation;
                                break;
                            case "medicalbillAndInfoproviderid":
                                (templateInfo.medicalbillAndInfoproviderid == undefined) ? params.medicalbillAndInfoproviderid = undefined : params.medicalbillAndInfoproviderid = templateInfo.medicalbillAndInfoproviderid;
                                break;
                            case "amountInWords":
                                params.amountInWords = (templateInfo.amountInWords != undefined) ? templateInfo.amountInWords : undefined;
                                break;
                            case "amountInNumbers":
                                params.amountInNumbers = (templateInfo.amountInNumbers != undefined) ? templateInfo.amountInNumbers : undefined;
                                break;
                            case "amountInNumbers2":
                                params.amountInNumbers2 = (templateInfo.amountInNumbers2 != undefined) ? templateInfo.amountInNumbers2 : undefined;
                                break;
                            case "amountInNumbers3":
                                params.amountInNumbers3 = (templateInfo.amountInNumbers3 != undefined) ? templateInfo.amountInNumbers3 : undefined;
                                break;
                            case "amountInNumbers4":
                                params.amountInNumbers4 = (templateInfo.amountInNumbers4 != undefined) ? templateInfo.amountInNumbers4 : undefined;
                                break;
                            case "amountInNumbers5":
                                params.amountInNumbers5 = (templateInfo.amountInNumbers5 != undefined) ? templateInfo.amountInNumbers5 : undefined;
                                break;
                            case "amountInNumbers6":
                                params.amountInNumbers6 = (templateInfo.amountInNumbers6 != undefined) ? templateInfo.amountInNumbers6 : undefined;
                                break;
                            case "amountInNumbers7":
                                params.amountInNumbers7 = (templateInfo.amountInNumbers7 != undefined) ? templateInfo.amountInNumbers7 : undefined;
                                break;
                            case "amountInNumbers8":
                                params.amountInNumbers8 = (templateInfo.amountInNumbers8 != undefined) ? templateInfo.amountInNumbers8 : undefined;
                                break;
                            case "amountInNumbers9":
                                params.amountInNumbers9 = (templateInfo.amountInNumbers9 != undefined) ? templateInfo.amountInNumbers9 : undefined;
                                break;
                            case "amountInNumbers10":
                                params.amountInNumbers10 = (templateInfo.amountInNumbers10 != undefined) ? templateInfo.amountInNumbers10 : undefined;
                                break;
                            case "amountInNumbers11":
                                params.amountInNumbers11 = (templateInfo.amountInNumbers11 != undefined) ? templateInfo.amountInNumbers11 : undefined;
                                break;
                            case "amountInNumbers12":
                                params.amountInNumbers12 = (templateInfo.amountInNumbers12 != undefined) ? templateInfo.amountInNumbers12 : undefined;
                                break;
                            case "onlyLineHolderInsuranceId":
                                params.onlyLineHolderInsuranceId = templateInfo.onlyLineHolderInsuranceId;
                                break;
                            case "timeOfAccident":
                                params.timeOfAccident = (templateInfo.timeOfAccident != undefined) ? templateInfo.timeOfAccident : undefined;
                                break;
                            case "selectedPlaintiffContactInfo":
                                params.selectedPlaintiffContactInfo = (templateInfo.selectedPlaintiffContactInfo != undefined) ? templateInfo.selectedPlaintiffContactInfo : undefined;
                                break;
                            case "lawSecretoryTitle":
                                params.lawSecretoryTitle = (templateInfo.lawSecretoryTitle != undefined) ? templateInfo.lawSecretoryTitle : undefined;
                                break;
                            case "lawSecretoryName":
                                params.lawSecretoryName = (templateInfo.lawSecretoryName != undefined) ? templateInfo.lawSecretoryName : undefined;
                                break;
                            case "nonParty":
                                params.nonParty = (templateInfo.nonParty != undefined) ? templateInfo.nonParty : undefined;
                                break;
                            case "noticeDate":
                                (templateInfo.noticeDate == undefined) ? params.noticeDate = undefined : params.noticeDate = utils.getUTCTimeStamp(templateInfo.noticeDate);
                                break;
                            case "testifyDate":
                                (templateInfo.testifyDate == undefined) ? params.testifyDate = undefined : params.testifyDate = utils.getUTCTimeStamp(templateInfo.testifyDate);
                                break;
                            case "ResponseDate":
                                (templateInfo.ResponseDate == undefined) ? params.ResponseDate = undefined : params.ResponseDate = utils.getUTCTimeStamp(templateInfo.ResponseDate);
                                break;
                            case "noticeProduceDate":
                                (templateInfo.noticeProduceDate == undefined) ? params.noticeProduceDate = undefined : params.noticeProduceDate = utils.getUTCTimeStamp(templateInfo.noticeProduceDate);
                                break;
                            case "medicalDateService":
                                var d1, d2;
                                if (templateInfo.medicalDateService != undefined) {
                                    d1 = (templateInfo.medicalDateService.servicestartdate != "") ? moment.unix(templateInfo.medicalDateService.servicestartdate).utc().format('MM/DD/YYYY') : ' ';
                                    d2 = (templateInfo.medicalDateService.serviceenddate != "") ? moment.unix(templateInfo.medicalDateService.serviceenddate).utc().format('MM/DD/YYYY') : ' ';
                                }
                                params.medicalDateService = (templateInfo.medicalDateService != undefined) ? d1 + '-' + d2 : ' ';
                                break;
                            case "plantiffResidenceCounty":
                                params.plantiffResidenceCounty = (templateInfo.plantiffResidenceCounty != undefined) ? templateInfo.plantiffResidenceCounty : undefined;
                                break;
                            case "plantiffResidenceState":
                                params.plantiffResidenceState = (templateInfo.plantiffResidenceState != undefined) ? templateInfo.plantiffResidenceState : undefined;
                                break;
                            case "entityName":
                                params.entityName = (templateInfo.entityName != undefined) ? templateInfo.entityName : undefined;
                                break;
                            case "custodianRecordsName":
                                params.custodianRecordsName = (templateInfo.custodianRecordsName != undefined) ? templateInfo.custodianRecordsName : undefined;
                                break;
                            case "assignUserId":
                                params.assignUserId = (templateInfo.assignUserId != undefined) ? templateInfo.assignUserId : undefined;
                                break;
                            case "firmUserId":
                                params.firmUserId = (templateInfo.firmUserId != undefined) ? templateInfo.firmUserId : undefined;
                                break;
                            case "witnessId":
                                (templateInfo.witnessId == undefined) ? params.witnessId = undefined : params.witnessId = templateInfo.witnessId;
                                break;
                            case "dateOfDeath":
                                (templateInfo.dateOfDeath == undefined) ? params.dateOfDeath = undefined : params.dateOfDeath = utils.getUTCTimeStamp(templateInfo.dateOfDeath);
                                break;
                            case "indexNumberFiledDate":
                                (templateInfo.indexNumberFiledDate == undefined) ? params.indexNumberFiledDate = undefined : params.indexNumberFiledDate = utils.getUTCTimeStamp(templateInfo.indexNumberFiledDate);
                                break;
                            case "executrixName":
                                params.executrixName = (templateInfo.executrixName != undefined) ? templateInfo.executrixName : undefined;
                                break;
                            case "newPlaintiffName":
                                params.newPlaintiffName = (templateInfo.newPlaintiffName != undefined) ? templateInfo.newPlaintiffName : undefined;
                                break;
                            case "newDefendantName":
                                params.newDefendantName = (templateInfo.newDefendantName != undefined) ? templateInfo.newDefendantName : undefined;
                                break;
                            case "deceasedName":
                                params.deceasedName = (templateInfo.deceasedName != undefined) ? templateInfo.deceasedName.contactid : undefined;
                                break;
                            case "physicianids":
                                (templateInfo.physicianids == undefined) ? params.physicianids = undefined : params.physicianids = templateInfo.physicianids;
                                break;
                            case "photographNumber":
                                (templateInfo.photographNumber == undefined) ? params.photographNumber = undefined : params.photographNumber = templateInfo.photographNumber;
                                break;
                            case "daysLost":
                                (templateInfo.daysLost == undefined) ? params.daysLost = undefined : params.daysLost = templateInfo.daysLost;
                                break;
                            case "discoveryPropound":
                                (templateInfo.discoveryPropound == undefined) ? params.discoveryPropound = undefined : params.discoveryPropound = templateInfo.discoveryPropound;
                                break;
                            case "dispositiveMotion":
                                (templateInfo.dispositiveMotion == undefined) ? params.dispositiveMotion = undefined : params.dispositiveMotion = templateInfo.dispositiveMotion;
                                break;
                            case "daubertMotion":
                                (templateInfo.daubertMotion == undefined) ? params.daubertMotion = undefined : params.daubertMotion = templateInfo.daubertMotion;
                                break;
                            case "juryCharges":
                                (templateInfo.juryCharges == undefined) ? params.juryCharges = undefined : params.juryCharges = templateInfo.juryCharges;
                                break;
                            case "motionLimine":
                                (templateInfo.motionLimine == undefined) ? params.motionLimine = undefined : params.motionLimine = templateInfo.motionLimine;
                                break;
                            case "juryBond":
                                (templateInfo.juryBond == undefined) ? params.juryBond = undefined : params.juryBond = templateInfo.juryBond;
                                break;
                            case "barNumber":
                                (templateInfo.barNumber == undefined) ? params.barNumber = undefined : params.barNumber = templateInfo.barNumber;
                                break;
                            case "curcuit_Number":
                                (templateInfo.curcuit_Number == undefined) ? params.curcuit_Number = undefined : params.curcuit_Number = templateInfo.curcuit_Number;
                                break;
                            case "physicianDefendants":
                                (templateInfo.physicianDefendants == undefined) ? params.physicianDefendants = undefined : params.physicianDefendants = templateInfo.physicianDefendants;
                                break;
                            case "physicianPalintiffs":
                                (templateInfo.physicianPalintiffs == undefined) ? params.physicianPalintiffs = undefined : params.physicianPalintiffs = templateInfo.physicianPalintiffs;
                                break;
                            case "commercialRetainer":
                                params.commercialRetainer = (templateInfo.commercialRetainer != undefined) ? templateInfo.commercialRetainer : undefined;
                                break;
                            case "reportDate":
                                (templateInfo.reportDate == undefined) ? params.reportDate = undefined : params.reportDate = utils.getUTCTimeStamp(templateInfo.reportDate);
                                break;
                            case "surgeryDate":
                                (templateInfo.surgeryDate == undefined) ? params.surgeryDate = undefined : params.surgeryDate = utils.getUTCTimeStamp(templateInfo.surgeryDate);
                                break;
                            case "EffectiveDate":
                                (templateInfo.EffectiveDate == undefined) ? params.EffectiveDate = undefined : params.EffectiveDate = utils.getUTCTimeStamp(templateInfo.EffectiveDate);
                                break;
                            case "dateOfMRI":
                                (templateInfo.dateOfMRI == undefined) ? params.dateOfMRI = undefined : params.dateOfMRI = utils.getUTCTimeStamp(templateInfo.dateOfMRI);
                                break;
                            case "noOfMRI":
                                params.noOfMRI = (templateInfo.noOfMRI != undefined) ? templateInfo.noOfMRI : undefined;
                                break;
                            case "bodyPart":
                                params.bodyPart = (templateInfo.bodyPart != undefined) ? templateInfo.bodyPart : undefined;
                                break;
                            case "volPageName":
                                params.volPageName = (templateInfo.volPageName != undefined) ? templateInfo.volPageName : undefined;
                                break;
                            case "bigappleDate":
                                (templateInfo.bigappleDate == undefined) ? params.bigappleDate = undefined : params.bigappleDate = utils.getUTCTimeStamp(templateInfo.bigappleDate);
                                break;
                            case "heldDate":
                                (templateInfo.heldDate == undefined) ? params.heldDate = undefined : params.heldDate = utils.getUTCTimeStamp(templateInfo.heldDate);
                                break;
                            case "nocDate":
                                (templateInfo.nocDate == undefined) ? params.nocDate = undefined : params.nocDate = utils.getUTCTimeStamp(templateInfo.nocDate);
                                break;
                            case "locationAccident":
                                params.locationAccident = (templateInfo.locationAccident != undefined) ? templateInfo.locationAccident : undefined;
                                break;
                            case "County_Address":
                                params.County_Address = (templateInfo.County_Address != undefined) ? templateInfo.County_Address : undefined;
                                break;
                            case "accidentCounty":
                                params.accidentCounty = (templateInfo.accidentCounty != undefined) ? templateInfo.accidentCounty : undefined;
                                break;
                            case "accidentState":
                                params.accidentState = (templateInfo.accidentState != undefined) ? templateInfo.accidentState : undefined;
                                break;
                            case "annexName":
                                params.annexName = (templateInfo.annexName != undefined) ? templateInfo.annexName : undefined;
                                break;
                            case "DefendantResidencCounty":
                                params.DefendantResidencCounty = (templateInfo.DefendantResidencCounty != undefined) ? templateInfo.DefendantResidencCounty : undefined;
                                break;
                            case "accidnetDescription":
                                params.accidnetDescription = (templateInfo.accidnetDescription != undefined) ? templateInfo.accidnetDescription : undefined;
                                break;
                            case "leftTxtOne":
                                params.leftTxtOne = (templateInfo.leftTxtOne != undefined) ? templateInfo.leftTxtOne : undefined;
                                break;
                            case "Delivery":
                                params.Delivery = (templateInfo.Delivery != undefined) ? templateInfo.Delivery : undefined;
                                break;
                            case "attorneyStreet":
                                params.attorneyStreet = (templateInfo.attorneyStreet != undefined) ? templateInfo.attorneyStreet : undefined;
                                break;
                            case "attorneyCity":
                                params.attorneyCity = (templateInfo.attorneyCity != undefined) ? templateInfo.attorneyCity : undefined;
                                break;
                            case "attorneyState":
                                params.attorneyState = (templateInfo.attorneyState != undefined) ? templateInfo.attorneyState : undefined;
                                break;
                            case "attorneyZip":
                                params.attorneyZip = (templateInfo.attorneyZip != undefined) ? templateInfo.attorneyZip : undefined;
                                break;
                            case "attorneyContactNumber":
                                params.attorneyContactNumber = (templateInfo.attorneyContactNumber != undefined) ? templateInfo.attorneyContactNumber : undefined;
                                break;
                            case "attorneyNewFirmAddress":
                                params.attorneyNewFirmAddress = (templateInfo.attorneyNewFirmAddress != undefined) ? templateInfo.attorneyNewFirmAddress : undefined;
                                break;
                            case "attorneyNewFirmContactNumber":
                                params.attorneyNewFirmContactNumber = (templateInfo.attorneyNewFirmContactNumber != undefined) ? templateInfo.attorneyNewFirmContactNumber : undefined;
                                break;
                            case "PhotographsType":
                                params.PhotographsType = (templateInfo.PhotographsType != undefined) ? templateInfo.PhotographsType : undefined;
                                break;
                            case "EmploymentRecords":
                                params.EmploymentRecords = (templateInfo.EmploymentRecords != undefined) ? templateInfo.EmploymentRecords : undefined;
                                break;
                            case "theCityOfTheAttorneyUser":
                                params.theCityOfTheAttorneyUser = (templateInfo.theCityOfTheAttorneyUser != undefined) ? templateInfo.theCityOfTheAttorneyUser : undefined;
                                break;
                            case "attorneyOldFirmName":
                                params.attorneyOldFirmName = (templateInfo.attorneyOldFirmName != undefined) ? templateInfo.attorneyOldFirmName : undefined;
                                break;
                            case "attorneyNewFirmName":
                                params.attorneyNewFirmName = (templateInfo.attorneyNewFirmName != undefined) ? templateInfo.attorneyNewFirmName : undefined;
                                break;
                            case "leftTxtThree":
                                params.leftTxtThree = (templateInfo.leftTxtThree != undefined) ? templateInfo.leftTxtThree : undefined;
                                break;
                            case "leftTxtFour":
                                params.leftTxtFour = (templateInfo.leftTxtFour != undefined) ? templateInfo.leftTxtFour : undefined;
                                break;
                            case "leftTxtFive":
                                params.leftTxtFive = (templateInfo.leftTxtFive != undefined) ? templateInfo.leftTxtFive : undefined;
                                break;
                            case "attoneyAddress":
                                params.attoneyAddress = (templateInfo.attoneyAddress != undefined) ? templateInfo.attoneyAddress : undefined;
                                break;
                            case "rightTxtOne":
                                params.rightTxtOne = (templateInfo.rightTxtOne != undefined) ? templateInfo.rightTxtOne : undefined;
                                break;
                            case "rightTxtTwo":
                                params.rightTxtTwo = (templateInfo.rightTxtTwo != undefined) ? templateInfo.rightTxtTwo : undefined;
                                break;
                            case "rightTxtThree":
                                params.rightTxtThree = (templateInfo.rightTxtThree != undefined) ? templateInfo.rightTxtThree : undefined;
                                break;
                            case "rightTxtFour":
                                params.rightTxtFour = (templateInfo.rightTxtFour != undefined) ? templateInfo.rightTxtFour : undefined;
                                break;
                            case "rightTxtFive":
                                params.rightTxtFive = (templateInfo.rightTxtFive != undefined) ? templateInfo.rightTxtFive : undefined;
                                break;
                            case "rightTxtSix":
                                params.rightTxtSix = (templateInfo.rightTxtSix != undefined) ? templateInfo.rightTxtSix : undefined;
                                break;
                            case "NameMembers":
                                params.NameMembers = (templateInfo.NameMembers != undefined) ? templateInfo.NameMembers : undefined;
                                break;
                            case "GroupNumber":
                                params.GroupNumber = (templateInfo.GroupNumber != undefined) ? templateInfo.GroupNumber : undefined;
                                break;
                            case "rightTxtSeven":
                                params.rightTxtSeven = (templateInfo.rightTxtSeven != undefined) ? templateInfo.rightTxtSeven : undefined;
                                break;
                            case "rightTxtEight":
                                params.rightTxtEight = (templateInfo.rightTxtEight != undefined) ? templateInfo.rightTxtEight : undefined;
                                break;
                            case "courtCert":
                                params.courtCert = (templateInfo.courtCert != undefined) ? templateInfo.courtCert : undefined;
                                break;
                            case "mediatorTitle":
                                params.mediatorTitle = (templateInfo.mediatorTitle != undefined) ? templateInfo.mediatorTitle : undefined;
                                break;
                            case "rightTxtNine":
                                params.rightTxtNine = (templateInfo.rightTxtNine != undefined) ? templateInfo.rightTxtNine : undefined;
                                break;
                            case "guardianType":
                                params.guardianType = (templateInfo.guardianType != undefined) ? templateInfo.guardianType : undefined;
                                break;
                            case "plantiffGuardianCounty":
                                params.plantiffGuardianCounty = (templateInfo.plantiffGuardianCounty != undefined) ? templateInfo.plantiffGuardianCounty : undefined;
                                break;
                            case "incidentDescription":
                                params.incidentDescription = (templateInfo.incidentDescription != undefined) ? templateInfo.incidentDescription : undefined;
                                break;
                            case "otherDriverName":
                                params.otherDriverName = (templateInfo.otherDriverName != undefined) ? templateInfo.otherDriverName : undefined;
                                break;
                            case "documentheading":
                                params.documentheading = (templateInfo.documentheading != undefined) ? templateInfo.documentheading : undefined;
                                break;
                            case "driverLicenseNumber":
                                params.driverLicenseNumber = (templateInfo.driverLicenseNumber != undefined) ? templateInfo.driverLicenseNumber : undefined;
                                break;
                            case "summonNumber":
                                params.summonNumber = (templateInfo.summonNumber != undefined) ? templateInfo.summonNumber : undefined;
                                break;
                            case "checkName":
                                params.checkName = (templateInfo.checkName != undefined) ? templateInfo.checkName : undefined;
                                break;
                            case "chargeNumber":
                                params.chargeNumber = (templateInfo.chargeNumber != undefined) ? templateInfo.chargeNumber : undefined;
                                break;
                            case "emergencyContactNumber":
                                params.emergencyContactNumber = (templateInfo.emergencyContactNumber != undefined) ? templateInfo.emergencyContactNumber : undefined;
                                break;
                            case "spouseSSN":
                                params.spouseSSN = (templateInfo.spouseSSN != undefined) ? templateInfo.spouseSSN : undefined;
                                break;
                            case "witnessId2":
                                params.witnessId2 = (templateInfo.witnessId2 != undefined) ? templateInfo.witnessId2 : undefined;
                                break;
                            case "witnessId3":
                                params.witnessId3 = (templateInfo.witnessId3 != undefined) ? templateInfo.witnessId3 : undefined;
                                break;
                            case "medicalproviderid2":
                                params.medicalproviderid2 = (templateInfo.medicalproviderid2 != undefined) ? templateInfo.medicalproviderid2 : undefined;
                                break;
                            case "medicalproviderid3":
                                params.medicalproviderid3 = (templateInfo.medicalproviderid3 != undefined) ? templateInfo.medicalproviderid3 : undefined;
                                break;
                            case "treatmentType":
                                params.treatmentType = (templateInfo.treatmentType != undefined) ? templateInfo.treatmentType : undefined;
                                break;
                            case "workersCompensationId":
                                params.workersCompensationId = (templateInfo.workersCompensationId != undefined) ? templateInfo.workersCompensationId : undefined;
                                break;
                            case "bedTime":
                                params.bedTime = (templateInfo.bedTime != undefined) ? templateInfo.bedTime : undefined;
                                break;
                            case "houseTime":
                                params.houseTime = (templateInfo.houseTime != undefined) ? templateInfo.houseTime : undefined;
                                break;
                            case "serviceDescription":
                                params.serviceDescription = (templateInfo.serviceDescription != undefined) ? templateInfo.serviceDescription : undefined;
                                break;
                            case "policeAccidentInfo":
                                params.policeAccidentInfo = (templateInfo.policeAccidentInfo != undefined) ? templateInfo.policeAccidentInfo : undefined;
                                break;
                            case "lostIncome":
                                params.lostIncome = (templateInfo.lostIncome != undefined) ? templateInfo.lostIncome : undefined;
                                break;
                            case "prioirAccidents":
                                params.prioirAccidents = (templateInfo.prioirAccidents != undefined) ? templateInfo.prioirAccidents : undefined;
                                break;
                            case "subsequentAccidents":
                                params.subsequentAccidents = (templateInfo.subsequentAccidents != undefined) ? templateInfo.subsequentAccidents : undefined;
                                break;
                            case "priorMedicalCondition":
                                params.priorMedicalCondition = (templateInfo.priorMedicalCondition != undefined) ? templateInfo.priorMedicalCondition : undefined;
                                break;
                            case "meansOfCalculation":
                                params.meansOfCalculation = (templateInfo.meansOfCalculation != undefined) ? templateInfo.meansOfCalculation : undefined;
                                break;
                            case "socialSecInfo":
                                params.socialSecInfo = (templateInfo.socialSecInfo != undefined) ? templateInfo.socialSecInfo : undefined;
                                break;
                            case "defendantStatement":
                                params.defendantStatement = (templateInfo.defendantStatement != undefined) ? templateInfo.defendantStatement : undefined;
                                break;
                            case "userState":
                                params.userState = (templateInfo.userState != undefined) ? templateInfo.userState : undefined;
                                break;
                            case "userCounty":
                                params.userCounty = (templateInfo.userCounty != undefined) ? templateInfo.userCounty : undefined;
                                break;
                            case "dateOfFiling":
                                params.dateOfFiling = (templateInfo.dateOfFiling != undefined) ? templateInfo.dateOfFiling : undefined;
                                break;
                            case "grossPay":
                                params.grossPay = (templateInfo.grossPay != undefined) ? templateInfo.grossPay : undefined;
                                break;
                            case "grossPay2":
                                params.grossPay2 = (templateInfo.grossPay2 != undefined) ? templateInfo.grossPay2 : undefined;
                                break;
                            case "grossPay3":
                                params.grossPay3 = (templateInfo.grossPay3 != undefined) ? templateInfo.grossPay3 : undefined;
                                break;
                            case "dateEmployedFrom":
                                params.dateEmployedFrom = (templateInfo.dateEmployedFrom != undefined) ? templateInfo.dateEmployedFrom : undefined;
                                break;
                            case "dateEmployedTo":
                                params.dateEmployedTo = (templateInfo.dateEmployedTo != undefined) ? templateInfo.dateEmployedTo : undefined;
                                break;
                            case "dateEmployedTo2":
                                params.dateEmployedTo2 = (templateInfo.dateEmployedTo2 != undefined) ? templateInfo.dateEmployedTo2 : undefined;
                                break;
                            case "dateEmployedTo3":
                                params.dateEmployedTo3 = (templateInfo.dateEmployedTo3 != undefined) ? templateInfo.dateEmployedTo3 : undefined;
                                break;
                            case "plaintiffEmployerIds":
                                params.plaintiffEmployerIds = (templateInfo.plaintiffEmployerIds != undefined) ? templateInfo.plaintiffEmployerIds : undefined;
                                break;
                            case "plaintiffEmployerIds2":
                                params.plaintiffEmployerIds2 = (templateInfo.plaintiffEmployerIds2 != undefined) ? templateInfo.plaintiffEmployerIds2 : undefined;
                                break;
                            case "plaintiffEmployerIds3":
                                params.plaintiffEmployerIds3 = (templateInfo.plaintiffEmployerIds3 != undefined) ? templateInfo.plaintiffEmployerIds3 : undefined;
                                break;
                            case "plaintiffInsuranceIds":
                                params.plaintiffInsuranceIds = (templateInfo.plaintiffInsuranceIds != undefined) ? templateInfo.plaintiffInsuranceIds : undefined;
                                break;
                            case "plaintiffInsuranceIds1":
                                params.plaintiffInsuranceIds1 = (templateInfo.plaintiffInsuranceIds1 != undefined) ? templateInfo.plaintiffInsuranceIds1 : undefined;
                                break;
                            case "plaintiffInsuranceIds2":
                                params.plaintiffInsuranceIds2 = (templateInfo.plaintiffInsuranceIds2 != undefined) ? templateInfo.plaintiffInsuranceIds2 : undefined;
                                break;
                            case "negotiationIds":
                                params.negotiationIds = (templateInfo.negotiationIds != undefined) ? templateInfo.negotiationIds : undefined;
                                break;
                            case "plaintiffInsuranceIdsPIP":
                                params.plaintiffInsuranceIdsPIP = (templateInfo.plaintiffInsuranceIdsPIP != undefined) ? templateInfo.plaintiffInsuranceIdsPIP : undefined;
                                break;
                            case "plaintiffInsuranceIdsUIM":
                                params.plaintiffInsuranceIdsUIM = (templateInfo.plaintiffInsuranceIdsUIM != undefined) ? templateInfo.plaintiffInsuranceIdsUIM : undefined;
                                break;
                            case "attorneyAddress":
                                params.attorneyAddress = (templateInfo.attorneyAddress != undefined) ? templateInfo.attorneyAddress : undefined;
                                break;
                            case "liabilityBasis":
                                params.liabilityBasis = (templateInfo.liabilityBasis != undefined) ? templateInfo.liabilityBasis : undefined;
                                break;
                            case "dateOfMarriage":
                                params.dateOfMarriage = (templateInfo.dateOfMarriage != undefined) ? templateInfo.dateOfMarriage : undefined;
                                break;
                            case "userAddress":
                                params.userAddress = (templateInfo.userAddress != undefined) ? templateInfo.userAddress : undefined;
                                break;
                            case "dateEmployedFrom2":
                                params.dateEmployedFrom2 = (templateInfo.dateEmployedFrom2 != undefined) ? templateInfo.dateEmployedFrom2 : undefined;
                                break;
                            case "dateEmployedFrom3":
                                params.dateEmployedFrom3 = (templateInfo.dateEmployedFrom3 != undefined) ? templateInfo.dateEmployedFrom3 : undefined;
                                break;
                            case "workerCompAttorney":
                                params.workerCompAttorney = (templateInfo.workerCompAttorney != undefined) ? templateInfo.workerCompAttorney : undefined;
                                break;
                            case "checkAmount":
                                params.checkAmount = (templateInfo.checkAmount != undefined) ? templateInfo.checkAmount : undefined;
                                break;
                            case "defendantsArray":
                                params.defendantsArray = (templateInfo.defendantsArray != undefined) ? templateInfo.defendantsArray : undefined;
                                break;
                            case "vehicleInfo":
                                (templateInfo.vehicleInfo == undefined) ? params.vehicleInfo = undefined : params.vehicleInfo = templateInfo.vehicleInfo;
                                break;
                            case "vinNumber":
                                (templateInfo.vinNumber == undefined) ? params.vinNumber = undefined : params.vinNumber = templateInfo.vinNumber;
                                break;
                            case "defendants_single":
                                (templateInfo.defendants_single == undefined) ? params.defendants_single = undefined : params.defendants_single = templateInfo.defendants_single;
                                break;
                            case "bodyPart":
                                (templateInfo.bodyPart == undefined) ? params.bodyPart = undefined : params.bodyPart = templateInfo.bodyPart;
                                break;
                            case "mriNumber":
                                (templateInfo.mriNumber == undefined) ? params.mriNumber = undefined : params.mriNumber = templateInfo.mriNumber;
                                break;
                            case "mriResult":
                                (templateInfo.mriResult == undefined) ? params.mriResult = undefined : params.mriResult = templateInfo.mriResult;
                                break;
                            case "custodianName":
                                (templateInfo.custodianName == undefined) ? params.custodianName = undefined : params.custodianName = templateInfo.custodianName;
                                break;
                            case "patientId":
                                (templateInfo.patientId == undefined) ? params.patientId = undefined : params.patientId = templateInfo.patientId;
                                break;
                            case "signerName":
                                (templateInfo.signerName == undefined) ? params.signerName = undefined : params.signerName = templateInfo.signerName;
                                break;
                            case "hearingDate":
                                (templateInfo.hearingDate == undefined) ? params.hearingDate = undefined : params.hearingDate = utils.getUTCTimeStamp(templateInfo.hearingDate);
                                break;
                            case "infantResidenceCounty":
                                params.infantResidenceCounty = (templateInfo.infantResidenceCounty != undefined) ? templateInfo.infantResidenceCounty : undefined;
                                break;
                            case "defVehicleState":
                                params.defVehicleState = (templateInfo.defVehicleState != undefined) ? templateInfo.defVehicleState : undefined;
                                break;
                            case "defVehicleState2":
                                params.defVehicleState2 = (templateInfo.defVehicleState2 != undefined) ? templateInfo.defVehicleState2 : undefined;
                                break;
                            case "defVehicleNumber":
                                params.defVehicleNumber = (templateInfo.defVehicleNumber != undefined) ? templateInfo.defVehicleNumber : undefined;
                                break;
                            case "defVehicleNumber2":
                                params.defVehicleNumber2 = (templateInfo.defVehicleNumber2 != undefined) ? templateInfo.defVehicleNumber2 : undefined;
                                break;
                            case "defBusinessName":
                                params.defBusinessName = (templateInfo.defBusinessName != undefined) ? templateInfo.defBusinessName : undefined;
                                break;
                            case "defBusinessAddress":
                                params.defBusinessAddress = (templateInfo.defBusinessAddress != undefined) ? templateInfo.defBusinessAddress : undefined;
                                break;
                            case "defBusinessCounty":
                                params.defBusinessCounty = (templateInfo.defBusinessCounty != undefined) ? templateInfo.defBusinessCounty : undefined;
                                break;
                            case "defVehicleRegistration":
                                params.defVehicleRegistration = (templateInfo.defVehicleRegistration != undefined) ? templateInfo.defVehicleRegistration : undefined;
                                break;
                            case "defVehicleOwner":
                                params.defVehicleOwner = (templateInfo.defVehicleOwner != undefined) ? templateInfo.defVehicleOwner : undefined;
                                break;
                            case "defResidenceState":
                                params.defResidenceState = (templateInfo.defResidenceState != undefined) ? templateInfo.defResidenceState : undefined;
                                break;
                            case "defVehicleType":
                                params.defVehicleType = (templateInfo.defVehicleType != undefined) ? templateInfo.defVehicleType : undefined;
                                break;
                            case "PlaintiffResidenceCounty":
                                params.PlaintiffResidenceCounty = (templateInfo.PlaintiffResidenceCounty != undefined) ? templateInfo.PlaintiffResidenceCounty : undefined;
                                break;
                            case "DefendantsResidenceCounty_1":
                                params.DefendantsResidenceCounty_1 = (templateInfo.DefendantsResidenceCounty_1 != undefined) ? templateInfo.DefendantsResidenceCounty_1 : undefined;
                                break;
                            case "DefendantsResidenceCounty":
                                params.DefendantsResidenceCounty = (templateInfo.DefendantsResidenceCounty != undefined) ? templateInfo.DefendantsResidenceCounty : undefined;
                                break;
                            case "DefendantsResidenceCounty_2":
                                params.DefendantsResidenceCounty_2 = (templateInfo.DefendantsResidenceCounty_2 != undefined) ? templateInfo.DefendantsResidenceCounty_2 : undefined;
                                break;
                            case "AttorneyResidenceCounty":
                                params.AttorneyResidenceCounty = (templateInfo.AttorneyResidenceCounty != undefined) ? templateInfo.AttorneyResidenceCounty : undefined;
                                break;
                            case "UDMCCombinedResponse":
                                params.UDMCCombinedResponse = (templateInfo.UDMCCombinedResponse != undefined) ? templateInfo.UDMCCombinedResponse : undefined;
                                break;
                            case "Associatedattorneyname":
                                params.Associatedattorneyname = (templateInfo.Associatedattorneyname != undefined) ? templateInfo.Associatedattorneyname : undefined;
                                break;
                            case "DefendantVehicleInformation":
                                params.DefendantVehicleInformation = (templateInfo.DefendantVehicleInformation != undefined) ? templateInfo.DefendantVehicleInformation : undefined;
                                break;
                            case "DefendantStateoftheLicensePlates":
                                params.DefendantStateoftheLicensePlates = (templateInfo.DefendantStateoftheLicensePlates != undefined) ? templateInfo.DefendantStateoftheLicensePlates : undefined;
                                break;
                            case "DefendantVehiclePlateNumber":
                                params.DefendantVehiclePlateNumber = (templateInfo.DefendantVehiclePlateNumber != undefined) ? templateInfo.DefendantVehiclePlateNumber : undefined;
                                break;
                            case "PlaintiffVehiclesInformation":
                                params.PlaintiffVehiclesInformation = (templateInfo.PlaintiffVehiclesInformation != undefined) ? templateInfo.PlaintiffVehiclesInformation : undefined;
                                break;
                            case "PlaintiffStateoftheLicensePlates":
                                params.PlaintiffStateoftheLicensePlates = (templateInfo.PlaintiffStateoftheLicensePlates != undefined) ? templateInfo.PlaintiffStateoftheLicensePlates : undefined;
                                break;
                            case "PlaintiffVehiclePlateNumber":
                                params.PlaintiffVehiclePlateNumber = (templateInfo.PlaintiffVehiclePlateNumber != undefined) ? templateInfo.PlaintiffVehiclePlateNumber : undefined;
                                break;
                            case "CountyoftheLocationofAccident":
                                params.CountyoftheLocationofAccident = (templateInfo.CountyoftheLocationofAccident != undefined) ? templateInfo.CountyoftheLocationofAccident : undefined;
                                break;
                            case "Accidenttime":
                                params.Accidenttime = (templateInfo.Accidenttime != undefined) ? templateInfo.Accidenttime : undefined;
                                break;
                            case "defVehicleOwner2":
                                params.defVehicleOwner2 = (templateInfo.defVehicleOwner2 != undefined) ? templateInfo.defVehicleOwner2 : undefined;
                                break;
                            case "locationOfIncidentCounty":
                                params.locationOfIncidentCounty = (templateInfo.locationOfIncidentCounty != undefined) ? templateInfo.locationOfIncidentCounty : undefined;
                                break;
                            case "plaintiffVehicleRegistrationState":
                                params.plaintiffVehicleRegistrationState = (templateInfo.plaintiffVehicleRegistrationState != undefined) ? templateInfo.plaintiffVehicleRegistrationState : undefined;
                                break;
                            case "plaintiffVehicleRegistrationNumber":
                                params.plaintiffVehicleRegistrationNumber = (templateInfo.plaintiffVehicleRegistrationNumber != undefined) ? templateInfo.plaintiffVehicleRegistrationNumber : undefined;
                                break;
                            case "defendantAddress":
                                params.defendantAddress = (templateInfo.defendantAddress != undefined) ? templateInfo.defendantAddress : undefined;
                                break;
                            case "entityHired":
                                params.entityHired = (templateInfo.entityHired != undefined) ? templateInfo.entityHired : undefined;
                                break;
                            case "defPremisesAddress":
                                params.defPremisesAddress = (templateInfo.defPremisesAddress != undefined) ? templateInfo.defPremisesAddress : undefined;
                                break;
                            case "defPremisesCounty":
                                params.defPremisesCounty = (templateInfo.defPremisesCounty != undefined) ? templateInfo.defPremisesCounty : undefined;
                                break;
                            case "entityHiredPerformTask":
                                params.entityHiredPerformTask = (templateInfo.entityHiredPerformTask != undefined) ? templateInfo.entityHiredPerformTask : undefined;
                                break;
                            case "defBusinessState":
                                params.defBusinessState = (templateInfo.defBusinessState != undefined) ? templateInfo.defBusinessState : undefined;
                                break;
                            case "attoContactNumber":
                                params.attoContactNumber = (templateInfo.attoContactNumber != undefined) ? templateInfo.attoContactNumber : undefined;
                                break;
                            case "secDefVehicleRegistration":
                                params.secDefVehicleRegistration = (templateInfo.secDefVehicleRegistration != undefined) ? templateInfo.secDefVehicleRegistration : undefined;
                                break;
                            case "heldDateText":
                                params.heldDateText = (templateInfo.heldDateText != undefined) ? templateInfo.heldDateText : undefined;
                                break;
                            case "SpecialPreferenceClaimedInfo":
                                params.SpecialPreferenceClaimedInfo = (templateInfo.SpecialPreferenceClaimedInfo != undefined) ? templateInfo.SpecialPreferenceClaimedInfo : undefined;
                                break;
                            case "otherReliefDemanded":
                                params.otherReliefDemanded = (templateInfo.otherReliefDemanded != undefined) ? templateInfo.otherReliefDemanded : undefined;
                                break;
                            case "GroundsforSpecialPreference":
                                params.GroundsforSpecialPreference = (templateInfo.GroundsforSpecialPreference != undefined) ? templateInfo.GroundsforSpecialPreference : undefined;
                                break;
                            case "calenderNumber":
                                params.calenderNumber = (templateInfo.calenderNumber != undefined) ? templateInfo.calenderNumber : undefined;
                                break;
                            case "courtCounty":
                                params.courtCounty = (templateInfo.courtCounty != undefined) ? templateInfo.courtCounty : undefined;
                                break;
                            case "assignJudge":
                                params.assignJudge = (templateInfo.assignJudge != undefined) ? templateInfo.assignJudge : undefined;
                                break;
                            case "summonServeDate":
                                (templateInfo.summonServeDate == undefined) ? params.summonServeDate = undefined : params.summonServeDate = utils.getUTCTimeStamp(templateInfo.summonServeDate);
                                break;
                            case "stipulationDate":
                                (templateInfo.stipulationDate == undefined) ? params.stipulationDate = undefined : params.stipulationDate = utils.getUTCTimeStamp(templateInfo.stipulationDate);
                                break;
                            case "paymentByClientDate":
                                (templateInfo.paymentByClientDate == undefined) ? params.paymentByClientDate = undefined : params.paymentByClientDate = utils.getUTCTimeStamp(templateInfo.paymentByClientDate);
                                break;
                            case "paymentToClientDate":
                                (templateInfo.paymentToClientDate == undefined) ? params.paymentToClientDate = undefined : params.paymentToClientDate = utils.getUTCTimeStamp(templateInfo.paymentToClientDate);
                                break;
                            case "issueJoinedDate":
                                (templateInfo.issueJoinedDate == undefined) ? params.issueJoinedDate = undefined : params.issueJoinedDate = utils.getUTCTimeStamp(templateInfo.issueJoinedDate);
                                break;
                            case "serviceComplatedDate":
                                (templateInfo.serviceComplatedDate == undefined) ? params.serviceComplatedDate = undefined : params.serviceComplatedDate = utils.getUTCTimeStamp(templateInfo.serviceComplatedDate);
                                break;
                            case "IndexDate":
                                (templateInfo.IndexDate == undefined) ? params.IndexDate = undefined : params.IndexDate = utils.getUTCTimeStamp(templateInfo.IndexDate);
                                break;
                            case "custodianCounty":
                                params.custodianCounty = (templateInfo.custodianCounty != undefined) ? templateInfo.custodianCounty : undefined;
                                break;
                            case "custodianState":
                                params.custodianState = (templateInfo.custodianState != undefined) ? templateInfo.custodianState : undefined;
                                break;
                            case "estateAdminId":
                                params.estateAdminId = (templateInfo.estateAdminId != undefined) ? templateInfo.estateAdminId : undefined;
                                break;
                            case "depositionDate":
                                params.depositionDate = (templateInfo.depositionDate != undefined) ? templateInfo.depositionDate = utils.getUTCTimeStamp(templateInfo.depositionDate) : undefined;
                                break;
                            case "ebt_Date":
                                params.ebt_Date = (templateInfo.ebt_Date != undefined) ? templateInfo.ebt_Date = utils.getUTCTimeStamp(templateInfo.ebt_Date) : undefined;
                                break;
                            case "ebt_Date_Taken":
                                params.ebt_Date_Taken = (templateInfo.ebt_Date_Taken != undefined) ? templateInfo.ebt_Date_Taken = utils.getUTCTimeStamp(templateInfo.ebt_Date_Taken) : undefined;
                                break;
                            case "ebt_Date_Enclosure":
                                params.ebt_Date_Enclosure = (templateInfo.ebt_Date_Enclosure != undefined) ? templateInfo.ebt_Date_Enclosure = utils.getUTCTimeStamp(templateInfo.ebt_Date_Enclosure) : undefined;
                                break;
                            case "claimDeny_Date":
                                params.claimDeny_Date = (templateInfo.claimDeny_Date != undefined) ? templateInfo.claimDeny_Date = utils.getUTCTimeStamp(templateInfo.claimDeny_Date) : undefined;
                                break;
                            case "service_Date":
                                params.service_Date = (templateInfo.service_Date != undefined) ? templateInfo.service_Date = utils.getUTCTimeStamp(templateInfo.service_Date) : undefined;
                                break;
                            case "DateofDefendantDemands":
                                params.DateofDefendantDemands = (templateInfo.DateofDefendantDemands != undefined) ? templateInfo.DateofDefendantDemands = utils.getUTCTimeStamp(templateInfo.DateofDefendantDemands) : undefined;
                                break;
                            case "check_Date":
                                params.check_Date = (templateInfo.check_Date != undefined) ? templateInfo.check_Date = utils.getUTCTimeStamp(templateInfo.check_Date) : undefined;
                                break;
                            case "request_Date":
                                params.request_Date = (templateInfo.request_Date != undefined) ? templateInfo.request_Date = utils.getUTCTimeStamp(templateInfo.request_Date) : undefined;
                                break;
                            case "authorization_Date":
                                params.authorization_Date = (templateInfo.authorization_Date != undefined) ? templateInfo.authorization_Date = utils.getUTCTimeStamp(templateInfo.authorization_Date) : undefined;
                                break;
                            case "willDate":
                                params.willDate = (templateInfo.willDate != undefined) ? templateInfo.willDate = utils.getUTCTimeStamp(templateInfo.willDate) : undefined;
                                break;
                            case "accidentDate":
                                params.accidentDate = (templateInfo.accidentDate != undefined) ? templateInfo.accidentDate = utils.getUTCTimeStamp(templateInfo.accidentDate) : undefined;
                                break;
                            case "otherPartyPhysician":
                                params.otherPartyPhysician = (templateInfo.otherPartyPhysician != undefined) ? templateInfo.otherPartyPhysician : undefined;
                                break;
                            case "otherPartyPhysician2":
                                params.otherPartyPhysician2 = (templateInfo.otherPartyPhysician2 != undefined) ? templateInfo.otherPartyPhysician2 : undefined;
                                break;
                            case "onlyInsuranceId2":
                                params.onlyInsuranceId2 = templateInfo.onlyInsuranceId2;
                                break;
                            case "defendantAttorneyTitle":
                                params.defendantAttorneyTitle = (templateInfo.defendantAttorneyTitle != undefined) ? templateInfo.defendantAttorneyTitle : undefined;
                                break;
                            case "conferenceHeldDate":
                                params.conferenceHeldDate = (templateInfo.conferenceHeldDate != undefined) ? templateInfo.conferenceHeldDate = utils.getUTCTimeStamp(templateInfo.conferenceHeldDate) : undefined;
                                break;
                            case "depositionHeldDate":
                                params.depositionHeldDate = (templateInfo.depositionHeldDate != undefined) ? templateInfo.depositionHeldDate = utils.getUTCTimeStamp(templateInfo.depositionHeldDate) : undefined;
                                break;
                            case "depositionTransEnclosure":
                                params.depositionTransEnclosure = (templateInfo.depositionTransEnclosure != undefined) ? templateInfo.depositionTransEnclosure = utils.getUTCTimeStamp(templateInfo.depositionTransEnclosure) : undefined;
                                break;
                            case "depositionParties":
                                params.depositionParties = (templateInfo.depositionParties != undefined) ? templateInfo.depositionParties : undefined;
                                break;
                            case "blueback_document":
                                params.blueback_document = (templateInfo.blueback_document != undefined) ? templateInfo.blueback_document : '';
                                break;
                            case "desc_Accident":
                                params.desc_Accident = (templateInfo.desc_Accident != undefined) ? templateInfo.desc_Accident : undefined;
                                break;
                            case "soleventid":
                                (templateInfo.soleventid == undefined) ? params.soleventid = undefined : params.soleventid = templateInfo.soleventid;
                                break;
                            case "payeeName":
                                (templateInfo.payeeName == undefined) ? params.payeeName = undefined : params.payeeName = templateInfo.payeeName;
                                break;
                            case "checkPurpose":
                                (templateInfo.checkPurpose == undefined) ? params.checkPurpose = undefined : params.checkPurpose = templateInfo.checkPurpose;
                                break;
                            case "submittedName":
                                (templateInfo.submittedName == undefined) ? params.submittedName = undefined : params.submittedName = templateInfo.submittedName;
                                break;
                            case "checkNumber":
                                (templateInfo.checkNumber == undefined) ? params.checkNumber = undefined : params.checkNumber = templateInfo.checkNumber;
                                break;
                            case "akaName":
                                (templateInfo.akaName == undefined) ? params.akaName = undefined : params.akaName = templateInfo.akaName;
                                break;
                            case "petitionerName":
                                (templateInfo.petitionerName == undefined) ? params.petitionerName = undefined : params.petitionerName = templateInfo.petitionerName;
                                break;
                            case "petitionerStreet":
                                (templateInfo.petitionerStreet == undefined) ? params.petitionerStreet = undefined : params.petitionerStreet = templateInfo.petitionerStreet;
                                break;
                            case "petitionerCityStateZip":
                                (templateInfo.petitionerCityStateZip == undefined) ? params.petitionerCityStateZip = undefined : params.petitionerCityStateZip = templateInfo.petitionerCityStateZip;
                                break;
                            case "petitionerCitizenship":
                                (templateInfo.petitionerCitizenship == undefined) ? params.petitionerCitizenship = undefined : params.petitionerCitizenship = templateInfo.petitionerCitizenship;
                                break;
                            case "deathPlace":
                                (templateInfo.deathPlace == undefined) ? params.deathPlace = undefined : params.deathPlace = templateInfo.deathPlace;
                                break;
                            case "decedentCitizenship":
                                (templateInfo.decedentCitizenship == undefined) ? params.decedentCitizenship = undefined : params.decedentCitizenship = templateInfo.decedentCitizenship;
                                break;
                            case "decedentResidentCounty":
                                (templateInfo.decedentResidentCounty == undefined) ? params.decedentResidentCounty = undefined : params.decedentResidentCounty = templateInfo.decedentResidentCounty;
                                break;
                            case "deceasedPlaintiffs":
                                (templateInfo.deceasedPlaintiffs == undefined) ? params.deceasedPlaintiffs = undefined : params.deceasedPlaintiffs = templateInfo.deceasedPlaintiffs;
                                break;
                            case "dateOfLetters":
                                params.dateOfLetters = (templateInfo.dateOfLetters != undefined) ? templateInfo.dateOfLetters = utils.getUTCTimeStamp(templateInfo.dateOfLetters) : undefined;
                                break;
                            case "typeOfLetters":
                                (templateInfo.typeOfLetters == undefined) ? params.typeOfLetters = undefined : params.typeOfLetters = templateInfo.typeOfLetters;
                                break;
                            case "ServedPersonName":
                                (templateInfo.ServedPersonName == undefined) ? params.ServedPersonName = undefined : params.ServedPersonName = templateInfo.ServedPersonName;
                                break;
                            case "ServedPersonCity":
                                (templateInfo.ServedPersonCity == undefined) ? params.ServedPersonCity = undefined : params.ServedPersonCity = templateInfo.ServedPersonCity;
                                break;
                            case "Plaintiff_attorneys_address":
                                (templateInfo.Plaintiff_attorneys_address == undefined) ? params.Plaintiff_attorneys_address = undefined : params.Plaintiff_attorneys_address = templateInfo.Plaintiff_attorneys_address;
                                break;
                            case "fiduciaryName":
                                (templateInfo.fiduciaryName == undefined) ? params.fiduciaryName = undefined : params.fiduciaryName = templateInfo.fiduciaryName;
                                break;
                            case "medicatedId":
                                (templateInfo.medicatedId == undefined) ? params.medicatedId = undefined : params.medicatedId = templateInfo.medicatedId;
                                break;
                            case "hicNumber":
                                (templateInfo.hicNumber == undefined) ? params.hicNumber = undefined : params.hicNumber = templateInfo.hicNumber;
                                break;
                            case "petitionerContact":
                                (templateInfo.petitionerContact == undefined) ? params.petitionerContact = undefined : params.petitionerContact = templateInfo.petitionerContact;
                                break;
                            case "petitionerZip":
                                (templateInfo.petitionerZip == undefined) ? params.petitionerZip = undefined : params.petitionerZip = templateInfo.petitionerZip;
                                break;
                            case "groupNum":
                                params.groupNum = (templateInfo.groupNum != undefined) ? templateInfo.groupNum : undefined;
                                break;
                            case "groupNum2":
                                params.groupNum2 = (templateInfo.groupNum2 != undefined) ? templateInfo.groupNum2 : undefined;
                                break;
                            case "cardHolderName":
                                params.cardHolderName = (templateInfo.cardHolderName != undefined) ? templateInfo.cardHolderName : undefined;
                                break;
                            case "cardHolderName2":
                                params.cardHolderName2 = (templateInfo.cardHolderName2 != undefined) ? templateInfo.cardHolderName2 : undefined;
                                break;
                            case "roomNumber":
                                (templateInfo.roomNumber == undefined) ? params.roomNumber = undefined : params.roomNumber = templateInfo.roomNumber;
                                break;
                            case "trialDate":
                                params.trialDate = (templateInfo.trialDate != undefined) ? templateInfo.trialDate = utils.getUTCTimeStamp(templateInfo.trialDate) : undefined;
                                break;
                            case "witnessName":
                                (templateInfo.witnessName == undefined) ? params.witnessName = undefined : params.witnessName = templateInfo.witnessName;
                                break;
                            case "witnessName1":
                                (templateInfo.witnessName1 == undefined) ? params.witnessName1 = undefined : params.witnessName1 = templateInfo.witnessName1;
                                break;
                            case "bill_Date":
                                params.bill_Date = (templateInfo.bill_Date != undefined) ? templateInfo.bill_Date = utils.getUTCTimeStamp(templateInfo.bill_Date) : undefined;
                                break;
                            case "Interrogatories_Date":
                                params.Interrogatories_Date = (templateInfo.Interrogatories_Date != undefined) ? templateInfo.Interrogatories_Date = utils.getUTCTimeStamp(templateInfo.Interrogatories_Date) : undefined;
                                break;
                            case "denial_Date":
                                params.denial_Date = (templateInfo.denial_Date != undefined) ? templateInfo.denial_Date = utils.getUTCTimeStamp(templateInfo.denial_Date) : undefined;
                                break;
                            case "hospital_admitted_date":
                                params.hospital_admitted_date = (templateInfo.hospital_admitted_date != undefined) ? templateInfo.hospital_admitted_date = utils.getUTCTimeStamp(templateInfo.hospital_admitted_date) : undefined;
                                break;
                            case "treatment_admitted_date":
                                params.treatment_admitted_date = (templateInfo.treatment_admitted_date != undefined) ? templateInfo.treatment_admitted_date = utils.getUTCTimeStamp(templateInfo.treatment_admitted_date) : undefined;
                                break;
                            case "denialBasis":
                                params.denialBasis = (templateInfo.denialBasis != undefined) ? templateInfo.denialBasis : undefined;
                                break;
                            case "generalInfo":
                                params.generalInfo = (templateInfo.generalInfo != undefined) ? templateInfo.generalInfo : undefined;
                                break;
                            case "educationInfo":
                                params.educationInfo = (templateInfo.educationInfo != undefined) ? templateInfo.educationInfo : undefined;
                                break;
                            case "employmentInfo":
                                params.employmentInfo = (templateInfo.employmentInfo != undefined) ? templateInfo.employmentInfo : undefined;
                                break;
                            case "affiliationInfo":
                                params.affiliationInfo = (templateInfo.affiliationInfo != undefined) ? templateInfo.affiliationInfo : undefined;
                                break;
                            case "awards":
                                params.awards = (templateInfo.awards != undefined) ? templateInfo.awards : undefined;
                                break;
                            case "professionalExperience":
                                params.professionalExperience = (templateInfo.professionalExperience != undefined) ? templateInfo.professionalExperience : undefined;
                                break;
                            case "awardsHonors":
                                params.awardsHonors = (templateInfo.awardsHonors != undefined) ? templateInfo.awardsHonors : undefined;
                                break;
                            case "professionalPosition":
                                params.professionalPosition = (templateInfo.professionalPosition != undefined) ? templateInfo.professionalPosition : undefined;
                                break;
                            case "communityOutreach":
                                params.communityOutreach = (templateInfo.communityOutreach != undefined) ? templateInfo.communityOutreach : undefined;
                                break;
                            case "speakingEngagement":
                                params.speakingEngagement = (templateInfo.speakingEngagement != undefined) ? templateInfo.speakingEngagement : undefined;
                                break;
                            case "publicationInfo":
                                params.publicationInfo = (templateInfo.publicationInfo != undefined) ? templateInfo.publicationInfo : undefined;
                                break;
                            case "billType":
                                params.billType = (templateInfo.billType != undefined) ? templateInfo.billType : undefined;
                                break;
                            case "courtFax":
                                params.courtFax = (templateInfo.courtFax != undefined) ? templateInfo.courtFax : undefined;
                                break;
                            case "cancelArbitration":
                                params.cancelArbitration = (templateInfo.cancelArbitration != undefined) ? templateInfo.cancelArbitration : undefined;
                                break;
                            case "judgeName":
                                params.judgeName = (templateInfo.judgeName != undefined) ? templateInfo.judgeName : undefined;
                                break;
                            case "judgeLastName":
                                params.judgeLastName = (templateInfo.judgeLastName != undefined) ? templateInfo.judgeLastName : undefined;
                                break;
                            case "judgeFax":
                                params.judgeFax = (templateInfo.judgeFax != undefined) ? templateInfo.judgeFax : undefined;
                                break;
                            case "judgeStreet":
                                params.judgeStreet = (templateInfo.judgeStreet != undefined) ? templateInfo.judgeStreet : undefined;
                                break;
                            case "judgeCity":
                                params.judgeCity = (templateInfo.judgeCity != undefined) ? templateInfo.judgeCity : undefined;
                                break;
                            case "judgeState":
                                params.judgeState = (templateInfo.judgeState != undefined) ? templateInfo.judgeState : undefined;
                                break;
                            case "judgeZip":
                                params.judgeZip = (templateInfo.judgeZip != undefined) ? templateInfo.judgeZip : undefined;
                                break;
                            case "civilTeamLeadFax":
                                params.civilTeamLeadFax = (templateInfo.civilTeamLeadFax != undefined) ? templateInfo.civilTeamLeadFax : undefined;
                                break;
                            case "civilTeamLeadName":
                                params.civilTeamLeadName = (templateInfo.civilTeamLeadName != undefined) ? templateInfo.civilTeamLeadName : undefined;
                                break;
                            case "civilTeamLeadLastName":
                                params.civilTeamLeadLastName = (templateInfo.civilTeamLeadLastName != undefined) ? templateInfo.civilTeamLeadLastName : undefined;
                                break;
                            case "civilTeamLeadStreet":
                                params.civilTeamLeadStreet = (templateInfo.civilTeamLeadStreet != undefined) ? templateInfo.civilTeamLeadStreet : undefined;
                                break;
                            case "civilTeamLeadCity":
                                params.civilTeamLeadCity = (templateInfo.civilTeamLeadCity != undefined) ? templateInfo.civilTeamLeadCity : undefined;
                                break;
                            case "civilTeamLeadState":
                                params.civilTeamLeadState = (templateInfo.civilTeamLeadState != undefined) ? templateInfo.civilTeamLeadState : undefined;
                                break;
                            case "civilTeamLeadZip":
                                params.civilTeamLeadZip = (templateInfo.civilTeamLeadZip != undefined) ? templateInfo.civilTeamLeadZip : undefined;
                                break;
                            case "to_discovery_date":
                                params.to_discovery_date = (templateInfo.to_discovery_date != undefined) ? templateInfo.to_discovery_date = utils.getUTCTimeStamp(templateInfo.to_discovery_date) : undefined;
                                break;
                            case "from_discovery_date":
                                params.from_discovery_date = (templateInfo.from_discovery_date != undefined) ? templateInfo.from_discovery_date = utils.getUTCTimeStamp(templateInfo.from_discovery_date) : undefined;
                                break;
                            case "spouse":
                                params.spouse = (templateInfo.spouse != undefined) ? templateInfo.spouse : undefined;
                                break;
                            case "title":
                                params.title = (templateInfo.title != undefined) ? templateInfo.title : undefined;
                                break;
                            case "pronoun":
                                params.pronoun = (templateInfo.pronoun != undefined) ? templateInfo.pronoun : undefined;
                                break;
                            case "communicationMethod":
                                params.communicationMethod = (templateInfo.communicationMethod != undefined) ? templateInfo.communicationMethod : undefined;
                                break;
                            case "communicationMethod_1":
                                params.communicationMethod_1 = (templateInfo.communicationMethod_1 != undefined) ? templateInfo.communicationMethod_1 : undefined;
                                break;
                            case "yesNoOpt":
                                params.yesNoOpt = (templateInfo.yesNoOpt != undefined) ? templateInfo.yesNoOpt : undefined;
                                break;
                            case "option1":
                                params.option1 = (templateInfo.option1 != undefined) ? templateInfo.option1 : undefined;
                                break;
                            case "userName":
                                params.userName = (templateInfo.userName != undefined) ? templateInfo.userName : undefined;
                                break;
                            case "mailId":
                                params.mailId = (templateInfo.mailId != undefined) ? templateInfo.mailId : undefined;
                                break;
                            case "directorName":
                                params.directorName = (templateInfo.directorName != undefined) ? templateInfo.directorName : undefined;
                                break;
                            case "directorLastName":
                                params.directorLastName = (templateInfo.directorLastName != undefined) ? templateInfo.directorLastName : undefined;
                                break;
                            case "directorStreet":
                                params.directorStreet = (templateInfo.directorStreet != undefined) ? templateInfo.directorStreet : undefined;
                                break;
                            case "directorCity":
                                params.directorCity = (templateInfo.directorCity != undefined) ? templateInfo.directorCity : undefined;
                                break;
                            case "directorState":
                                params.directorState = (templateInfo.directorState != undefined) ? templateInfo.directorState : undefined;
                                break;
                            case "directorZip":
                                params.directorZip = (templateInfo.directorZip != undefined) ? templateInfo.directorZip : undefined;
                                break;
                            case "directorContact":
                                params.directorContact = (templateInfo.directorContact != undefined) ? templateInfo.directorContact : undefined;
                                break;
                            case "schoolDistrict":
                                params.schoolDistrict = (templateInfo.schoolDistrict != undefined) ? templateInfo.schoolDistrict : undefined;
                                break;
                            case "plaintiffsGuardian":
                                params.plaintiffsGuardian = (templateInfo.plaintiffsGuardian != undefined) ? templateInfo.plaintiffsGuardian : undefined;
                                break;
                            case "hmsNumber":
                                (templateInfo.hmsNumber == undefined) ? params.hmsNumber = undefined : params.hmsNumber = templateInfo.hmsNumber;
                                break;
                            case "codeNumber":
                                (templateInfo.codeNumber == undefined) ? params.codeNumber = undefined : params.codeNumber = templateInfo.codeNumber;
                                break;
                            case "retainerNumber":
                                (templateInfo.retainerNumber == undefined) ? params.retainerNumber = undefined : params.retainerNumber = templateInfo.retainerNumber;
                                break;
                            case "attorneyDistrict":
                                params.attorneyDistrict = (templateInfo.attorneyDistrict != undefined) ? templateInfo.attorneyDistrict : undefined;
                                break;
                            case "attorneyDepartment":
                                params.attorneyDepartment = (templateInfo.attorneyDepartment != undefined) ? templateInfo.attorneyDepartment : undefined;
                                break;
                            case "attorneyCounty":
                                params.attorneyCounty = (templateInfo.attorneyCounty != undefined) ? templateInfo.attorneyCounty : undefined;
                                break;
                            case "courtReporter":
                                (templateInfo.courtReporter == undefined) ? params.courtReporter = undefined : params.courtReporter = templateInfo.courtReporter;
                                break;
                            case "courtReporterVideographer":
                                (templateInfo.courtReporterVideographer == undefined) ? params.courtReporterVideographer = undefined : params.courtReporterVideographer = templateInfo.courtReporterVideographer;
                                break;
                            case "contactName":
                                (templateInfo.contactName == undefined) ? params.contactName = undefined : params.contactName = templateInfo.contactName;
                                break;
                            case "acrNumber":
                                (templateInfo.acrNumber == undefined) ? params.acrNumber = undefined : params.acrNumber = templateInfo.acrNumber;
                                break;
                            case "treatmentDate":
                                (templateInfo.treatmentDate == undefined) ? params.treatmentDate = undefined : params.treatmentDate = templateInfo.treatmentDate;
                                break;
                            case "thirdPartyCopy":
                                (templateInfo.thirdPartyCopy == undefined) ? params.thirdPartyCopy = undefined : params.thirdPartyCopy = templateInfo.thirdPartyCopy;
                                break;
                            case "authorizationAddress":
                                (templateInfo.authorizationAddress == undefined) ? params.authorizationAddress = undefined : params.authorizationAddress = templateInfo.authorizationAddress;
                                break;
                            case "merdianCase":
                                (templateInfo.merdianCase == undefined) ? params.merdianCase = undefined : params.merdianCase = templateInfo.merdianCase;
                                break;
                            case "secondaryMerdianCase":
                                (templateInfo.secondaryMerdianCase == undefined) ? params.secondaryMerdianCase = undefined : params.secondaryMerdianCase = templateInfo.secondaryMerdianCase;
                                break;
                            case "depositionTime":
                                (templateInfo.depositionTime == undefined) ? params.depositionTime = undefined : params.depositionTime = templateInfo.depositionTime;
                                break;
                            case "relKnowleadge":
                                (templateInfo.relKnowleadge == undefined) ? params.relKnowleadge = undefined : params.relKnowleadge = templateInfo.relKnowleadge;
                                break;
                            case "defendantClaimNumber":
                                (templateInfo.defendantClaimNumber == undefined) ? params.defendantClaimNumber = undefined : params.defendantClaimNumber = templateInfo.defendantClaimNumber;
                                break;
                            case "documentDate":
                                (templateInfo.documentDate == undefined) ? params.documentDate = undefined : params.documentDate = utils.getUTCTimeStamp(templateInfo.documentDate);
                                break;
                            case "medicalRecordDate":
                                (templateInfo.medicalRecordDate == undefined) ? params.medicalRecordDate = undefined : params.medicalRecordDate = utils.getUTCTimeStamp(templateInfo.medicalRecordDate);
                                break;
                            case "orderDate":
                                (templateInfo.orderDate == undefined) ? params.orderDate = undefined : params.orderDate = utils.getUTCTimeStamp(templateInfo.orderDate);
                                break;
                            case "defendantsAdjuster":
                                (templateInfo.defendantsAdjuster == undefined) ? params.defendantsAdjuster = undefined : params.defendantsAdjuster = templateInfo.defendantsAdjuster;
                                break;
                            case "locationAccidentCity":
                                params.locationAccidentCity = (templateInfo.locationAccidentCity != undefined) ? templateInfo.locationAccidentCity : undefined;
                                break;
                            case "Description_of_Incident":
                                params.Description_of_Incident = (templateInfo.Description_of_Incident != undefined) ? templateInfo.Description_of_Incident : undefined;
                                break;
                            case "List_of_all_documents":
                                params.List_of_all_documents = (templateInfo.List_of_all_documents != undefined) ? templateInfo.List_of_all_documents : undefined;
                                break;
                            case "custodianName":
                                params.custodianName = (templateInfo.custodianName != undefined) ? templateInfo.custodianName : undefined;
                                break;
                            case "idNum1":
                                params.idNum1 = (templateInfo.idNum1 != undefined) ? templateInfo.idNum1 : undefined;
                                break;
                            case "idNum2":
                                params.idNum2 = (templateInfo.idNum2 != undefined) ? templateInfo.idNum2 : undefined;
                                break;
                            case "hiredTask":
                                params.hiredTask = (templateInfo.hiredTask != undefined) ? templateInfo.hiredTask : undefined;
                                break;
                            case "defendantContractor":
                                params.defendantContractor = (templateInfo.defendantContractor != undefined) ? templateInfo.defendantContractor : undefined;
                                break;
                            case "settled":
                                params.settled = (templateInfo.settled != undefined) ? templateInfo.settled : undefined;
                                break;
                            case "abandoned":
                                params.abandoned = (templateInfo.abandoned != undefined) ? templateInfo.abandoned : undefined;
                                break;
                            case "judgement":
                                params.judgement = (templateInfo.judgement != undefined) ? templateInfo.judgement : undefined;
                                break;
                            case "bondAmountDate":
                                params.bondAmountDate = (templateInfo.bondAmountDate != undefined) ? templateInfo.bondAmountDate = utils.getUTCTimeStamp(templateInfo.bondAmountDate) : undefined;
                                break;
                            case "motionLimineHeardDate":
                                params.motionLimineHeardDate = (templateInfo.motionLimineHeardDate != undefined) ? templateInfo.motionLimineHeardDate = utils.getUTCTimeStamp(templateInfo.motionLimineHeardDate) : undefined;
                                break;
                            case "motionLimineDate":
                                params.motionLimineDate = (templateInfo.motionLimineDate != undefined) ? templateInfo.motionLimineDate = utils.getUTCTimeStamp(templateInfo.motionLimineDate) : undefined;
                                break;
                            case "juryChargeDate":
                                params.juryChargeDate = (templateInfo.juryChargeDate != undefined) ? templateInfo.juryChargeDate = utils.getUTCTimeStamp(templateInfo.juryChargeDate) : undefined;
                                break;
                            case "daubertMotionHeardDate":
                                params.daubertMotionHeardDate = (templateInfo.daubertMotionHeardDate != undefined) ? templateInfo.daubertMotionHeardDate = utils.getUTCTimeStamp(templateInfo.daubertMotionHeardDate) : undefined;
                                break;
                            case "allDaubertDate":
                                params.allDaubertDate = (templateInfo.allDaubertDate != undefined) ? templateInfo.allDaubertDate = utils.getUTCTimeStamp(templateInfo.allDaubertDate) : undefined;
                                break;
                            case "allDispositiveMotionDate":
                                params.allDispositiveMotionDate = (templateInfo.allDispositiveMotionDate != undefined) ? templateInfo.allDispositiveMotionDate = utils.getUTCTimeStamp(templateInfo.allDispositiveMotionDate) : undefined;
                                break;
                            case "allDilatoryDate":
                                params.allDilatoryDate = (templateInfo.allDilatoryDate != undefined) ? templateInfo.allDilatoryDate = utils.getUTCTimeStamp(templateInfo.allDilatoryDate) : undefined;
                                break;
                            case "discoveryPropoundDate":
                                params.discoveryPropoundDate = (templateInfo.discoveryPropoundDate != undefined) ? templateInfo.discoveryPropoundDate = utils.getUTCTimeStamp(templateInfo.discoveryPropoundDate) : undefined;
                                break;
                            case "discoveryComplpetedDate":
                                params.discoveryComplpetedDate = (templateInfo.discoveryComplpetedDate != undefined) ? templateInfo.discoveryComplpetedDate = utils.getUTCTimeStamp(templateInfo.discoveryComplpetedDate) : undefined;
                                break;
                            case "defendantExpertDate":
                                params.defendantExpertDate = (templateInfo.defendantExpertDate != undefined) ? templateInfo.defendantExpertDate = utils.getUTCTimeStamp(templateInfo.defendantExpertDate) : undefined;
                                break;
                            case "defendantExhibitsDate":
                                params.defendantExhibitsDate = (templateInfo.defendantExhibitsDate != undefined) ? templateInfo.defendantExhibitsDate = utils.getUTCTimeStamp(templateInfo.defendantExhibitsDate) : undefined;
                                break;
                            case "return_date":
                                params.return_date = (templateInfo.return_date != undefined) ? templateInfo.return_date = utils.getUTCTimeStamp(templateInfo.return_date) : undefined;
                                break;
                            case "VideoSurveillanceDate":
                                params.VideoSurveillanceDate = (templateInfo.VideoSurveillanceDate != undefined) ? templateInfo.VideoSurveillanceDate = utils.getUTCTimeStamp(templateInfo.VideoSurveillanceDate) : undefined;
                                break;
                            case "date_of_adjournment":
                                params.date_of_adjournment = (templateInfo.date_of_adjournment != undefined) ? templateInfo.date_of_adjournment = utils.getUTCTimeStamp(templateInfo.date_of_adjournment) : undefined;
                                break;
                            case "dateForNOIExtension":
                                params.dateForNOIExtension = (templateInfo.dateForNOIExtension != undefined) ? templateInfo.dateForNOIExtension = utils.getUTCTimeStamp(templateInfo.dateForNOIExtension) : undefined;
                                break;
                            case "defendantWitnessDate":
                                params.defendantWitnessDate = (templateInfo.defendantWitnessDate != undefined) ? templateInfo.defendantWitnessDate = utils.getUTCTimeStamp(templateInfo.defendantWitnessDate) : undefined;
                                break;
                            case "exhibitsDate":
                                params.exhibitsDate = (templateInfo.exhibitsDate != undefined) ? templateInfo.exhibitsDate = utils.getUTCTimeStamp(templateInfo.exhibitsDate) : undefined;
                                break;
                            case "expertDate":
                                params.expertDate = (templateInfo.expertDate != undefined) ? templateInfo.expertDate = utils.getUTCTimeStamp(templateInfo.expertDate) : undefined;
                                break;
                            case "plaintiffWitnessDate":
                                params.plaintiffWitnessDate = (templateInfo.plaintiffWitnessDate != undefined) ? templateInfo.plaintiffWitnessDate = utils.getUTCTimeStamp(templateInfo.plaintiffWitnessDate) : undefined;
                                break;
                            case "Default_judgment_scheduled_date":
                                params.Default_judgment_scheduled_date = (templateInfo.Default_judgment_scheduled_date != undefined) ? templateInfo.Default_judgment_scheduled_date = utils.getUTCTimeStamp(templateInfo.Default_judgment_scheduled_date) : undefined;
                                break;
                            case "thirdPartyDate":
                                params.thirdPartyDate = (templateInfo.thirdPartyDate != undefined) ? templateInfo.thirdPartyDate = utils.getUTCTimeStamp(templateInfo.thirdPartyDate) : undefined;
                                break;
                            case "amendmentsDate":
                                params.amendmentsDate = (templateInfo.amendmentsDate != undefined) ? templateInfo.amendmentsDate = utils.getUTCTimeStamp(templateInfo.amendmentsDate) : undefined;
                                break;
                            case "proceedingDate":
                                params.proceedingDate = (templateInfo.proceedingDate != undefined) ? templateInfo.proceedingDate = utils.getUTCTimeStamp(templateInfo.proceedingDate) : undefined;
                                break;
                            case "staffId":
                                params.staffId = (templateInfo.staffId != undefined) ? templateInfo.staffId : undefined;
                                break;
                            case "medicalTreatmentDates":
                                params.medicalTreatmentDates = (templateInfo.medicalTreatmentDates != undefined) ? templateInfo.medicalTreatmentDates : undefined;
                                break;
                            case "plaintiffMulti1":
                                params.plaintiffMulti1 = (templateInfo.plaintiffMulti1 != undefined) ? templateInfo.plaintiffMulti1 : undefined;
                                break;
                            case "plaintiffMulti2":
                                params.plaintiffMulti2 = (templateInfo.plaintiffMulti2 != undefined) ? templateInfo.plaintiffMulti2 : undefined;
                                break;
                            case "plaintiffMulti3":
                                params.plaintiffMulti3 = (templateInfo.plaintiffMulti3 != undefined) ? templateInfo.plaintiffMulti3 : undefined;
                                break;
                            case "coCounsel":
                                params.coCounsel = (templateInfo.coCounsel != undefined) ? templateInfo.coCounsel : undefined;
                                break;
                        }
                    });
                    /** add extra paramters to template */
                    extraParams(templateInfo, params);
                    var APIFlag = vm.configure_template.template_api_call;
                    var templateCode = vm.configure_template.template_code;
                    if (templateInfo.multiselectcontactid != undefined) {
                        if (templateInfo.multiselectcontactid.length > 3) {
                            notificationService.error("Maximum 3 contacts allowed!");
                            return false;
                        }
                    }
                    if (templateInfo.multiselectcontactid_plaintiff != undefined) {
                        if (templateInfo.multiselectcontactid_plaintiff.length > 3) {
                            notificationService.error("Maximum 3 contacts allowed!");
                            return false;
                        }
                    }
                    if (templateInfo.multiselectcontactid_defendent != undefined) {
                        if (templateInfo.multiselectcontactid_defendent.length > 3) {
                            notificationService.error("Maximum 3 contacts allowed!");
                            return false;
                        }
                    }
                    var templateName = templateInfo.template_name;
                    resetParams = setParams(templateInfo.template_code, templateInfo.template_id, params);
                    if (APIFlag == "java") {
                        templatestDatalayer.GenerateNewTemplateRecord(resetParams, APIFlag, templateName)
                            .then(function (response) {
                                var filename = templateName.replace('.', '-');
                                var linkElement = document.createElement('a');
                                try {
                                    var blob = new Blob([response], { type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document" });
                                    var url = window.URL.createObjectURL(blob);

                                    linkElement.setAttribute('href', url);
                                    linkElement.setAttribute("download", filename + ".docx");

                                    var clickEvent = new MouseEvent("click", {
                                        "view": window,
                                        "bubbles": true,
                                        "cancelable": false
                                    });
                                    linkElement.dispatchEvent(clickEvent);
                                    vm.close();
                                } catch (ex) {
                                    console.log(ex);
                                }
                            }, function (error) {
                                if (localStorage.getItem('templateError') == "true") {
                                    notificationService.error('' + error.data);
                                    localStorage.setItem('templateError', "false");
                                }
                            });
                    } else if (APIFlag == "java2") {
                        templatestDatalayer.GenerateNewTemplateRecord(resetParams, APIFlag, templateName)
                            .then(function (response) {
                                var filename = templateName.replace('.', '-');
                                var linkElement = document.createElement('a');
                                try {
                                    var blob = new Blob([response], { type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document" });
                                    var url = window.URL.createObjectURL(blob);

                                    linkElement.setAttribute('href', url);
                                    linkElement.setAttribute("download", filename + ".docx");

                                    var clickEvent = new MouseEvent("click", {
                                        "view": window,
                                        "bubbles": true,
                                        "cancelable": false
                                    });
                                    linkElement.dispatchEvent(clickEvent);
                                    vm.close();
                                } catch (ex) {
                                    console.log(ex);
                                }
                            }, function (error) {
                                if (localStorage.getItem('templateError') == "true") {
                                    notificationService.error('' + error.data);
                                    localStorage.setItem('templateError', "false");
                                }
                            });
                    } else if (APIFlag == "php") {
                        templatestDatalayer.GenerateNewTemplateRecord(resetParams, APIFlag)
                            .then(function (response) {
                                templatestDatalayer.DownloadTemplate(response.data).
                                    then(function (response) {
                                        window.open(response.data, '_blank');
                                        vm.close();
                                    });
                            }, function (error) {

                                if (localStorage.getItem('templateError') == "true") {
                                    notificationService.error('' + error.data);
                                    localStorage.setItem('templateError', "false");
                                }
                            });
                    } else if (APIFlag == "php2") {
                        templatestDatalayer.GenerateNewTemplateRecord(resetParams, APIFlag)
                            .then(function (response) {
                                templatestDatalayer.DownloadTemplate(response.data).
                                    then(function (response) {
                                        window.open(response.data, '_blank');
                                        vm.close();
                                    });
                            }, function (error) {

                                if (localStorage.getItem('templateError') == "true") {
                                    notificationService.error('' + error.data);
                                    localStorage.setItem('templateError', "false");
                                }
                            });
                    }

                }
            } else {

                if (vm.TemplateModelInfo.matterId) {
                    vm.TemplateModelInfo.matterId = vm.TemplateModelInfo.matterId;
                } else {
                    vm.TemplateModelInfo.matterId = 0;
                }

                //user ids are seperated from  object
                //for each user id GenerateTemplateRecord will be called
                var plaintiffids = [];
                var defendantids = [];
                var associate_party_id = '';
                var templateInfo = {};
                templateInfo = angular.copy(vm.TemplateModelInfo);
                /*plantiffs model value returned by radio input is JSON, so it has to be convert into array*/
                if (!Array.isArray(templateInfo.plaintiffs) && utils.isNotEmptyVal(templateInfo.plaintiffs)) {
                    plaintiffids.push(JSON.parse(templateInfo.plaintiffs));
                    templateInfo.plaintiffs = plaintiffids;
                }
                if (!Array.isArray(templateInfo.defendants) && utils.isNotEmptyVal(templateInfo.defendants)) {
                    defendantids.push(JSON.parse(templateInfo.defendants));
                    templateInfo.defendants = defendantids;
                }
                /*set the parameters for generating template by type id and type of selected template*/
                switch (vm.option) {
                    case 'Plaintiff':
                        if (templateInfo.typeId == 18) {
                            templateInfo.userlist = _.pluck(templateInfo.plaintiffs, 'contactid');
                        } else if (templateInfo.typeId == 23) {
                            templateInfo.userlist = _.pluck(templateInfo.plaintiffs, 'plaintiffid');
                            templateInfo.associate_party_id = templateInfo.plaintiffs[0].employerid
                        } else {
                            templateInfo.userlist = _.pluck(templateInfo.plaintiffs, 'plaintiffid');
                        }
                        break;
                    case 'Defendant':
                        if (templateInfo.typeId == 19) {
                            templateInfo.userlist = _.pluck(templateInfo.defendants, 'contactid');
                            templateInfo.plaintiffids = _.pluck(templateInfo.plaintiffs, 'plaintiffid');
                        } else {
                            templateInfo.userlist = _.pluck(templateInfo.defendants, 'defendantid');
                        }
                        break;
                    case 'PlaintiffDefendant':
                        if (templateInfo.typeId == 17 || templateInfo.typeId == 25 || templateInfo.typeId == 26) {
                            templateInfo.userlist = _.pluck(templateInfo.plaintiffs, 'plaintiffid');
                            // get insured party details       
                            var plaintiffInsParty = _.filter(vm.insuranceContactList, function (contact) {
                                return (contact.insuranceproviderid.contactid ==
                                    templateInfo.insuranceproviderid);
                            });
                            templateInfo.plaintiffInsParty = plaintiffInsParty[0].insuredpartyid.contactid;
                            templateInfo.plaintiffInsProvider = templateInfo.insuranceproviderid
                        } else {
                            templateInfo.userlist = _.pluck(templateInfo.plaintiffs, 'plaintiffid');
                            templateInfo.plaintiffids = _.pluck(templateInfo.plaintiffs, 'plaintiffid');
                            templateInfo.defendantids = _.pluck(templateInfo.defendants, 'defendantid');
                            templateInfo.associate_party_id = templateInfo.insuranceproviderid;
                        }
                        break;
                    case 'PlaintiffService':
                        if (templateInfo.typeId == 20) {
                            templateInfo.contactId = templateInfo.matterContactId.contactid;
                            templateInfo.contactType = templateInfo.matterContactId.contact_type;
                        }
                        templateInfo.userlist = _.pluck(templateInfo.plaintiffs, 'plaintiffid');
                        templateInfo.associate_party_id = templateInfo.insuranceproviderid;
                        break;
                    case 'Attorney':
                        templateInfo.userlist = _.pluck(templateInfo.attorneys, 'uid');
                        break;
                    case 'DefendantAttorney':
                        templateInfo.userlist = _.pluck(templateInfo.attorneys, 'uid');
                        templateInfo.associate_party_id = templateInfo.insuranceproviderid;
                        break;
                    case 'PlaintiffEvents':
                        templateInfo.userlist = _.pluck(templateInfo.plaintiffs, 'plaintiffid');
                        break;
                }
                //download template for entered template info    
                downloadTemplate(templateInfo);
            }
        }
        /*geneate template by calling function of template data layer*/
        function downloadTemplate(templateObj) {
            templateHelper.setTemplateObj(templateObj, vm.option);
            var plaintiffArr = [];
            localStorage.setItem('templateError', "true");
            if (vm.option != "PlaintiffDefendant" || (vm.option == "PlaintiffDefendant" && (templateObj.typeId == 17 || templateObj.typeId == 25 || templateObj.typeId == 26))) {
                _.forEach(templateObj.userlist, function (user, index) {
                    if (templateObj.plaintiffs == undefined) {
                        templatestDatalayer.GenerateTemplateRecord(
                            templateObj.template_id, // template id
                            templateObj.lexvia_template,
                            templateObj.matterId, // matter id
                            (templateObj.typeId == 20) ? templateObj.contactId : user.defendantId, // user.defendantId ------ contact id or defendant id
                            (templateObj.typeId == 23) ? '' : user.plaintiffId, // plaintiff id
                            (templateObj.typeId == 23) ? templateObj.insuranceproviderid : user.RequiredAssociateId, // insurance provider id
                            vm.option, // option 
                            templateObj.typeId, // type id for temmplate
                            templateObj.leadattorneyid, // lead attorney id
                            templateObj.paralegalid, // paralegal id
                            (templateObj.showsocialsecuritynumber == '1') ? '1' : '0',
                            templateObj.secondleadattorneyid, // second lead attorney id
                            templateObj.secondparalegalid, // second paralegal id
                            (templateObj.typeId == 20) ? templateObj.contactType : undefined)
                            .then(function (response) {
                                templatestDatalayer.DownloadTemplate(response.data).
                                    then(function (response) {
                                        window.open(response.data, '_blank');
                                        vm.close();
                                    });
                            }, function (response) {
                                if (localStorage.getItem('templateError') == "true") {
                                    notificationService.error('' + response.data);
                                    localStorage.setItem('templateError', "false");
                                }
                            });
                    } else {
                        // _.forEach(templateObj.plaintiffs, function (plaintiff) {
                        templatestDatalayer.GenerateTemplateRecord(
                            templateObj.template_id, // template id
                            templateObj.lexvia_template,
                            templateObj.matterId, // matter id
                            (templateObj.typeId == 20) ? templateObj.contactId : user.defendantId, // user.defendantId ------ contact id or defendant id
                            (templateObj.typeId == 23) ? templateObj.plaintiffs[index] : templateObj.plaintiffs[index].plaintiffid, // plaintiff id
                            (templateObj.typeId == 23) ? templateObj.insuranceproviderid : user.RequiredAssociateId, // insurance provider id
                            vm.option, // option 
                            templateObj.typeId, // type id for temmplate
                            templateObj.leadattorneyid, // lead attorney id
                            templateObj.paralegalid, // paralegal id
                            (templateObj.showsocialsecuritynumber == '1') ? '1' : '0',
                            templateObj.secondleadattorneyid, // second lead attorney id
                            templateObj.secondparalegalid, // second paralegal id
                            (templateObj.typeId == 20) ? templateObj.contactType : undefined)
                            .then(function (response) {
                                templatestDatalayer.DownloadTemplate(response.data).
                                    then(function (response) {
                                        window.open(response.data, '_blank');
                                        vm.close();
                                    });
                            }, function (response) {
                                if (localStorage.getItem('templateError') == "true") {
                                    notificationService.error('' + response.data);
                                    localStorage.setItem('templateError', "false");
                                }
                            });
                        // });
                    }

                });
            } else {
                _.forEach(templateObj.plaintiffids, function (plaintiff_id) {
                    _.forEach(templateObj.defendantids, function (defendant_id) {
                        templatestDatalayer.GenerateTemplateRecord(
                            templateObj.template_id,
                            templateObj.lexvia_template,
                            templateObj.matterId,
                            defendant_id,
                            plaintiff_id,
                            (templateObj.typeId == 6 || templateObj.typeId == 7) ? templateObj.insuranceproviderid : templateObj.associate_party_id,
                            vm.option,
                            (templateObj.showsocialsecuritynumber == '1') ? '1' : '0')
                            .then(function (response) {
                                templatestDatalayer.DownloadTemplate(response.data).
                                    then(function (response) {
                                        window.open(response.data, '_blank');
                                        vm.close();
                                    });
                            }, function (error) {
                                if (utils.isEmptyVal(error.data)) {
                                    notificationService.error('An error occurred. Please try later.');
                                } else {
                                    if (localStorage.getItem('templateError') == "true") {
                                        notificationService.error('' + error.data);
                                        localStorage.setItem('templateError', "false");
                                    }
                                }
                            });
                    });
                });
            }
        }
    }
})();

(function (angular) {

    angular.module('cloudlex.matter')
        .factory('templateHelper', templateHelper);


    function templateHelper() {
        return {
            setTemplateObj: _setTemplateObj,
            setNamePropForAttorneys: _setNamePropForAttorneys,
            setNamePropForParalegals: _setNamePropForParalegals,
            setNamePropForPlaintiffs: _setNamePropForPlaintiffs,
            setNamePropForDefendantAttorney: _setNamePropForDefendantAttorney,
            setNamePropForDefendants: _setNamePropForDefendants,
            setNamePropForotherParty: _setNamePropForotherParty,
            setNamePropForContacts: _setNamePropForContacts,
            setNamePropForserviceprovider: setNamePropForserviceprovider,
            setLienHolderInsuranceProvider: _setLienHolderInsuranceProvider,
            setLinkedContacts: _setLinkedContacts,
            setContactName: _setContactName
        };

        // set template obj for type of template which requires multiple plaintiff or defendant  
        function _setTemplateObj(templateObj, option) {
            if (utils.isEmptyVal(templateObj.userlist)) {
                return;
            }
            var userList = [];
            templateObj.RequiredAssociateId = (utils.isEmptyVal(templateObj.associate_party_id)) ? templateObj.eventid :
                templateObj.associate_party_id;

            if (utils.isNotEmptyVal(templateObj.userlist)) {
                _.forEach(templateObj.userlist, function (user_id) {
                    userList.push(getUserObj(user_id, templateObj, option));
                });
            }

            templateObj.userlist = userList;
        }

        function getUserObj(user_id, tempObj, option) {
            if (option == "PlaintiffService" || option == "DefendantAttorney") {
                return (tempObj.typeId == 20) ? { mattercontactid: tempObj.contactId, plaintiffId: user_id, RequiredAssociateId: tempObj.RequiredAssociateId } : { defendantId: '', plaintiffId: user_id, RequiredAssociateId: tempObj.RequiredAssociateId };
            } else {
                return ((tempObj.typeId == 17 || tempObj.typeId == 25 ||
                    tempObj.typeId == 26) ? {
                        plaintiffId: user_id,
                        defendantId: tempObj.plaintiffInsParty,
                        RequiredAssociateId: tempObj.plaintiffInsProvider
                    } : { plaintiffId: user_id, defendantId: user_id, RequiredAssociateId: tempObj.RequiredAssociateId });
            }
        }

        /*set first name and last name as one property for attorneys*/
        function _setNamePropForAttorneys(attorneys) {
            _.forEach(attorneys, function (attorney) {
                attorney.contact_name = utils.isNotEmptyVal(attorney.uid) ?
                    (attorney.name + " " + attorney.lname) :
                    '';
                attorney.name = utils.isNotEmptyVal(attorney.uid) ?
                    (attorney.name + " " + attorney.lname) :
                    '';
            });
        }

        /*set first name and last name as one property for paralegal*/
        function _setNamePropForParalegals(paralegals) {
            _.forEach(paralegals, function (paralegal) {
                if (paralegal != undefined) {
                    paralegal.contact_name = utils.isNotEmptyVal(paralegal.uid) ?
                        (paralegal.name + " " + paralegal.lname) :
                        '';
                }
            });
        }

        /*set first name and last name as one property for plaintiffs*/
        function _setNamePropForPlaintiffs(plaintiffs) {
            _.forEach(plaintiffs, function (plaintiff) {
                plaintiff.name = utils.isNotEmptyVal(plaintiff.contactid) ?
                    (plaintiff.contactid.firstname + " " + plaintiff.contactid.lastname) :
                    '';
            });
        }

        /* set first name and last name as one property or defendant attorney*/
        function _setNamePropForDefendantAttorney(defendantAttorney) {
            _.forEach(defendantAttorney, function (defendantAttorneyKey) {
                defendantAttorneyKey.name = utils.isNotEmptyVal(defendantAttorneyKey.contactid) ?
                    (defendantAttorneyKey.firstname + " " + defendantAttorneyKey.lastname) :
                    '';
            });
        }


        /*set first name and last name as one property for defendants*/
        function _setNamePropForDefendants(defendants) {
            _.forEach(defendants, function (defendant) {
                defendant.name = utils.isNotEmptyVal(defendant.contactid) ?
                    (defendant.contactid.firstname + " " + defendant.contactid.lastname) :
                    '';
            });
        }
        /*set first name and last name as one property for otherParty*/
        function _setNamePropForotherParty(otherparty) {
            _.forEach(otherparty, function (oparty) {
                oparty.contact_name = utils.isNotEmptyVal(oparty.contactid) ?
                    (oparty.firstname + " " + oparty.lastname) :
                    '';
            });
        }

        /*set first name and last name as contact name */
        function _setContactName(party) {
            _.forEach(party, function (oparty) {
                if (utils.isNotEmptyVal(oparty.contactid)) {
                    var lastName = utils.isNotEmptyVal(oparty.lastname) ? oparty.lastname : '';
                    var firstName = utils.isNotEmptyVal(oparty.firstname) ? oparty.firstname : '';
                    oparty.contact_name = firstName + " " + lastName;
                }
            });
        }

        /*set first name and last name as one property for service provider*/
        function setNamePropForserviceprovider(serviceprovider) {
            _.forEach(serviceprovider, function (sprovider) {
                sprovider.contact_name = utils.isNotEmptyVal(sprovider.contactid) ?
                    (sprovider.firstname + " " + sprovider.lastname) :
                    '';
            });
        }


        /*set first name and last name as one property for matterContacts*/
        function _setNamePropForContacts(matterContacts) {
            _.forEach(matterContacts, function (contact) {
                contact.contact_name = utils.isNotEmptyVal(contact.contactid) ?
                    (contact.fname + " " + contact.lname) : '';
            });
        }

        /**
         * set lien holder name and insurance provider name
         */
        function _setLienHolderInsuranceProvider(liens) {
            _.forEach(liens, function (contact) {
                contact.contact_name = utils.isNotEmptyVal(contact.lienholdername) ?
                    (contact.lienholdername.firstname + " " + contact.lienholdername.lastname) : '';
                contact.insurance_provider = utils.isNotEmptyVal(contact.insuranceproviderid) ?
                    (contact.insuranceproviderid.firstname + " " + contact.insuranceproviderid.lastname) : '';
            });
        }


        /*filter associate contacts to show in dropdown for selection*/
        function _setLinkedContacts(parties, associateContacts, typeId) {
            var tempContacts = []
            if (typeId == 16 || typeId == 21 || typeId == 131 || typeId == 139 || typeId == 138) {
                _.forEach(parties, function (party) {
                    _.forEach(associateContacts, function (contact) {
                        if (contact.plaintiffid.contactid == party.contactid.contactid) {
                            tempContacts.push(contact);
                        }
                    });
                });
                tempContacts = _.pluck(tempContacts, 'physicianid');
            } else {
                _.forEach(parties, function (party) {
                    _.forEach(associateContacts, function (contact) {
                        if (contact.plaintiffid.contactid == party.contactid.contactid) {
                            tempContacts.push(contact);
                        }
                    });
                });
                tempContacts = _.pluck(tempContacts, 'providerid');
            }

            setNamePropForserviceprovider(tempContacts);
            return tempContacts;
        }
    }

})(angular);
